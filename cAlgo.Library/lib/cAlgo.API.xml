<?xml version="1.0"?>
<doc>
    <assembly>
        <name>cAlgo.API</name>
    </assembly>
    <members>
        <member name="T:cAlgo.API.AccessRights">
            <summary>
            cBots and indicators access rights
            </summary>
        </member>
        <member name="F:cAlgo.API.AccessRights.None">
            <summary>
            Algorithm doesn’t require any access rights.
            </summary>
        </member>
        <member name="F:cAlgo.API.AccessRights.FileSystem">
            <summary>
            Access to file system.
            </summary>
        </member>
        <member name="F:cAlgo.API.AccessRights.Internet">
            <summary>
            Access to Internet or other networks.
            </summary>
        </member>
        <member name="F:cAlgo.API.AccessRights.Registry">
            <summary>
            Access to windows registry.
            </summary>
        </member>
        <member name="F:cAlgo.API.AccessRights.FullAccess">
            <summary>
            The unlimited access rights.
            </summary>
        </member>
        <member name="T:cAlgo.API.Chart">
            <summary>
            The Chart Interface.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.IndicatorAreas">
            <summary>
            Gets the read only list of the indicator areas.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.DisplaySettings">
            <summary>
            Gets the chart display settings.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.ColorSettings">
            <summary>
            Gets the chart color settings.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.ChartType">
            <summary>
            Gets or sets the type of the chart - Bar, Candlesticks, Line or Dots chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.Zoom">
            <summary>
            Gets or sets the zoom option from 0 to 5.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.FirstVisibleBarIndex">
            <summary>
            Gets the index of the first visible bar on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.LastVisibleBarIndex">
            <summary>
            Gets the index of the last visible bar on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.MaxVisibleBars">
            <summary>
            Gets the maximum number of the visible bars on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.BarsTotal">
            <summary>
            Gets the total number of the bars on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.MarketSeries">
            <summary>
            Gets the the chart market data such as Open, High, Low, Close, Median, Typical, and WeightedClose price series, as well as OpenTime for the symbol, SymbolCode, TickVolume, and TimeFrame.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.TimeFrame">
            <summary>
            Gets the time frame of the chart from 1 minute to 1 month.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.Symbol">
            <summary>
            Gets the chart symbol.
            </summary>
        </member>
        <member name="E:cAlgo.API.Chart.DisplaySettingsChanged">
            <summary>
            Occurs when one or several charts display settings change.
            </summary>
        </member>
        <member name="E:cAlgo.API.Chart.ColorsChanged">
            <summary>
            Occurs when the chart color settings change.
            </summary>
        </member>
        <member name="E:cAlgo.API.Chart.ChartTypeChanged">
            <summary>
            Occurs when the chart type changes.
            </summary>
        </member>
        <member name="E:cAlgo.API.Chart.ZoomChanged">
            <summary>
            Occurs when the chart zoom options change.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.IsScrollingEnabled">
            <summary>
            Gets or sets the value indicating whether the scrolling is enabled or disabled for the chart. If disabled, then the chart is not affected by scrolling, dragging, scaling, or pressing any keyboard keys, but is still affected by resizing, zooming, and API calls for changing X or Y-axis positions on the chart.
            </summary>
        </member>
        <member name="M:cAlgo.API.Chart.ScrollXBy(System.Int32)">
            <summary>
            Scrolls the chart by the X-axis for the specified number of bars.
            </summary>
            <param name="bars"></param>
        </member>
        <member name="M:cAlgo.API.Chart.ScrollXTo(System.Int32)">
            <summary>
            Scrolls the chart by the X-axis to the bar with the specified index.
            </summary>
            <param name="barIndex">The index of the bar.</param>
        </member>
        <member name="M:cAlgo.API.Chart.ScrollXTo(System.DateTime)">
            <summary>
            Scrolls the chart by the X-axis to the specified date time.
            </summary>
            <param name="time"></param>
        </member>
        <member name="E:cAlgo.API.Chart.IndicatorAreaAdded">
            <summary>
            Occurs when the indicator area is added.
            </summary>
        </member>
        <member name="E:cAlgo.API.Chart.IndicatorAreaRemoved">
            <summary>
            Occurs when the indicator area is removed.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartColorSettings">
            <summary>
            Represents the charts Color Settings.
            </summary>
            <remarks>
            Use the Color classes to set the chart Color Settings.
            </remarks>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.BackgroundColor">
            <summary>
            Gets or sets the color of the chart background.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.ForegroundColor">
            <summary>
            Gets or sets the color of the chart foreground.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.GridLinesColor">
            <summary>
            Gets or sets the color of the grid lines.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.PeriodSeparatorColor">
            <summary>
            Gets or sets the color of the period separator.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.BullOutlineColor">
            <summary>
            Gets or sets the color of the bull candle or bar outline.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.BearOutlineColor">
            <summary>
            Gets or sets the color of the bear candle or bar outline.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.BullFillColor">
            <summary>
            Gets or sets the color of the bull candle fill.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.BearFillColor">
            <summary>
            Gets or sets the color of the bear candle fill.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.TickVolumeColor">
            <summary>
            Gets or sets the color of the tick volume.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.WinningDealColor">
            <summary>
            Gets or sets the color of the winning deal.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.LosingDealColor">
            <summary>
            Gets or sets the color of the losing deal.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.AskPriceLineColor">
            <summary>
            Gets or sets the color of the ask price line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.BidPriceLineColor">
            <summary>
            Gets or sets the color of the bid price line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.BuyColor">
            <summary>
            Gets or sets the color of Buy positions and orders.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.SellColor">
            <summary>
            Gets or sets the color of Sell order positions and orders.
            </summary>
        </member>
        <member name="M:cAlgo.API.ControlBase.#ctor(cAlgo.API.ControlType)">
            <summary>
            Initializes a new instance of the ControlBase class.TBD
            </summary>
            <param name="controlType">Type of the control.</param>
        </member>
        <member name="P:cAlgo.API.ControlBase.UniqueId">
            <summary>
            Gets the unique identifier.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.ControlType">
            <summary>
            Gets the control type.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.Style">
            <summary>
            Gets or sets the style.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.Left">
            <summary>
            Gets or sets the left.TBD
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.Top">
            <summary>
            Gets or sets the top.TBD
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.Right">
            <summary>
            Gets or sets the right.TBD
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.Bottom">
            <summary>
            Gets or sets the bottom.TBD
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.Width">
            <summary>
            Gets or sets the width.TBD
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.Height">
            <summary>
            Gets or sets the height.TBD
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.MinWidth">
            <summary>
            Gets or sets the minimum width.
            </summary>
            <value>The minimum width.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.MinHeight">
            <summary>
            Gets or sets the minimum height.
            </summary>
            <value>The minimum height.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.MaxWidth">
            <summary>
            Gets or sets the maximum width.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.MaxHeight">
            <summary>
            Gets or sets the maximum height.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is enabled.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.Opacity">
            <summary>
            Gets or sets the opacity.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <exception cref="T:System.InvalidOperationException">Value cannot be null</exception>
        </member>
        <member name="P:cAlgo.API.ControlBase.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.Dock">
            <summary>
            </summary>
        </member>
        <member name="T:cAlgo.API.ControlState">
            <summary>
            Represents the chart control state.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlState.Hover">
            <summary>
            The hover
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlState.Pressed">
            <summary>
            The pressed
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlState.Disabled">
            <summary>
            The disabled
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlState.Checked">
            <summary>
            The checked
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlState.DarkTheme">
            <summary>
            The dark theme
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlState.LightTheme">
            <summary>
            The light theme
            </summary>
        </member>
        <member name="T:cAlgo.API.Border">
            <summary>
            Represents the border.
            </summary>
            <seealso cref="T:cAlgo.API.ControlBase" />
        </member>
        <member name="F:cAlgo.API.Border._backgroundColor">
            <summary>
            The border background color.
            </summary>
        </member>
        <member name="F:cAlgo.API.Border._borderColor">
            <summary>
            The border line color.
            </summary>
        </member>
        <member name="F:cAlgo.API.Border._borderThickness">
            <summary>
            The border line thickness.
            </summary>
        </member>
        <member name="F:cAlgo.API.Border._child">
            <summary>
            The border child object.
            </summary>
        </member>
        <member name="F:cAlgo.API.Border._cornerRadius">
            <summary>
            The border corner radius.
            </summary>
        </member>
        <member name="F:cAlgo.API.Border._padding">
            <summary>
            The border padding thickness.
            </summary>
        </member>
        <member name="M:cAlgo.API.Border.#ctor">
            <summary>
            Initializes a new instance of the Border class.
            </summary>
        </member>
        <member name="P:cAlgo.API.Border.Child">
            <summary>
            Gets or sets the border child object.
            </summary>
        </member>
        <member name="P:cAlgo.API.Border.BorderThickness">
            <summary>
            Gets or sets the border thickness.
            </summary>
            <exception cref="T:System.InvalidOperationException">Value cannot be null</exception>
        </member>
        <member name="P:cAlgo.API.Border.Padding">
            <summary>
            Gets or sets the border padding thickness.
            </summary>
            <exception cref="T:System.InvalidOperationException">Value cannot be null</exception>
        </member>
        <member name="P:cAlgo.API.Border.CornerRadius">
            <summary>
            Gets or sets the border corner radius.
            </summary>
            <exception cref="T:System.InvalidOperationException">Value cannot be null</exception>
        </member>
        <member name="P:cAlgo.API.Border.BorderColor">
            <summary>
            Gets or sets the border line color.
            </summary>
        </member>
        <member name="P:cAlgo.API.Border.BackgroundColor">
            <summary>
            Gets or sets the color of the border background.
            </summary>
        </member>
        <member name="T:cAlgo.API.Button">
            <summary>
            Represents the button.
            </summary>
            <seealso cref="T:cAlgo.API.Control" />
        </member>
        <member name="F:cAlgo.API.Button._content">
            <summary>
            The text content of the button.
            </summary>
        </member>
        <member name="M:cAlgo.API.Button.#ctor">
            <summary>
            Initializes a new Button on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.Button.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:cAlgo.API.Button.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="E:cAlgo.API.Button.Click">
            <summary>
            Occurs when clicked.
            </summary>
        </member>
        <member name="T:cAlgo.API.CheckBox">
            <summary>
            Represents the Checkbox.
            </summary>
            <seealso cref="T:cAlgo.API.Control" />
        </member>
        <member name="M:cAlgo.API.CheckBox.#ctor">
            <summary>
            Initializes a new checkbox on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.CheckBox.IsThreeState">
            <summary>
            Checks if the checkbox may be of three states - checked, unchecked and indeterminate.
            </summary>
        </member>
        <member name="P:cAlgo.API.CheckBox.IsChecked">
            <summary>
            Gets or sets a value indicating whether the checkbox is checked.
            </summary>
        </member>
        <member name="P:cAlgo.API.CheckBox.Text">
            <summary>
            Gets or sets the checknbox text.
            </summary>
        </member>
        <member name="P:cAlgo.API.CheckBox.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="E:cAlgo.API.CheckBox.Click">
            <summary>
            Occurs when clicked.
            </summary>
        </member>
        <member name="E:cAlgo.API.CheckBox.Checked">
            <summary>
            Occurs when checked.
            </summary>
        </member>
        <member name="E:cAlgo.API.CheckBox.Unchecked">
            <summary>
            Occurs when unchecked.
            </summary>
        </member>
        <member name="E:cAlgo.API.CheckBox.Indeterminate">
            <summary>
            Occurs when indeterminate.
            </summary>
        </member>
        <member name="T:cAlgo.API.Control">
            <summary>
            The chart Control class.
            </summary>
            <seealso cref="T:cAlgo.API.ControlBase" />
        </member>
        <member name="M:cAlgo.API.Control.#ctor(cAlgo.API.ControlType)">
            <summary>
            Initializes a new instance of the chart control.
            </summary>
            <param name="controlType">The Type of the chart control.</param>
        </member>
        <member name="P:cAlgo.API.Control.ForegroundColor">
            <summary>
            Gets or sets the color of the chart control foreground.
            </summary>
        </member>
        <member name="P:cAlgo.API.Control.BackgroundColor">
            <summary>
            Gets or sets the color of the chart control background.
            </summary>
        </member>
        <member name="P:cAlgo.API.Control.Padding">
            <summary>
            Gets or sets the chart control padding.
            </summary>
            <exception cref="T:System.InvalidOperationException">Value cannot be null</exception>
        </member>
        <member name="P:cAlgo.API.Control.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical content alignment.
            </summary>
        </member>
        <member name="P:cAlgo.API.Control.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal content alignment.
            </summary>
        </member>
        <member name="T:cAlgo.API.RadioButton">
            <summary>
            Reporesents the Radiobutton chart control type.
            </summary>
            <seealso cref="T:cAlgo.API.Control" />
        </member>
        <member name="M:cAlgo.API.RadioButton.#ctor">
            <summary>
            Initializes a new instance of the radiobutton on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.RadioButton.IsChecked">
            <summary>
            Defines if the radiobutton is checked.
            </summary>
        </member>
        <member name="P:cAlgo.API.RadioButton.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:cAlgo.API.RadioButton.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="P:cAlgo.API.RadioButton.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
        </member>
        <member name="E:cAlgo.API.RadioButton.Click">
            <summary>
            Occurs when clicked.
            </summary>
        </member>
        <member name="E:cAlgo.API.RadioButton.Checked">
            <summary>
            Occurs when checked.
            </summary>
        </member>
        <member name="E:cAlgo.API.RadioButton.Unchecked">
            <summary>
            Occurs when unchecked.
            </summary>
        </member>
        <member name="M:cAlgo.API.ScrollViewer.#ctor">
            <summary>
            Initializes a new scroll viewer on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ScrollViewer.HorizontalScrollBarVisibility">
            <summary>
            Defines the horizontal scroll bar visibility.
            </summary>
        </member>
        <member name="P:cAlgo.API.ScrollViewer.VerticalScrollBarVisibility">
            <summary>
            Defines the vertical scroll bar visibility.
            </summary>
        </member>
        <member name="P:cAlgo.API.ScrollViewer.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="T:cAlgo.API.TextBlock">
            <summary>
            Represents the Text block.
            </summary>
            <seealso cref="T:cAlgo.API.Control" />
        </member>
        <member name="F:cAlgo.API.TextBlock._textAlignment">
            <summary>
            The text alignment.
            </summary>
        </member>
        <member name="M:cAlgo.API.TextBlock.#ctor">
            <summary>
            Initializes a new text block on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBlock.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBlock.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="T:cAlgo.API.ToggleButton">
            <summary>
            Represents the Toggle button.
            </summary>
            <seealso cref="T:cAlgo.API.Control" />
        </member>
        <member name="M:cAlgo.API.ToggleButton.#ctor">
            <summary>
            Initializes a new instance of the Toggle button on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ToggleButton.IsChecked">
            <summary>
            Defines whether the Toggle button is checked.
            </summary>
        </member>
        <member name="P:cAlgo.API.ToggleButton.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:cAlgo.API.ToggleButton.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="E:cAlgo.API.ToggleButton.Click">
            <summary>
            Occurs when clicked.
            </summary>
        </member>
        <member name="E:cAlgo.API.ToggleButton.Checked">
            <summary>
            Occurs when checked.
            </summary>
        </member>
        <member name="E:cAlgo.API.ToggleButton.Unchecked">
            <summary>
            Occurs when unchecked.
            </summary>
        </member>
        <member name="T:cAlgo.API.ControlType">
            <summary>
            Represents the type of the chart control member.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlType.Canvas">
            <summary>
            The canvas.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlType.Grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlType.TextBlock">
            <summary>
            The text block.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlType.Button">
            <summary>
            The button.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlType.StackPanel">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlType.WrapPanel">
            <summary>
            The wrap panel.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlType.DockPanel">
            <summary>
            The dock panel.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlType.Border">
            <summary>
            The border.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlType.CheckBox">
            <summary>
            The Checkbox.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlType.ToggleButton">
            <summary>
            The toggle button.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlType.RadioButton">
            <summary>
            The Radiobutton.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlType.ScrollViewer">
            <summary>
            The scroll viewer.
            </summary>
        </member>
        <member name="P:cAlgo.API.CornerRadius.TopLeft">
            <summary>
            </summary>
        </member>
        <member name="P:cAlgo.API.CornerRadius.TopRight">
            <summary>
            </summary>
        </member>
        <member name="P:cAlgo.API.CornerRadius.BottomRight">
            <summary>
            </summary>
        </member>
        <member name="P:cAlgo.API.CornerRadius.BottomLeft">
            <summary>
            </summary>
        </member>
        <member name="M:cAlgo.API.CornerRadius.op_Implicit(System.Double)~cAlgo.API.CornerRadius">
            <summary>
            </summary>
            <param name="uniform"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.CornerRadius.op_Implicit(System.String)~cAlgo.API.CornerRadius">
            <summary>
            </summary>
            <param name="cornerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.CornerRadius.Set(System.Double)">
            <summary>
            </summary>
            <param name="uniformRadius"></param>
        </member>
        <member name="M:cAlgo.API.CornerRadius.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            </summary>
            <param name="topLeft"></param>
            <param name="topRight"></param>
            <param name="bottomRight"></param>
            <param name="bottomLeft"></param>
        </member>
        <member name="T:cAlgo.API.Dock">
            <summary>
            Enum Dock
            </summary>
        </member>
        <member name="F:cAlgo.API.Dock.Left">
            <summary>
            The left
            </summary>
        </member>
        <member name="F:cAlgo.API.Dock.Top">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.Dock.Right">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.Dock.Bottom">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.Orientation.Horizontal">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.Orientation.Vertical">
            <summary>
            </summary>
        </member>
        <member name="M:cAlgo.API.Canvas.#ctor">
            <summary>
            Initializes a new canvas.
            </summary>
        </member>
        <member name="M:cAlgo.API.Canvas.Accept(cAlgo.API.Internals.ChartControls.IChartControlVisitor)">
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:cAlgo.API.DockPanel.#ctor">
            <summary>
            Initializes a new instance of the DockPanel class.
            </summary>
        </member>
        <member name="P:cAlgo.API.DockPanel.LastChildFill">
            <summary>
            Defines whether last child is fill.
            </summary>
        </member>
        <member name="T:cAlgo.API.Grid">
            <summary>
            Represents the Grid class.
            </summary>
            <seealso cref="T:cAlgo.API.Panel" />
        </member>
        <member name="M:cAlgo.API.Grid.#ctor">
            <summary>
            Initializes a new grid on the chart.
            </summary>
        </member>
        <member name="M:cAlgo.API.Grid.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new grid on the chart.
            </summary>
            <param name="rowsCount">The rows count.</param>
            <param name="columnsCount">The columns count.</param>
        </member>
        <member name="P:cAlgo.API.Grid.Rows">
            <summary>
            Gets the read only list of the grid rows.
            </summary>
        </member>
        <member name="P:cAlgo.API.Grid.Columns">
            <summary>
            Gets the read only list of the grid columns.
            </summary>
        </member>
        <member name="P:cAlgo.API.Grid.ShowGridLines">
            <summary>
            Defines if the grid lines are visible.
            </summary>
        </member>
        <member name="M:cAlgo.API.Grid.AddChild(cAlgo.API.ControlBase,System.Int32,System.Int32)">
            <summary>
            Adds the child.
            </summary>
            <param name="child">The child.</param>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:cAlgo.API.Grid.AddChild(cAlgo.API.ControlBase,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the child.
            </summary>
            <param name="child">The child.</param>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <param name="rowSpan">The row span.</param>
            <param name="columnSpan">The column span.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>
        </member>
        <member name="M:cAlgo.API.Grid.AddRow">
            <summary>
            Adds the row.
            </summary>
            <returns>GridRow.</returns>
        </member>
        <member name="M:cAlgo.API.Grid.AddColumn">
            <summary>
            Adds the column.
            </summary>
            <returns>GridColumn.</returns>
        </member>
        <member name="M:cAlgo.API.Grid.AddRows(System.Int32)">
            <summary>
            Adds the rows.
            </summary>
            <param name="count">The count.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:cAlgo.API.Grid.AddColumns(System.Int32)">
            <summary>
            Adds the columns.
            </summary>
            <param name="count">The count.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:cAlgo.API.Grid.RemoveRowAt(System.Int32)">
            <summary>
            Removes the row.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:cAlgo.API.Grid.RemoveColumnAt(System.Int32)">
            <summary>
            Removes the column.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:cAlgo.API.Grid.CreateGridRow">
            <summary>
            Creates the grid row.
            </summary>
            <returns>SmallGridRow.</returns>
        </member>
        <member name="P:cAlgo.API.GridColumn.Index">
            <summary>
            Gets the grid column index.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridColumn.Width">
            <summary>
            Gets the grid column width.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridColumn.MinWidth">
            <summary>
            Defines the grid column minimum width.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridColumn.MaxWidth">
            <summary>
            Defines the grid column maximum width.
            </summary>
        </member>
        <member name="M:cAlgo.API.GridColumn.SetWidthInPixels(System.Double)">
            <summary>
            Sets the grid column width in pixels.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:cAlgo.API.GridColumn.SetWidthInStars(System.Double)">
            <summary>
            Sets the grid column width in stars.
            </summary>
            <param name="stars">The stars.</param>
        </member>
        <member name="M:cAlgo.API.GridColumn.SetWidthToAuto">
            <summary>
            Sets the grid column width to automatic.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridLength.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridLength.UnitType">
            <summary>
            Gets or sets the type of the unit.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridRow.Index">
            <summary>
            Gets the grid row index.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridRow.Height">
            <summary>
            Gets the height of the grid row.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridRow.MinHeight">
            <summary>
            Gets or sets the minimum height of the grid row.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridRow.MaxHeight">
            <summary>
            Gets or sets the maximum height of the grid row.
            </summary>
        </member>
        <member name="M:cAlgo.API.GridRow.SetHeightInPixels(System.Double)">
            <summary>
            Sets the height of the grid row in pixels.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:cAlgo.API.GridRow.SetHeightInStars(System.Double)">
            <summary>
            Sets the height of the grid row in stars.
            </summary>
            <param name="stars">The stars.</param>
        </member>
        <member name="M:cAlgo.API.GridRow.SetHeightToAuto">
            <summary>
            Sets the height of the grid row to automatic.
            </summary>
        </member>
        <member name="F:cAlgo.API.GridUnitType.Auto">
            <summary>
            The automatic definition of units for the grid.
            </summary>
        </member>
        <member name="F:cAlgo.API.GridUnitType.Pixel">
            <summary>
            Calculate grid size in pixels.
            </summary>
        </member>
        <member name="F:cAlgo.API.GridUnitType.Star">
            <summary>
            Calculate grid size in stars.
            </summary>
        </member>
        <member name="M:cAlgo.API.Panel.#ctor(cAlgo.API.ControlType)">
            <summary>
            Initializes a new instance of the Panel.
            </summary>
            <param name="controlType">Type of the control.</param>
        </member>
        <member name="P:cAlgo.API.Panel.BackgroundColor">
            <summary>
            Gets or sets the color of the panel background.
            </summary>
        </member>
        <member name="P:cAlgo.API.Panel.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="M:cAlgo.API.Panel.AddChild(cAlgo.API.ControlBase)">
            <summary>
            Adds the child.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="M:cAlgo.API.Panel.RemoveChild(cAlgo.API.ControlBase)">
            <summary>
            Removes the child.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="M:cAlgo.API.StackPanel.#ctor">
            <summary>
            Initializes a new instance of the StackPanel class.
            </summary>
        </member>
        <member name="P:cAlgo.API.StackPanel.Orientation">
            <summary>
            Gets or sets the StackPanel orientation.TBD
            </summary>
        </member>
        <member name="M:cAlgo.API.WrapPanel.#ctor">
            <summary>
            Initializes a new instance of the WrapPanel class.
            </summary>
        </member>
        <member name="P:cAlgo.API.WrapPanel.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
        </member>
        <member name="P:cAlgo.API.WrapPanel.ItemWidth">
            <summary>
            Gets or sets the width of the item.
            </summary>
        </member>
        <member name="P:cAlgo.API.WrapPanel.ItemHeight">
            <summary>
            Gets or sets the height of the item.
            </summary>
        </member>
        <member name="F:cAlgo.API.ScrollBarVisibility.Disabled">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.ScrollBarVisibility.Auto">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.ScrollBarVisibility.Hidden">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.ScrollBarVisibility.Visible">
            <summary>
            </summary>
        </member>
        <member name="M:cAlgo.API.Style.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:cAlgo.API.Style.#ctor(cAlgo.API.Style)">
            <summary>
            </summary>
            <param name="parentStyle"></param>
        </member>
        <member name="M:cAlgo.API.Style.Set(cAlgo.API.StyleProperty,System.Object,cAlgo.API.ControlState)">
            <summary>
            </summary>
            <param name="state"></param>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:cAlgo.API.Style.Set(cAlgo.API.StyleProperty,System.Object)">
            <summary>
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:cAlgo.API.Style.Get(cAlgo.API.StyleProperty)">
            <summary>
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Style.Get(cAlgo.API.StyleProperty,cAlgo.API.ControlState)">
            <summary>
            </summary>
            <param name="state"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="F:cAlgo.API.StyleProperty.BackgroundColor">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.StyleProperty.ForegroundColor">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.StyleProperty.Opacity">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.StyleProperty.MinWidth">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.StyleProperty.MaxWidth">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.StyleProperty.MinHeight">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.StyleProperty.MaxHeight">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.StyleProperty.Width">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.StyleProperty.Height">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.StyleProperty.Padding">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.StyleProperty.BorderThickness">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.StyleProperty.CornerRadius">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.StyleProperty.HorizontalContentAlignment">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.StyleProperty.VerticalContentAlignment">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.StyleProperty.TextAlignment">
            <summary>
            </summary>
        </member>
        <member name="T:cAlgo.API.TextAlignment">
            <summary>
            The text alignment regarding the anchor point.
            </summary>
        </member>
        <member name="F:cAlgo.API.TextAlignment.Left">
            <summary>
            Align the text left.
            </summary>
        </member>
        <member name="F:cAlgo.API.TextAlignment.Right">
            <summary>
            Align the text right.
            </summary>
        </member>
        <member name="F:cAlgo.API.TextAlignment.Center">
            <summary>
            Center the text vertically.
            </summary>
        </member>
        <member name="F:cAlgo.API.TextAlignment.Justify">
            <summary>
            Justify the text.
            </summary>
        </member>
        <member name="P:cAlgo.API.Thickness.Top">
            <summary>
            </summary>
        </member>
        <member name="P:cAlgo.API.Thickness.Left">
            <summary>
            </summary>
        </member>
        <member name="P:cAlgo.API.Thickness.Bottom">
            <summary>
            </summary>
        </member>
        <member name="P:cAlgo.API.Thickness.Right">
            <summary>
            </summary>
        </member>
        <member name="M:cAlgo.API.Thickness.op_Implicit(System.Double)~cAlgo.API.Thickness">
            <summary>
            </summary>
            <param name="uniform"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Thickness.op_Implicit(System.String)~cAlgo.API.Thickness">
            <summary>
            </summary>
            <param name="thickness"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Thickness.Set(System.Double)">
            <summary>
            </summary>
            <param name="uniformLength"></param>
        </member>
        <member name="M:cAlgo.API.Thickness.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="T:cAlgo.API.ChartDisplaySettings">
            <summary>
            Represents the chart display settings.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.Positions">
            <summary>
            Gets or sets the positions.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.Orders">
            <summary>
            Gets or sets the orders.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.BidPriceLine">
            <summary>
            Gets or sets the bid price line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.AskPriceLine">
            <summary>
            Gets or sets the ask price line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.Grid">
            <summary>
            Gets or sets the grid.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.PeriodSeparators">
            <summary>
            Gets or sets the period separators.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.TickVolume">
            <summary>
            Gets or sets the tick volume.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.DealMap">
            <summary>
            Gets or sets a value indicating the deal map.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.ChartScale">
            <summary>
            Gets or sets the chart scale.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.PriceAxisOverlayButtons">
            <summary>
            Gets or sets the price axis overlay buttons.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.PriceAlerts">
            <summary>
            Gets or sets the price alerts.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.MarketSentiment">
            <summary>
            Gets or sets the market sentiment index.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.Targets">
            <summary>
            Gets or sets the targets.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartAndrewsPitchfork">
            <summary>
            Represents the Andrew's Pitchfork chart object. A tool that helps to identify possible support and resistance levels with the three parallel lines.
            </summary>
            <seealso cref="T:cAlgo.API.ChartObject" />
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Time1">
            <summary>
            Gets or sets the time value for the Andrew's Pitchfork point 1.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Time2">
            <summary>
            Gets or sets the time value for the Andrew's Pitchfork point 2.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Time3">
            <summary>
            Gets or sets the time value for the Andrew's Pitchfork point 3.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Y1">
            <summary>
            Gets or sets the Y-axis value for the Andrew's Pitchfork point 1.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Y2">
            <summary>
            Gets or sets the Y-axis value for the Andrew's Pitchfork point 2.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Y3">
            <summary>
            Gets or sets the Y-axis value for the Andrew's Pitchfork point 3.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Thickness">
            <summary>
            Gets or sets the chart object lines thickness.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Color">
            <summary>
            Gets or sets the chart object lines color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.LineStyle">
            <summary>
            Gets or sets the chart object lines style.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartEllipse">
            <summary>
            Represent the Ellipse chart object.
            </summary>
            <seealso cref="T:cAlgo.API.ChartShape" />
        </member>
        <member name="P:cAlgo.API.ChartEllipse.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEllipse.Time2">
             <summary>
            Gets or sets the value 2 on the Time line.
             </summary>
        </member>
        <member name="P:cAlgo.API.ChartEllipse.Y1">
            <summary>
            Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEllipse.Y2">
            <summary>
            Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartEquidistantChannel">
            <summary>
            Represents the Equidistant Channel chart object. The tool that allows drawing two precisely parallel lines in any direction on the chart.
            </summary>
            <seealso cref="T:cAlgo.API.ChartObject" />
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.Time2">
            <summary>
            Gets or sets the value 2 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.Y1">
            <summary>
            Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.Y2">
            <summary>
            Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.ChannelHeight">
            <summary>
            Gets or sets the height of the Equidistant Channel.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.Thickness">
            <summary>
            Gets or sets the Equidistant Channel line thickness.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.LineStyle">
            <summary>
            Gets or sets the Equidistant channel line style.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.Color">
            <summary>
            Gets or sets the Equidistant Channel line color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.ShowAngle">
            <summary>
            Gets or sets the Equidistant Channel angle.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.ExtendToInfinity">
            <summary>
            Defines if the Equidistant channel extends to infinity.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartFibonacciBase">
            <summary>
            Represents the Fibonacci tools options.
            </summary>
            <seealso cref="T:cAlgo.API.ChartObject" />
        </member>
        <member name="P:cAlgo.API.ChartFibonacciBase.FibonacciLevels">
            <summary>
            Gets the Fibonacci levels.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciBase.DisplayPrices">
            <summary>
            Defines if the Fibonacci levels display the prices
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciBase.Thickness">
            <summary>
            Gets or sets the lines thickness.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciBase.Color">
            <summary>
            Gets or sets the lines color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciBase.LineStyle">
            <summary>
            Gets or sets the lines style.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartFibonacciExpansion">
            <summary>
            Represents the Fibonacci Expansion chart object.
            </summary>
            <seealso cref="T:cAlgo.API.ChartFibonacciBase" />
        </member>
        <member name="P:cAlgo.API.ChartFibonacciExpansion.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciExpansion.Time2">
            <summary>
            Gets or sets the value 2 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciExpansion.Time3">
            <summary>
            Gets or sets the value 3 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciExpansion.Y1">
            <summary>
            Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciExpansion.Y2">
            <summary>
            Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciExpansion.Y3">
            <summary>
            Gets or sets the value 3 on the Y-axis.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartFibonacciFan">
            <summary>
            Represents the Fibonacci Fan chart object.
            </summary>
            <seealso cref="T:cAlgo.API.ChartFibonacciBase" />
        </member>
        <member name="P:cAlgo.API.ChartFibonacciFan.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciFan.Time2">
            <summary>
            Gets or sets the value 2 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciFan.Y1">
            <summary>
             Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciFan.Y2">
            <summary>
             Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartFibonacciRetracement">
            <summary>
            Represents the Fibonacci Retracement chart object.
            </summary>
            <seealso cref="T:cAlgo.API.ChartFibonacciBase" />
        </member>
        <member name="P:cAlgo.API.ChartFibonacciRetracement.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciRetracement.Time2">
            <summary>
            Gets or sets the value 2 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciRetracement.Y1">
            <summary>
             Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciRetracement.Y2">
            <summary>
             Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartHorizontalLine">
            <summary>
            Represents the Horizontal Line chart object. Used to mark a certain value on the Y-axis throughout the whole chart.
            </summary>
            <seealso cref="T:cAlgo.API.ChartObject" />
        </member>
        <member name="P:cAlgo.API.ChartHorizontalLine.Y">
            <summary>
            Gets or sets the Y-axis value of the line location.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartHorizontalLine.Thickness">
            <summary>
            Gets or sets the line thickness.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartHorizontalLine.Color">
            <summary>
            Gets or sets the line color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartHorizontalLine.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartIcon">
            <summary>
            Represents the Icon chart object.
            </summary>
            <seealso cref="T:cAlgo.API.ChartObject" />
        </member>
        <member name="P:cAlgo.API.ChartIcon.IconType">
            <summary>
            Gets or sets the type of the icon.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartIcon.Time">
            <summary>
            Gets or sets the Time value of the icon location.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartIcon.Y">
            <summary>
            Gets or sets the Y-axis value of the icon location.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartIcon.Color">
            <summary>
            Gets or sets the color of the icon.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartIconType">
            <summary>
            Represents the type of the Icon.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartIconType.UpArrow">
            <summary>
            The Up Arrow.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartIconType.DownArrow">
            <summary>
            The Down Arrow.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartIconType.Circle">
            <summary>
            The Circle.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartIconType.Square">
            <summary>
            The Square.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartIconType.Diamond">
            <summary>
            The Diamond.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartIconType.Star">
            <summary>
            The Star.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartIconType.UpTriangle">
            <summary>
            The Up Triangle.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartIconType.DownTriangle">
            <summary>
            The Down Triangle.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartRectangle">
            <summary>
            Represents the Rectangle chart object. A rectangle of any preferable size and rotation that can be drawn directly in the chart, bound to X-Y axises.
            </summary>
            <seealso cref="T:cAlgo.API.ChartShape" />
        </member>
        <member name="P:cAlgo.API.ChartRectangle.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartRectangle.Time2">
            <summary>
            Gets or sets the value 2 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartRectangle.Y1">
            <summary>
            Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartRectangle.Y2">
            <summary>
            Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartShape">
            <summary>
            Represents the Shape chart object. Allows drawing a Rectangle, a Triangle, and an Ellipse on the chart.
            </summary>
            <seealso cref="T:cAlgo.API.ChartObject" />
        </member>
        <member name="P:cAlgo.API.ChartShape.Thickness">
            <summary>
            Gets or sets the line thickness.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartShape.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartShape.Color">
            <summary>
            Gets or sets the line color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartShape.IsFilled">
            <summary>
            Defines if the shape is filled.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartStaticText">
            <summary>
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartStaticText.Color">
            <summary>
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartStaticText.Text">
            <summary>
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartStaticText.VerticalAlignment">
            <summary>
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartStaticText.HorizontalAlignment">
            <summary>
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartText">
            <summary>
            Represents the Text chart object. Allows place the text anywhere on the chart, bound to the chart.
            </summary>
            <seealso cref="T:cAlgo.API.ChartObject" />
        </member>
        <member name="P:cAlgo.API.ChartText.Time">
            <summary>
            Gets or sets the Time line value.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartText.Y">
            <summary>
            Gets or sets the Y-axis value.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartText.Color">
            <summary>
            Gets or sets the text color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartText.Text">
            <summary>
            Gets or sets the text content.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartText.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text regarding the anchor point.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartText.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text regarding the anchor point.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartTrendLine">
            <summary>
            Represents the Trend Line chart object. A straight line that can be drawn from point 1 to the point 2 in any direction to mark the trends on the chart. 
            </summary>
            <seealso cref="T:cAlgo.API.ChartObject" />
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.Time2">
            <summary>
            Gets or sets the value 2 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.Y1">
            <summary>
            Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.Y2">
            <summary>
            Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.Color">
            <summary>
            Gets or sets the color of the Trend Line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.Thickness">
            <summary>
            Gets or sets the thickness of the Trend Line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.LineStyle">
            <summary>
            Gets or sets the Trend Line style.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.ShowAngle">
            <summary>
            Defines the trend line angle.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.ExtendToInfinity">
            <summary>
            Defines if the Trend Line extends to infinity.
            </summary>
        </member>
        <member name="M:cAlgo.API.ChartTrendLine.CalculateY(System.Int32)">
            <summary>
            Calculates Y-axis value corresponding the specified bar index.
            </summary>
            <param name="barIndex">Index of the bar.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:cAlgo.API.ChartTrendLine.CalculateY(System.DateTime)">
            <summary>
            Calculates Y-axis value corresponding the specified time value.
            </summary>
            <param name="time">The time.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:cAlgo.API.ChartTriangle">
            <summary>
            Represents the Triangle chart object.
            </summary>
            <seealso cref="T:cAlgo.API.ChartShape" />
        </member>
        <member name="P:cAlgo.API.ChartTriangle.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTriangle.Time2">
            <summary>
            Gets or sets the value 2 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTriangle.Time3">
            <summary>
            Gets or sets the value 3 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTriangle.Y1">
            <summary>
            Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTriangle.Y2">
            <summary>
            Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTriangle.Y3">
            <summary>
            Gets or sets the value 3 on the Y-axis.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartVerticalLine">
            <summary>
            Represents the Vertical Line chart object. The line parallel to the Y-axis that can be set on a certain time value on the X-axis.
            </summary>
            <seealso cref="T:cAlgo.API.ChartObject" />
        </member>
        <member name="P:cAlgo.API.ChartVerticalLine.Time">
            <summary>
            Gets or sets the value on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartVerticalLine.Color">
            <summary>
            Gets or sets the line color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartVerticalLine.Thickness">
            <summary>
            Gets or sets the line thickness.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartVerticalLine.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
        </member>
        <member name="T:cAlgo.API.FibonacciLevel">
            <summary>
            Represents the Fibonacci Level.
            </summary>
        </member>
        <member name="P:cAlgo.API.FibonacciLevel.PercentLevel">
            <summary>
            Gets or sets the percent level.
            </summary>
        </member>
        <member name="P:cAlgo.API.FibonacciLevel.IsVisible">
            <summary>
            Defines if the level is visible.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartArea">
            <summary>
            The Chart Area Interface.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartArea.IsAlive">
            <summary>
            Checks whether the instance is still on the chart.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.MouseEnter">
            <summary>
            Occurs when the cursor hover over the chart area.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.MouseLeave">
            <summary>
            Occurs when the cursor leaves the chart area
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.MouseMove">
            <summary>
            Occurs when the cursor moves over the chart area.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.MouseDown">
            <summary>
            Occurs when the left mouse button is pressed down.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.MouseUp">
            <summary>
            Occurs when the left mouse button is released. 
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.MouseWheel">
            <summary>
            Occurs when the mouse wheel button is rotated.
            </summary>
            <remarks></remarks>
        </member>
        <member name="E:cAlgo.API.ChartArea.DragStart">
            <summary>
            Occurs when MouseDown event is happening on a chart area and a mouse is captured for dragging. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="E:cAlgo.API.ChartArea.DragEnd">
            <summary>
            Occurs when mouse button is released while dragging a chart area or a chart area loses mouse capture. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="E:cAlgo.API.ChartArea.Drag">
            <summary>
            Occurs when dragging a chart area. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.ChartArea.Width">
            <summary>
            Gets the width of the chart area.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartArea.Height">
            <summary>
            Gets the hight of the chart area.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartArea.BottomY">
            <summary>
            Gets the lowest visible Y-axis value.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartArea.TopY">
            <summary>
            Gets the highest visible Y-axis value.
            </summary>
        </member>
        <member name="M:cAlgo.API.ChartArea.SetYRange(System.Double,System.Double)">
            <summary>
            Sets the Y-axis lowest and highest values range. Allows scrolling the chart by the Y-axis. If only one of the values is set, then the chart will be expanded regarding the lowest or highest value respectively.
            </summary>
            <param name="topY">The highest visible Y-axis value.</param>
            <param name="bottomY">The lowest visible Y-axis value.</param>
        </member>
        <member name="E:cAlgo.API.ChartArea.SizeChanged">
            <summary>
            Occurs when the chart area size has changed.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ScrollChanged">
            <summary>
            Occurs when the X-axis position value or the Y-axis position value changes while scrolling.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartArea.Objects">
            <summary>
            Gets the chart objects collection.
            </summary>
        </member>
        <member name="M:cAlgo.API.ChartArea.FindAllObjects``1">
            <summary>
            Finds all the chart objects of the specified type. 
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T[].</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.FindAllObjects(cAlgo.API.ChartObjectType)">
            <summary>
            Finds all the chart objects of the specified type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>ChartObject[].</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.FindObject(System.String)">
            <summary>
            Finds the chart object of the specified name.
            </summary>
            <param name="objectName">The name of the object.</param>
            <returns>
            ChartObject.
            </returns>
            <example>
              <code>
             // Draw a horizontal line.
             Chart.DrawHorizontalLine("hLine", Symbol.Ask, Color.Red);
             
             // Find the line that was drawn.
             var obj = Chart.FindObject("hLine");
             Print("Found object with name {0}", obj.Name);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.ChartArea.RemoveObject(System.String)">
            <summary>
            Removes the chart object of the specified name.
            </summary>
            <param name="objectName">The name of the object.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.RemoveAllObjects">
            <summary>
            Removes all interactive and non-interactive objects available for the cBot or Indicator.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ObjectAdded">
            <summary>
            Occurs when a chart object is added to the chart area.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ObjectUpdated">
            <summary>Occurs when a chart object is updated - one or several properties of the chart object have changed.</summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ObjectRemoved">
            <summary>
            Occurs when a chart object is removed from the chart area.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ObjectSelectionChanged">
            <summary>
            Occurs when a chart object is selected or deselected.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ObjectHoverChanged">
            <summary>
            Occurs when the cursor hovers over or leaves the object.
            </summary>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawHorizontalLine(System.String,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a horizontal line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once on a chart area. If duplicated, the chart object will be replaced with a new one of the
            same name.</param>
            <param name="y">The Y-axis value of the line location.</param>
            <param name="color">The line color.</param>
            <returns>ChartHorizontalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawHorizontalLine(System.String,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a horizontal line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="y">The Y-axis value of the line location.</param>
            <param name="color">The line color.</param>
            <param name="thickness">The line thickness.</param>
            <returns>ChartHorizontalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawHorizontalLine(System.String,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a horizontal line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="y">The Y-axis value of the line location.</param>
            <param name="color">The line color.</param>
            <param name="thickness">The line thickness.</param>
            <param name="lineStyle">The line style.</param>
            <returns>ChartHorizontalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.DateTime,cAlgo.API.Color)">
            <summary>
            Draws a vertical line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time">The time value on the X-axis.</param>
            <param name="color">The line color.</param>
            <returns>ChartVerticalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.DateTime,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a vertical line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time">The time value of the line location on the X-axis.</param>
            <param name="color">The line color.</param>
            <param name="thickness">The line thickness.</param>
            <returns>ChartVerticalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.DateTime,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a vertical line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time">The time value of the line location on the X-axis.</param>
            <param name="color">The line color.</param>
            <param name="thickness">The line thickness.</param>
            <param name="lineStyle">The line style.</param>
            <returns>ChartVerticalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.Int32,cAlgo.API.Color)">
            <summary>
            Draws a vertical line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex">The bar index of the line location on the X-axis.</param>
            <param name="color">The line color.</param>
            <returns>ChartVerticalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.Int32,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a vertical line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex">The bar index of the line location on the X-axis.</param>
            <param name="color">The line color.</param>
            <param name="thickness">The line thickness.</param>
            <returns>ChartVerticalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.Int32,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a vertical line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex">The bar index of the line location on the X-axis.</param>
            <param name="color">The line color.</param>
            <param name="thickness">The line thickness.</param>
            <param name="lineStyle">The line style.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a trend line. 
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the trend line start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the trend line start location.</param>
            <param name="time2">The time value of the trend line end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the trend line end location.</param>
            <param name="color">The color of the trend line.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a trend line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the trend line start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the trend line start location.</param>
            <param name="time2">The time value of the trend line end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the trend line end location.</param>
            <param name="color">The color of the trend line.</param>
            <param name="thickness">The thickness of the trend line.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a trend line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the trend line start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the trend line start location.</param>
            <param name="time2">The time value of the trend line end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the trend line end location.</param>
            <param name="color">The color of the trend line.</param>
            <param name="thickness">The thickness of the trend line.</param>
            <param name="lineStyle">The trend line style.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a trend line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the trend line start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the trend line start location.</param>
            <param name="barIndex2">The bar index of the trend line end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the trend line end location.</param>
            <param name="color">The color of the trend line.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a trend line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the trend line start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the trend line start location.</param>
            <param name="barIndex2">The bar index of the trend line end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the trend line end location.</param>
            <param name="color">The color of the trend line.</param>
            <param name="thickness">The thickness of the trend line.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a trend line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the trend line start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the trend line start location.</param>
            <param name="barIndex2">The bar index of the trend line end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the trend line end location.</param>
            <param name="color">The color of the trend line.</param>
            <param name="thickness">The thickness of the trend line.</param>
            <param name="lineStyle">The trend line style.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an equidistant channel.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the equidistant channel start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the equidistant channel start location.</param>
            <param name="time2">The time value of the equidistant channel end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the equidistant channel end location.</param>
            <param name="channelHeight">The equidistant channel hight in pips.</param>
            <param name="color">The color of the equidistant channel lines.</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws an equidistant channel.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the equidistant channel start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the equidistant channel start location.</param>
            <param name="time2">The time value of the equidistant channel end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the equidistant channel end location.</param>
            <param name="channelHeight">The equidistant channel hight in pips.</param>
            <param name="color">The color of the equidistant channel lines.</param>
            <param name="thickness">The thickness of the equidistant channel lines.</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws an equidistant channel.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the equidistant channel start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the equidistant channel start location.</param>
            <param name="time2">The time value of the equidistant channel end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the equidistant channel end location.</param>
            <param name="channelHeight">The equidistant channel hight in pips.</param>
            <param name="color">The color of the equidistant channel lines.</param>
            <param name="thickness">The thickness of the equidistant channel lines.</param>
            <param name="lineStyle">The equidistant channel lines style.</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an equidistant channel.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the equidistant channel start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the equidistant channel start location.</param>
            <param name="barIndex2">The bar index of the equidistant channel end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the equidistant channel end location.</param>
            <param name="channelHeight">The equidistant channel hight in pips.</param>
            <param name="color">The color of the equidistant channel lines.</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws an equidistant channel.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the equidistant channel start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the equidistant channel start location.</param>
            <param name="barIndex2">The bar index of the equidistant channel end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the equidistant channel end location.</param>
            <param name="channelHeight">The equidistant channel hight in pips.</param>
            <param name="color">The color of the equidistant channel lines.</param>
            <param name="thickness">The thickness of the equidistant channel lines.</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws an equidistant channel.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the equidistant channel start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the equidistant channel start location.</param>
            <param name="barIndex2">The bar index of the equidistant channel end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the equidistant channel end location.</param>
            <param name="channelHeight">The equidistant channel hight in pips.</param>
            <param name="color">The color of the equidistant channel lines.</param>
            <param name="thickness">The thickness of the equidistant channel lines.</param>
            <param name="lineStyle">The equidistant channel lines style.</param>
            <returns>ChartEquidistantChannel.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawText(System.String,System.String,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws the text.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used
            once for a chart area. If duplicated, the chart object will be replaced with a
            new one of the same name.</param>
            <param name="text">The text content.</param>
            <param name="time">The time value of the text object location on the
            X-axis.</param>
            <param name="y">The Y-axis value of the text object location.</param>
            <param name="color">The color of the text.</param>
            <returns>
            ChartText.
            </returns>
            <example>
              <code>
            // Draw the text on the last bar high.
            var highPrice = MarketSeries.High.LastValue;
            var openTime = MarketSeries.OpenTime.LastValue;
            var text = Chart.DrawText("text1", "High is here", openTime, highPrice, Color.Red);
            text.VerticalAlignment = VerticalAlignment.Bottom;
            text.HorizontalAlignment = HorizontalAlignment.Center;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawText(System.String,System.String,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws the text.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="text">The text content.</param>
            <param name="barIndex">The bar index of the text object location on the X-axis.</param>
            <param name="y">The Y-axis value of the text object location.</param>
            <param name="color">The color of the text.</param>
            <returns>ChartText.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawStaticText(System.String,System.String,cAlgo.API.VerticalAlignment,cAlgo.API.HorizontalAlignment,cAlgo.API.Color)">
            <summary> 
            Draws the static text.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="text">The text content.</param>
            <param name="verticalAlignment">The vertical alignment.</param>
            <param name="horizontalAlignment">The horizontal alignment.</param>
            <param name="color">The color of the text.</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawIcon(System.String,cAlgo.API.ChartIconType,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an icon.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="iconType">The type of the icon.</param>
            <param name="time">The time value of the icon location on the X-axis.</param>
            <param name="y">The Y-axis value of the icon location.</param>
            <param name="color">The color of the icon.</param>
            <returns>ChartIcon.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawIcon(System.String,cAlgo.API.ChartIconType,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an icon.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used
            once for a chart area. If duplicated, the chart object will be replaced with a
            new one of the same name.</param>
            <param name="iconType">Type of the icon.</param>
            <param name="barIndex">The bar index of the icon location on the X-axis.</param>
            <param name="y">The Y-axis value of the icon location.</param>
            <param name="color">The color of the icon.</param>
            <returns>
            ChartIcon.
            </returns>
            <example>
              <code><![CDATA[
            // Draw an icon on the last bar high.
             
            ]]></code>
            </example>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a Fibonacci retracement.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci retracement start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
            <param name="time2">The time value of the Fibonacci retracement end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
            <param name="color">The Fibonacci retracement lines color.</param>
            <returns>ChartFibonacciRetracement.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a Fibonacci retracement.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci retracement start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
            <param name="time2">The time value of the Fibonacci retracement end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
            <param name="color">The Fibonacci retracement lines color.</param>
            <param name="thickness">The Fibonacci retracement lines thickness.</param>
            <returns>ChartFibonacciRetracement.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a Fibonacci retracement.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci retracement start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
            <param name="time2">The time value of the Fibonacci retracement end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
            <param name="color">The Fibonacci retracement lines color.</param>
            <param name="thickness">The Fibonacci retracement lines thickness.</param>
            <param name="lineStyle">The Fibonacci retracement lines style.</param>
            <returns>ChartFibonacciRetracement.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a Fibonacci retracement.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci retracement start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
            <param name="barIndex2">The bar index of the Fibonacci retracement end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
            <param name="color">The Fibonacci retracement lines color.</param>
            <returns>ChartFibonacciRetracement.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a Fibonacci retracement.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci retracement start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
            <param name="barIndex2">The bar index of the Fibonacci retracement end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
            <param name="color">The Fibonacci retracement lines color.</param>
            <param name="thickness">The Fibonacci retracement lines thickness.</param>
            <returns>ChartFibonacciRetracement.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a Fibonacci retracement.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci retracement start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
            <param name="barIndex2">The bar index of the Fibonacci retracement end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
            <param name="color">The Fibonacci retracement lines color.</param>
            <param name="thickness">The Fibonacci retracement lines thickness.</param>
            <param name="lineStyle">The Fibonacci retracement lines style.</param>
            <returns>ChartFibonacciRetracement.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a Fibonacci expansion.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci expansion start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
            <param name="time2">The time value of the Fibonacci expansion central point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
            <param name="time3">The time value of the Fibonacci expansion end point location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
            <param name="color">The Fibonacci expansion lines color.</param>
            <returns>ChartFibonacciExpansion.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a Fibonacci expansion.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci expansion start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
            <param name="time2">The time value of the Fibonacci expansion central point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
            <param name="time3">The time value of the Fibonacci expansion end point location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
            <param name="color">The Fibonacci expansion lines color.</param>
            <param name="thickness">The Fibonacci expansion lines thickness.</param>
            <returns>ChartFibonacciExpansion.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a Fibonacci expansion.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci expansion start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
            <param name="time2">The time value of the Fibonacci expansion central point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
            <param name="time3">The time value of the Fibonacci expansion end point location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
            <param name="color">The Fibonacci expansion lines color.</param>
            <param name="thickness">The Fibonacci expansion lines thickness.</param>
            <param name="lineStyle">The Fibonacci expansion lines style.</param>
            <returns>ChartFibonacciExpansion.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a Fibonacci expansion.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci expansion start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
            <param name="barIndex2">The bar index of the Fibonacci expansion central point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
            <param name="barIndex3">The bar index of the Fibonacci expansion end point location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
            <param name="color">The Fibonacci expansion lines color.</param>
            <returns>ChartFibonacciExpansion.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a Fibonacci expansion.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci expansion start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
            <param name="barIndex2">The bar index of the Fibonacci expansion central point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
            <param name="barIndex3">The bar index of the Fibonacci expansion end point location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
            <param name="color">The Fibonacci expansion lines color.</param>
            <param name="thickness">The Fibonacci expansion lines thickness.</param>
            <returns>ChartFibonacciExpansion.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a Fibonacci expansion.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci expansion start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
            <param name="barIndex2">The bar index of the Fibonacci expansion central point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
            <param name="barIndex3">The bar index of the Fibonacci expansion end point location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
            <param name="color">The Fibonacci expansion lines color.</param>
            <param name="thickness">The Fibonacci expansion lines thickness.</param>
            <param name="lineStyle">The Fibonacci expansion lines style.</param>
            <returns>ChartFibonacciExpansion.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a Fibonacci fan.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci fan start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
            <param name="time2">The time value of the Fibonacci fan end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="color">The Fibonacci fan lines color.</param>
            <returns>ChartFibonacciFan.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a Fibonacci fan.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci fan start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
            <param name="time2">The time value of the Fibonacci fan end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="color">The Fibonacci fan lines color.</param>
            <param name="thickness">The Fibonacci fan lines thickness.</param>
            <returns>ChartFibonacciFan.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a Fibonacci fan.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci fan start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
            <param name="time2">The time value of the Fibonacci fan end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="color">The Fibonacci fan lines color.</param>
            <param name="thickness">The Fibonacci fan lines thickness.</param>
            <param name="lineStyle">The Fibonacci fan lines style.</param>
            <returns>ChartFibonacciFan.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a Fibonacci fan.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci fan start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
            <param name="barIndex2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="color">The Fibonacci fan lines color.</param>
            <returns>ChartFibonacciFan.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a Fibonacci fan.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci fan start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
            <param name="barIndex2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="color">The Fibonacci fan lines color.</param>
            <param name="thickness">The Fibonacci fan lines thickness.</param>
            <returns>ChartFibonacciFan.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a Fibonacci fan.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci fan start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
            <param name="barIndex2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="color">The Fibonacci fan lines color.</param>
            <param name="thickness">The Fibonacci fan lines thickness.</param>
            <param name="lineStyle">The Fibonacci fan lines style.</param>
            <returns>ChartFibonacciFan.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an Andrew's pitchfork.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Andrew's pitchfork point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
            <param name="time2">The time value of the Andrew's pitchfork point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
            <param name="time3">The time value of the Andrew's pitchfork point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
            <param name="color">The Andrew's pitchfork lines color.</param>
            <returns>ChartAndrewsPitchfork.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws an Andrew's pitchfork.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Andrew's pitchfork point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
            <param name="time2">The time value of the Andrew's pitchfork point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
            <param name="time3">The time value of the Andrew's pitchfork point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
            <param name="color">The Andrew's pitchfork lines color.</param>
            <param name="thickness">The Andrew's pitchfork lines thickness.</param>
            <returns>ChartAndrewsPitchfork.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws an Andrew's pitchfork.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Andrew's pitchfork point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
            <param name="time2">The time value of the Andrew's pitchfork point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
            <param name="time3">The time value of the Andrew's pitchfork point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
            <param name="color">The Andrew's pitchfork lines color.</param>
            <param name="thickness">The Andrew's pitchfork lines thickness.</param>
            <param name="lineStyle">The Andrew's pitchfork lines style.</param>
            <returns>ChartAndrewsPitchfork.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an Andrew's pitchfork.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Andrew's pitchfork point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
            <param name="barIndex2">The bar index of the Andrew's pitchfork point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
            <param name="barIndex3">The bar index of the Andrew's pitchfork point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
            <param name="color">The Andrew's pitchfork lines color.</param>
            <returns>ChartAndrewsPitchfork.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws an Andrews pitchfork.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Andrew's pitchfork point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
            <param name="barIndex2">The bar index of the Andrew's pitchfork point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
            <param name="barIndex3">The bar index of the Andrew's pitchfork point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
            <param name="color">The Andrew's pitchfork lines color.</param>
            <param name="thickness">The Andrew's pitchfork lines thickness.</param>
            <returns>ChartAndrewsPitchfork.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws an Andrew's pitchfork.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Andrew's pitchfork point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
            <param name="barIndex2">The bar index of the Andrew's pitchfork point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
            <param name="barIndex3">The bar index of the Andrew's pitchfork point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
            <param name="color">The Andrew's pitchfork lines color.</param>
            <param name="thickness">The Andrew's pitchfork lines thickness.</param>
            <param name="lineStyle">The Andrew's pitchfork lines style.</param>
            <returns>ChartAndrewsPitchfork.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the rectangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
            <param name="time2">The time value of the rectangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
            <param name="color">The rectangle lines color.</param>
            <returns>ChartRectangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the rectangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
            <param name="time2">The time value of the rectangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
            <param name="color">The rectangle lines color.</param>
            <param name="thickness">The rectangle lines thickness.</param>
            <returns>ChartRectangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the rectangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
            <param name="time2">The time value of the rectangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
            <param name="color">The rectangle lines color.</param>
            <param name="thickness">The rectangle lines thickness.</param>
            <param name="lineStyle">The rectangle lines style.</param>
            <returns>ChartRectangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the rectangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
            <param name="barIndex2">The bar index of the rectangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
            <param name="color">The rectangle lines color.</param>
            <returns>ChartRectangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the rectangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
            <param name="barIndex2">The bar index of the rectangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
            <param name="color">The rectangle lines color.</param>
            <param name="thickness">The rectangle lines thickness.</param>
            <returns>ChartRectangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the rectangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
            <param name="barIndex2">The bar index of the rectangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
            <param name="color">The rectangle lines color.</param>
            <param name="thickness">The rectangle lines thickness.</param>
            <param name="lineStyle">The rectangle lines style.</param>
            <returns>ChartRectangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the ellipse point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
            <param name="time2">The time value of the ellipse point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
            <param name="color">The ellipse line color.</param>
            <returns>ChartEllipse.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the ellipse point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
            <param name="time2">The time value of the ellipse point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
            <param name="color">The ellipse line color.</param>
            <param name="thickness">The ellipse line thickness.</param>
            <returns>ChartEllipse.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the ellipse point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
            <param name="time2">The time value of the ellipse point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
            <param name="color">The ellipse line color.</param>
            <param name="thickness">The ellipse line thickness.</param>
            <param name="lineStyle">The ellipse line style.</param>
            <returns>ChartEllipse.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the ellipse point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
            <param name="barIndex2">The bar index of the ellipse point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
            <param name="color">The ellipse line color.</param>
            <returns>ChartEllipse.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the ellipse point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
            <param name="barIndex2">The bar index of the ellipse point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
            <param name="color">The ellipse line color.</param>
            <param name="thickness">The ellipse line thickness.</param>
            <returns>ChartEllipse.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the ellipse point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
            <param name="barIndex2">The bar index of the ellipse point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
            <param name="color">The ellipse line color.</param>
            <param name="thickness">The ellipse line thickness.</param>
            <param name="lineStyle">The ellipse line style.</param>
            <returns>ChartEllipse.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the triangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the triangle point 1 location.</param>
            <param name="time2">The time value of the triangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the triangle point 2 location.</param>
            <param name="time3">The time value of the triangle point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the triangle point 3 location.</param>
            <param name="color">The triangle line color.</param>
            <returns>ChartTriangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the triangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the triangle point 1 location.</param>
            <param name="time2">The time value of the triangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the triangle point 2 location.</param>
            <param name="time3">The time value of the triangle point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the triangle point 3 location.</param>
            <param name="color">The triangle line color.</param>
            <param name="thickness">The triangle line thickness.</param>
            <returns>ChartTriangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the triangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the triangle point 1 location.</param>
            <param name="time2">The time value of the triangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the triangle point 2 location.</param>
            <param name="time3">The time value of the triangle point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the triangle point 3 location.</param>
            <param name="color">The triangle line color.</param>
            <param name="thickness">The triangle line thickness.</param>
            <param name="lineStyle">The triangle line style.</param>
            <returns>ChartTriangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the triangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the triangle point 1 location.</param>
            <param name="barIndex2">The bar index of the triangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the triangle point 2 location.</param>
            <param name="barIndex3">The bar index of the triangle point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the triangle point 3 location.</param>
            <param name="color">The triangle line color.</param>
            <returns>ChartTriangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the triangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the triangle point 1 location.</param>
            <param name="barIndex2">The bar index of the triangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the triangle point 2 location.</param>
            <param name="barIndex3">The bar index of the triangle point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the triangle point 3 location.</param>
            <param name="color">The triangle line color.</param>
            <param name="thickness">The triangle line thickness.</param>
            <returns>ChartTriangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the triangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the triangle point 1 location.</param>
            <param name="barIndex2">The bar index of the triangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the triangle point 2 location.</param>
            <param name="barIndex3">The bar index of the triangle point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the triangle point 3 location.</param>
            <param name="color">The triangle line color.</param>
            <param name="thickness">The triangle line thickness.</param>
            <param name="lineStyle">The triangle line style.</param>
            <returns>ChartTriangle.</returns>
        </member>
        <member name="T:cAlgo.API.ChartType">
            <summary>
            Represents the predefined chart types.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartType.Bars">
            <summary>
            The Bar chart.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartType.Candlesticks">
            <summary>
            The Candlestick chart.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartType.Line">
            <summary>
            The Line chart.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartType.Dots">
            <summary>
            The Dots chart.
            </summary>
        </member>
        <member name="T:cAlgo.API.Color">
            <summary>
                Represents an ARGB (alpha, red, green, blue) color.
            </summary>
            <example>
                <code>
            var blueColor = Color.Blue;
            var greenColor = Color.FromArgb(0, 0, 255, 0);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Color.A">
            <summary>
                Gets the alpha component value of the color.
            </summary>
            <returns>The alpha component value of this color.</returns>
        </member>
        <member name="P:cAlgo.API.Color.R">
            <summary>
                Gets the red component value of the color.
            </summary>
            <returns>The red component value of this color.</returns>
        </member>
        <member name="P:cAlgo.API.Color.G">
            <summary>
                Gets the green component value of the color.
            </summary>
            <returns>The green component value of this color.</returns>
        </member>
        <member name="P:cAlgo.API.Color.B">
            <summary>
                Gets the blue component value of the color.
            </summary>
            <returns>The blue component value of this color.</returns>
        </member>
        <member name="M:cAlgo.API.Color.ToArgb">
            <summary>
                Get the 32-bit ARGB color value.
            </summary>
            <returns>The 32-bit ARGB color value.</returns>
        </member>
        <member name="M:cAlgo.API.Color.ToHexString">
            <summary>
                Get the hex string representation of the color.
            </summary>
            <returns>The hex string representation of the color.</returns>
        </member>
        <member name="M:cAlgo.API.Color.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            <inheritdoc />
        </member>
        <member name="M:cAlgo.API.Color.Equals(System.Object)">
            <summary>
            Defines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            <inheritdoc />
        </member>
        <member name="M:cAlgo.API.Color.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:cAlgo.API.Color.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a color from alpha, red, green and blue components.
            </summary>
            <param name="alpha">Alpha value from 0 to 255</param>
            <param name="red">Red value from 0 to 255</param>
            <param name="green">Green value from 0 to 255</param>
            <param name="blue">Blue value from 0 to 255</param>
            <example>
                <code>
            var greenColor = Color.FromArgb(255, 0, 255, 0);
            </code>
            </example>
            <returns>The Color for specified parameters.</returns>
        </member>
        <member name="M:cAlgo.API.Color.FromArgb(System.Int32,cAlgo.API.Color)">
            <summary>
                Creates a color from existing color, but with new specified alpha value.
            </summary>
            <param name="alpha">New alpha value from 0 to 255</param>
            <param name="baseColor">Base color from which red, green and blue values will be copied to a new color</param>
            <example>
                <code>
            var transparentBlue = Color.FromArgb(128, Color.Blue);
            </code>
            </example>
            <returns>The Color for specified parameters.</returns>
        </member>
        <member name="M:cAlgo.API.Color.FromArgb(System.Int32)">
            <summary>
                Creates a color from a 32-bit ARGB value.
            </summary>
            <returns>The Color for specified parameter.</returns>
        </member>
        <member name="M:cAlgo.API.Color.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a color from red, green and blue values. The alpha value is implicitly 255 (fully opaque).
            </summary>
            <param name="red">Red value from 0 to 255</param>
            <param name="green">Green value from 0 to 255</param>
            <param name="blue">Blue value from 0 to 255</param>
            <example>
                <code>
            var greenColor = Color.FromArgb(0, 255, 0);
            </code>
            </example>
            <returns>The Color for specified parameters.</returns>
        </member>
        <member name="M:cAlgo.API.Color.FromHex(System.String)">
            <summary>
                Attempts to convert a hex string to a Color.
            </summary>
            <param name="hex">Hex string to convert to a Color</param>
            <example>
                <code>
            var color = Color.FromHex("#808080");
            </code>
            </example>
            <returns>A Color that represents the converted hex string.</returns>
        </member>
        <member name="M:cAlgo.API.Color.FromName(System.String)">
            <summary>
                Creates a color from the specified name of a predefined color.
            </summary>
            <param name="name">Name of predefined color</param>
            <example>
                <code>
            var greenColor = Color.FromName("Green");
            </code>
            </example>
            <returns>A Color for specified name or color with value #00000000 if the name was not found.</returns>
        </member>
        <member name="M:cAlgo.API.Color.op_Equality(cAlgo.API.Color,cAlgo.API.Color)">
            <summary>
                Tests whether two specified <see cref='T:cAlgo.API.Color' /> objects are equivalent.
            </summary>
        </member>
        <member name="M:cAlgo.API.Color.op_Inequality(cAlgo.API.Color,cAlgo.API.Color)">
            <summary>
                Tests whether two specified <see cref='T:cAlgo.API.Color' /> objects are equivalent.
            </summary>
        </member>
        <member name="M:cAlgo.API.Color.op_Implicit(System.Int32)~cAlgo.API.Color">
            <summary>
                Creates a color from a 32-bit ARGB value.
            </summary>
            <returns>The Color for specified parameter.</returns>
        </member>
        <member name="M:cAlgo.API.Color.op_Implicit(System.String)~cAlgo.API.Color">
            <summary>
                Creates a color from the specified name or hex string.
            </summary>
            <returns>A Color for specified name or hex string.</returns>
        </member>
        <member name="F:cAlgo.API.Color.Empty">
            <summary>
                Represents empty color.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Transparent">
            <summary>
                Gets a system-defined color that has an ARGB value of #00FFFFFF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.AliceBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0F8FF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.AntiqueWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFAEBD7.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Aqua">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Aquamarine">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7FFFD4.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Azure">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0FFFF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Beige">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5F5DC.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Bisque">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFE4C4.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Black">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF000000.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.BlanchedAlmond">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFEBCD.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Blue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF0000FF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.BlueViolet">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8A2BE2.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Brown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFA52A2A.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.BurlyWood">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDEB887.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.CadetBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF5F9EA0.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Chartreuse">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7FFF00.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Chocolate">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD2691E.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Coral">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF7F50.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.CornflowerBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF6495ED.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Cornsilk">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFF8DC.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Crimson">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDC143C.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Cyan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00008B.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkCyan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF008B8B.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkGoldenrod">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB8860B.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFA9A9A9.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF006400.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkKhaki">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFBDB76B.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkMagenta">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8B008B.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkOliveGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF556B2F.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkOrange">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF8C00.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkOrchid">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9932CC.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8B0000.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkSalmon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFE9967A.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkSeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8FBC8F.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkSlateBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF483D8B.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkSlateGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF2F4F4F.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkTurquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00CED1.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkViolet">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9400D3.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DeepPink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF1493.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DeepSkyBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00BFFF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DimGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF696969.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DodgerBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF1E90FF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Firebrick">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB22222.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.FloralWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFAF0.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.ForestGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF228B22.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Fuchsia">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Gainsboro">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDCDCDC.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.GhostWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF8F8FF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Gold">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFD700.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Goldenrod">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDAA520.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Gray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF808080.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Green">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF008000.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.GreenYellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFADFF2F.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Honeydew">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0FFF0.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.HotPink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF69B4.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.IndianRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFCD5C5C.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Indigo">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF4B0082.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Ivory">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFFF0.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Khaki">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0E68C.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Lavender">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFE6E6FA.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LavenderBlush">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFF0F5.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LawnGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7CFC00.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LemonChiffon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFACD.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFADD8E6.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightCoral">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF08080.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightCyan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFE0FFFF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightGoldenrodYellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFAFAD2.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD3D3D3.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF90EE90.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightPink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFB6C1.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightSalmon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFA07A.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightSeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF20B2AA.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightSkyBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF87CEFA.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightSlateGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF778899.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightSteelBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB0C4DE.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightYellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFFE0.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Lime">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FF00.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LimeGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF32CD32.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Linen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFAF0E6.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Magenta">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Maroon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF800000.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumAquamarine">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF66CDAA.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF0000CD.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumOrchid">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFBA55D3.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumPurple">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9370DB.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumSeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF3CB371.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumSlateBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7B68EE.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumSpringGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FA9A.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumTurquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF48D1CC.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumVioletRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFC71585
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MidnightBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF191970.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MintCream">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5FFFA.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MistyRose">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFE4E1.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Moccasin">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFE4B5.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.NavajoWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFDEAD.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Navy">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF000080.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.OldLace">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFDF5E6.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Olive">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF808000.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.OliveDrab">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF6B8E23.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Orange">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFA500.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.OrangeRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF4500.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Orchid">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDA70D6.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.PaleGoldenrod">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFEEE8AA.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.PaleGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF98FB98.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.PaleTurquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFAFEEEE.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.PaleVioletRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDB7093.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.PapayaWhip">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFEFD5.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.PeachPuff">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFDAB9.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Peru">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFCD853F.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Pink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFC0CB.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Plum">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDDA0DD.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.PowderBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB0E0E6.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Purple">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF800080.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Red">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF0000.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.RosyBrown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFBC8F8F.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.RoyalBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF4169E1.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SaddleBrown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8B4513.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Salmon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFA8072.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SandyBrown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF4A460.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF2E8B57.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SeaShell">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFF5EE.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Sienna">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFA0522D.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Silver">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFC0C0C0.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SkyBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF87CEEB.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SlateBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF6A5ACD.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SlateGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF708090.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Snow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFAFA.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SpringGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FF7F.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SteelBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF4682B4.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Tan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD2B48C.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Teal">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF008080.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Thistle">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD8BFD8.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Tomato">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF6347.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Turquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF40E0D0.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Violet">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFEE82EE.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Wheat">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5DEB3.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.White">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFFFF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.WhiteSmoke">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5F5F5.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Yellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFF00.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.YellowGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9ACD32.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObject">
            <summary>
            Represents the chart object.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObject.Name">
            <summary>
            Gets the chart object name - the unique identifier for the object in the current chart area.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObject.Comment">
            <summary>
            Gets or sets the comment for the chart object.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:cAlgo.API.ChartObject.ObjectType">
            <summary>
            Gets the chart object type.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObject.IsInteractive">
            <summary>
            Defines whether the instance is interactive. The non-interactive chart objects cannot be selected, have no hover effect and cannot be searched. Available only to the current cBot or Indicator and will be removed when the cBot/Indicator stops TBD
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObject.ZIndex">
            <summary>
            Gets or sets the location of a chart object on the Z-axis in respect to the other chart objects.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObject.IsAlive">
            <summary>
            Defines if the chart object still exists on the chart.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectType">
            <summary>
            The chart object types.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.HorizontalLine">
            <summary>
            The horizontal line. The line parallel to the X-axis that can be set on any Y-axis value.  
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.VerticalLine">
            <summary>
            The vertical line. The line parallel to the Y-axis that can be set on any X-axis value. used to mark certain time event or chart bar on the chart.TBD
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.TrendLine">
            <summary>
            The trend line. The line with the start and end points that can be drawn in any direction on the chart.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.Text">
            <summary>
            The text that can be placed directly in the chart, bound to X-Y axises.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.StaticText">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.Icon">
            <summary>
            The icon. The collection of icons that can be placed directly in the chart, bound to X-Y axises.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.FibonacciRetracement">
            <summary>
            The Fibonacci Retracement that can be placed directly in the chart, bound to X-Y axises. - a charting technique that uses the Fibonacci ratios to indicate the areas of support or resistance.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.FibonacciExpansion">
            <summary>
            The Fibonacci Expansion that can be placed directly in the chart, bound to X-Y axises. - a charting technique used to plot possible levels of support and resistance by tracking not only the primary trend but also the retracement.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.FibonacciFan">
            <summary>
            The Fibonacci Fan that can be placed directly in the chart, bound to X-Y axises. a charting technique used to estimate support and resistance levels by drawing the new trend lines based on the Fibonacci Retracement levels.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.AndrewsPitchfork">
            <summary>
            The Andrews Pitchfork that can be placed directly in the chart, bound to X-Y axises.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.Rectangle">
            <summary>
            The rectangle of any preferable size and rotation that can be drawn directly in the chart, bound to X-Y axises.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.Ellipse">
            <summary>
            The ellipse of any preferable size and rotation that can be drawn directly in the chart, bound to X-Y axises.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.Triangle">
            <summary>
            The triangle of any preferable size and rotation that can be drawn directly in the chart, bound to X-Y axises.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.EquidistantChannel">
            <summary>
            The equidistant channel that can be placed directly in the chart, bound to X-Y axises.
            </summary>
        </member>
        <member name="T:cAlgo.API.IndicatorArea">
            <summary>
            Represents the area where the Indicator is placed.
            </summary>
            <seealso cref="T:cAlgo.API.ChartArea" />
        </member>
        <member name="T:cAlgo.API.Collections.IReadonlyList`1">
            <summary>
            Represents a read only collection of a specified type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:cAlgo.API.Collections.IReadonlyList`1.Count">
            <summary>
            The total number of elements contained in the collection
            </summary>
        </member>
        <member name="P:cAlgo.API.Collections.IReadonlyList`1.Item(System.Int32)">
            <summary>
            Represents the item contained in the collection at a specific index
            </summary>
            <param name="index">The position in the collection where the item is contained</param>
            <returns></returns>
        </member>
        <member name="P:cAlgo.API.ButtonClickEventArgs.Button">
            <summary>
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartColorEventArgs">
            <summary>
            Provides data for the chart color event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartDisplaySettingsEventArgs">
            <summary>
            Provides data for the chart display settings event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettingsEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartDragEventArgs">
            <summary>
            Provides data for the chart dragging event.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartMouseEventArgs">
            <summary>
            Provides data for the mouse related routed events.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.ChartArea">
            <summary>
            Gets the chart area.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.MouseX">
            <summary>
            Gets the X-axis value of the mouse event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.MouseY">
            <summary>
            Gets the Y-axis value of the mouse event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.TimeValue">
            <summary>
            Gets the time value on the X-axis where the mouse event occurs.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.BarIndex">
            <summary>
            Gets the exact bar index of the mouse event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.YValue">
            <summary>
            Gets the Y-axis value of the mouse event.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:cAlgo.API.ChartMouseEventArgs.CtrlKey" -->
        <member name="P:cAlgo.API.ChartMouseEventArgs.ShiftKey">
            <summary>
            Defines whether the Shift key is pressed during the mouse event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.AltKey">
            <summary>
            Defines whether the Alt key is pressed during the mouse event.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartMouseWheelEventArgs">
            <summary>
            Provides data for the mouse wheel scroll event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseWheelEventArgs.Delta">
            <summary>
            Gets the number of detents the mouse wheel has rotated. A detent is one notch of the mouse wheel.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectAddedEventArgs">
            <summary>
            Provides data for the adding chart object event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.ChartObjectEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObjectEventArgs.Area">
            <summary>
            Gets the chart area.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObjectEventArgs.ChartObject">
            <summary>
            Gets the chart object.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectHoverChangedEventArgs">
            <summary>
            Provides data for the mouse hover over a chart object event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObjectHoverChangedEventArgs.IsObjectHovered">
            <summary>
            Defines if the mouse is hovered over the chart object.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectRemovedEventArgs">
            <summary>
            Provides data for the removing chart object event.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectSelectionChangedEventArgs">
            <summary>
            Provides data for the chart object selecting or deselecting event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.ChartObjectSelectionChangedEventArgs.IsObjectSelected">
             <summary>
            Defines whether the chart object is selected or deselected.
             </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectUpdatedEventArgs">
             <summary>
            Provides data for the chart object update event.
             </summary>
        </member>
        <member name="T:cAlgo.API.ChartScrollEventArgs">
            <summary>
            Provides data for the chart scrolling event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartScrollEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartScrollEventArgs.ChartArea">
            <summary>
            Gets the chart area.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartScrollEventArgs.BarsDelta">
            <summary>
            Gets a value that indicates the amount of bars that the chart was scrolled for
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartScrollEventArgs.BottomYDelta">
            <summary>
            Gets the lowest value of the bars delta.
            </summary>
            <value>The bottom y delta.</value>
        </member>
        <member name="P:cAlgo.API.ChartScrollEventArgs.TopYDelta">
            <summary>
            Gets the highest value of the bars delta.
            </summary>
            <value>The top y delta.</value>
        </member>
        <member name="T:cAlgo.API.ChartSizeEventArgs">
            <summary>
            Provides data for the chart size change event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.ChartSizeEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartSizeEventArgs.Area">
            <summary>
            Gets the chart area.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartTypeEventArgs">
            <summary>
            Provides data for the chart type chage event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTypeEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartZoomEventArgs">
            <summary>
            Provides data for the chart type change event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.ChartZoomEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.CheckBoxEventArgs.CheckBox">
            <summary>
            </summary>
        </member>
        <member name="T:cAlgo.API.IndicatorAreaAddedEventArgs">
            <summary>
            Provides data for the indicator area adding event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.IndicatorAreaEventArgs">
            <summary>
            The arguments for the indicator area event.
            </summary> 
        </member>
        <member name="P:cAlgo.API.IndicatorAreaEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.IndicatorAreaEventArgs.Area">
            <summary>
            Gets the area.
            </summary>
        </member>
        <member name="T:cAlgo.API.IndicatorAreaRemovedEventArgs">
            <summary>
            Provides data for the indicator area removing event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.PendingOrderCancelledEventArgs">
            <summary>
            Provides data for the pending order cancellation event.
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Cancelled += PendingOrdersOnCancelled;
                var result = PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize);
                CancelPendingOrder(result.PendingOrder);
            }
            private void PendingOrdersOnCancelled(PendingOrderCancelledEventArgs args)
            {
               Print("Pending order with id {0} was cancelled. Reason: {1}", args.PendingOrder.Id, args.Reason);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrderCancelledEventArgs.PendingOrder">
            <summary>
            Gets the pending order that was cancelled.
            </summary>
        </member>
        <member name="P:cAlgo.API.PendingOrderCancelledEventArgs.Reason">
            <summary>
            Gets the reason for the pending order cancellation.
            </summary>
        </member>
        <member name="T:cAlgo.API.PendingOrderCreatedEventArgs">
            <summary>
            Provides data for the pending order creation events.
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Created+= PendingOrdersOnCreated;
                PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize)
            }
            private void PendingOrdersOnCreated(PendingOrderCreatedEventArgsargs)
            {
                Print("Pending order with id {0} was created", args.PendingOrder.Id);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrderCreatedEventArgs.PendingOrder">
            <summary>
            Gets the pending order that was created.
            </summary>
        </member>
        <member name="T:cAlgo.API.PendingOrderFilledEventArgs">
            <summary>
            Provides data for the pending order fill event.
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Filled += PendingOrdersOnFilled;
                PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            }
            private void PendingOrdersOnFilled(PendingOrderFilledEventArgs args)
            {
                Print("Pending order with id {0} was filled, position id  is {1}", args.PendngOrder.Id, args.Position.Id);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrderFilledEventArgs.PendingOrder">
            <summary>
            Gets the pending order that was filled.
            </summary>
        </member>
        <member name="P:cAlgo.API.PendingOrderFilledEventArgs.Position">
            <summary>
            Gets the position that was filled from the pending order.
            </summary>
        </member>
        <member name="T:cAlgo.API.PendingOrderModifiedEventArgs">
            <summary>
            Provides data for the pending order modification event. 
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Modified += PendingOrdersOnModified;
                var result = PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize);
                ModifyPendingOrder(result.PendingOrder, Symbol.Ask + 20 * Symbol.PipSize ,null, null, null);
            }
            private void PendingOrdersOnModified(PendingOrderModifiedEventArgs args)
            {
                Print("Pending order with id {0} was modifed", args.PendingOrder.Id);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrderModifiedEventArgs.PendingOrder">
            <summary>
            Gets the pending order that was modified.
            </summary>
        </member>
        <member name="T:cAlgo.API.PositionModifiedEventArgs">
            <summary>
            Provides data for the position modification event. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.PositionModifiedEventArgs.Position">
            <summary>
            Gets or sets the modified position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.RadioButtonEventArgs.RadioButton">
            <summary>
            </summary>
        </member>
        <member name="P:cAlgo.API.ToggleButtonEventArgs.ToggleButton">
            <summary>
            </summary>
        </member>
        <member name="T:cAlgo.API.Internals.AccountType">
            <summary>
            Returns current account type
            </summary>
        </member>
        <member name="F:cAlgo.API.Internals.AccountType.Hedged">
            <summary>
            Account type that allows hedged positions
            </summary>
        </member>
        <member name="F:cAlgo.API.Internals.AccountType.Netted">
            <summary>
            Account type that allows only single net position per symbol
            </summary>
        </member>
        <member name="T:cAlgo.API.Internals.Algo">
            <summary>
            The container class for the main cAlgo.API Interfaces
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.MarketSeries">
            <summary>
            Market series of the current symbol and time frame.
            </summary>
            <remarks>
            Access to Open, High, Low, Close, Typical, Median and Weighted Price, Open Time and current Time frame.
            </remarks>
            <example>
            <code>
            
            //Access price and time data through MarketSeries
            var closePrice = MarketSeries.Close[index];
            var openTime = MarketSeries.OpenTime.LastValue;
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Indicators">
            <summary>
            Access to built-in Indicators.
            </summary>
            <example>
            <code>
            
            protected override void Initialize()
            {
                //Use MarketSeries price data as parameters to indicators
                _ma = Indicators.SimpleMovingAverage(MarketSeries.Close, 20);
            }
             
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Symbol">
            <summary>
            Represents the current symbol provides access to its properties and certain methods
            </summary>
            <example>
            <code>
            var ask = Symbol.Ask;
            var bid = Symbol.Bid;
            var digits = Symbol.Digits;
            var pip = Symbol.PipSize;
            var maxVolume = Symbol.VolumeMax;
            var minVolume = Symbol.VolumeMin;
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);  
            </code>
            </example>
            <example>
            <code>
            volume = Symbol.NormalizeVolume(volume, RoundingMode.Down);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Notifications">
            <summary>
            Represents notifications such as sounds and email
            </summary>
            <example>
            <code>
            Notifications.PlaySound(@"C:\Windows\Media\notify.wav");
            </code>
            </example>
            <example>
            <code>
            string emailBody = "this is the message send";
            Notifications.SendEmail("from@example.com", "to@example.com", "my subject", emailBody);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.TimeFrame">
            <summary>
            Access to TimeFrame values
            </summary>
            <example>
            <code>
             if(TimeFrame == TimeFrame.Daily)
             {           
                //...
             } 
             </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Server">
            <summary>
            Server related information.
            </summary>
            <example>
            <code>
            protected override void OnTick()
            {
                Print("The server time is: {0}", Server.Time);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.Algo.Print(System.String,System.Object[])">
            <summary>
            Prints a message to the Log
            </summary>
            <param name="message">Message to print.</param>
            <param name="parameters">Parameters (optional)</param>
            <example>
            <code>
            Print("Current Balance is {0}, Equity is {1}.", Account.Balance, Account.Equity);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.Algo.Print(System.Object[])">
            <summary>
            Prints a message to the Log
            </summary>
            <param name="parameters">Parameters to print</param>
            <example>
            <code>
            Print(Account.Balance, " ", Account.Equity);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.Algo.Print(System.Object)">
            <summary>
            Prints text representation of the specified object to log.
            </summary>
            <param name="value">Object to print.</param>
            <example>
            <code>
            Print(Account.Positions.Count);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.MarketData">
            <summary>
            Provides access to Depth of Market Data
            </summary>
            <example>
            <code>
            private MarketDepth _md;
            _md = MarketData.GetMarketDepth("GBPUSD");
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.IsBacktesting">
            <summary>
            True if the robot is in Backtesting mode, false otherwise
            </summary>
            <example>
            <code>
            if(IsBacktesting)
            {
               Print(MarketSeries.OpenTime.LastValue);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.TimeZone">
            <summary>
            TimeZone of cBot or Indicator
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Positions">
            <summary>
            Collection of all open positions of the account
            </summary>
            <example>
            <code>
            foreach (var position in Positions)
            {
                if (position.StopLoss == null)
                    ModifyPosition(position, 10, position.TakeProfit);
            }
             </code>
            </example>
            <example>
            var position = Positions.Find("myLabel", Symbol, TradeType.Sell);
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.PendingOrders">
            <summary>
            Array of all Pending Orders of the account
            </summary>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfit,
                                        order.ExpirationTime);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.Algo.CreateDataSeries">
            <summary>
            Initialization of an IndicatorDataSeries.
            </summary>
            <example>
            <code>
            private IndicatorDataSeries series;
            
            protected override void Initialize()
            {
                series = CreateDataSeries();
            }
            public override void Calculate(int index)
            {
                series[index] = (MarketSeries.Close[index] + MarketSeries.Open[index]) / 2;
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.History">
            <summary>
            Represents the collection of all historical trades of the account.
            </summary>
            <example>
            <code>
            foreach (HistoricalTrade trade in History)
            {
                Print(trade.EntryTime);
            }
             </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.Algo.RefreshData">
            <summary>
            Updates MarketSeries, Positions, PendingOrders, History, etc.
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.Algo.OnTimer">
            <summary>
            Called when the timer interval has elapsed.
            </summary>
            <example>
            <code>        
            protected override void OnStart()
            {
                Timer.Start(1);//start timer with 1 second interval
            }
            
            protected override void OnTimer()
            {
                ChartObjects.DrawText("time", Time.ToString("HH:mm:ss"), StaticPosition.TopLeft);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Timer">
            <summary>
            Access to the Timer object.
            </summary>
            <example>
            <code>        
            protected override void OnStart()
            {
                Timer.Start(1);//start timer with 1 second interval
            }
            
            protected override void OnTimer()
            {
                ChartObjects.DrawText("time", Time.ToString("HH:mm:ss"), StaticPosition.TopLeft);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Time">
            <summary>
            Returns the current server time. The shortcut to the Server.Time property.
            </summary>
            <example>
            <code>        
            protected override void OnTick()
            {
                Print("The Server Time is: {0}", Time);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.ChartObjects">
            <summary>
            Represents objects that can be drawn on the chart.
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("SymbolCode", "Currency Pair: " + Symbol.Code, StaticPosition.TopLeft, Colors.Turquoise);
            </code>
            </example>
            <example>
            <code>
            ChartObjects.DrawVerticalLine("Line1", index, Colors.Red);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Chart">
            <summary>
            Represents the chart where cBot or Indicator is launched.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.ChartProvider">
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.Internals.Algo.BeginInvokeOnMainThread(System.Action)">
            <summary>
            Invokes asynchronously the specified code on the main cBot or Indicator thread.
            </summary>
            <param name="action">The code to invoke on the main cBot/Indicator thread</param>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.RunningMode">
            <summary></summary>
            <summary>
            Defines if a cBot is running in real time, in the silent backtesting mode, in the visual backtesting mode, or in the optimization mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.Internals.LeverageTier">
            <summary>
            Tier of dynamic leverage.
            </summary>
            <example>
            <code>
            var firstTier = Symbol.DynamicLeverage[0];
            Print("Leverage for volume up to {0} is {1}, firstTier.Volume, firstTier.Leverage);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.LeverageTier.Volume">
            <summary>
            Volume of dynamic leverage tier.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.LeverageTier.Leverage">
            <summary>
            Leverage of dynamic leverage tier.
            </summary>
        </member>
        <member name="T:cAlgo.API.Internals.LogMessageType">
            <summary>
                Providets type of log
            </summary>
        </member>
        <member name="F:cAlgo.API.Internals.LogMessageType.Info">
            <summary>
            Info type
            </summary>
        </member>
        <member name="F:cAlgo.API.Internals.LogMessageType.Trading">
            <summary>
            Trading type
            </summary>
        </member>
        <member name="F:cAlgo.API.Internals.LogMessageType.Error">
            <summary>
            Error type
            </summary>
        </member>
        <member name="F:cAlgo.API.Internals.LogMessageType.Warning">
            <summary>
            Warning type
            </summary>
        </member>
        <member name="T:cAlgo.API.Internals.MarketHours">
            <summary>
            Access to symbol's trading sessions schedule
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.MarketHours.Sessions">
            <summary>
            List of all symbol's trading sessions
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.MarketHours.IsOpened">
            <summary>
            Indicates if trading session is active
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.MarketHours.IsOpened(System.DateTime)">
            <summary>
            Indicates if trading session is active
            </summary>
            <param name="datetime">Date and time to check</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.MarketHours.TimeTillClose">
            <summary>
            Time left till end of current trading session. Returns 0 if session is not active
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.MarketHours.TimeTillOpen">
            <summary>
            Time left till start of new trading session. Returns 0 if session is already active
            </summary>
        </member>
        <member name="T:cAlgo.API.Internals.TradingSession">
            <summary>
            Trading session schedule
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.TradingSession.StartDay">
            <summary>
            Day of week when trading session starts
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.TradingSession.EndDay">
            <summary>
             Day of week when trading session ends
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.TradingSession.StartTime">
            <summary>
            Time when trading session starts
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.TradingSession.EndTime">
            <summary>
            Time when trading session ends
            </summary>
        </member>
        <member name="T:cAlgo.API.Internals.ChartObjects">
            <summary>
                Interface that contains objects that
                can be drawn on the chart.
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.RemoveObject(System.String)">
            <summary>
                Removes the chart object that is identified by objectName.
            </summary>
            <param name="objectName">The name of the object that is removed.</param>
            <example>
                <code>
            var right = StaticPosition.TopRight;
            var left = StaticPosition.TopLeft;
            ChartObjects.DrawText("object1", "123", right);
            ChartObjects.DrawText("object2", "456", left);
            ChartObjects.RemoveObject("object2");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.RemoveAllObjects">
            <summary>
                Remove all objects from the chart
            </summary>
            <example>
                <code>
            var right = StaticPosition.TopRight;
            var left = StaticPosition.TopLeft;
            ChartObjects.DrawText("object1", "123", right);
            ChartObjects.DrawText("object2", "456", left);
            ChartObjects.RemoveAllObjects();
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.DrawText(System.String,System.String,System.Int32,System.Double,cAlgo.API.VerticalAlignment,cAlgo.API.HorizontalAlignment,System.Nullable{cAlgo.API.Colors})">
            <summary>
                Draws text on the chart given
                coordinates expressed in time(x) and price(y).
            </summary>
            <param name="objectName">The unique object's name</param>
            <param name="text">The text of the object drawn</param>
            <param name="index">The x-coordinate (bar index) where object is drawn</param>
            <param name="yValue">The y-coordinate (price) where the object is drawn</param>
            <param name="verticalAlignment">The vertical alignment of the object</param>
            <param name="horizontalAlignment">The horizontal alignment of the object. </param>
            <param name="color">The object's color</param>
            <example>
                <code>
            var name = "myObject";
            var low = MarketSeries.Low[index];
            var text = low.ToString();
            var xPos = index;
            var yPos = low;
            var vAlign = VerticalAlignment.Bottom;
            var hAlign = HorizontalAlignment.Right;
            ChartObjects.DrawText(name, text, xPos, yPos, 
                vAlign, hAlign, Colors.Red);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.DrawText(System.String,System.String,cAlgo.API.StaticPosition,System.Nullable{cAlgo.API.Colors})">
            <summary>
                Draws text at a static position.
            </summary>
            <param name="objectName"> The unique object's name</param>
            <param name="text">The text drawn on the chart</param>
            <param name="position">Position of the object relative to the chart</param>
            <param name="color">The object's color</param>
            <example>
                <code>
            var name = "ask";
            var text = Symbol.Ask.ToString();
            var staticPos = StaticPosition.TopRight;
            var color = Colors.Green;
            ChartObjects.DrawText(name, text, staticPos, color);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.DrawLine(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Colors,System.Double,cAlgo.API.LineStyle)">
            <summary>
                Draws a line given two coordinates of type Bar index (x) and price (y)
            </summary>
            <param name="objectName">A unique name that represents the line object</param>
            <param name="index1">x-coordinate of the first point</param>
            <param name="y1">y-coordinate of the first point</param>
            <param name="index2">x-coordinate of the second point</param>
            <param name="y2">y-coordinate of the second point</param>
            <param name="color">Line color</param>
            <param name="thickness">Line thickness</param>
            <param name="style">Line style</param>
            <example>
                <code>
            var price = Symbol.Bid + Symbol.PipSize;
            ChartObjects.DrawLine("hLine", index-10, 
                price, index, price, 
                Colors.Blue, 2, LineStyle.Lines);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.DrawLine(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Colors,System.Double,cAlgo.API.LineStyle)">
            <summary>
                Draws a line given two coordinates of type DateTime (x) and Price (y)
            </summary>
            <param name="objectName">A unique name that represents the line object</param>
            <param name="date1">x-coordinate of the first point</param>
            <param name="y1">y-coordinate of the first point</param>
            <param name="date2">x-coordinate of the second point</param>
            <param name="y2">y-coordinate of the second point</param>
            <param name="color">Line color</param>
            <param name="thickness">Line thickness</param>
            <param name="style">Line style</param>
            <example>
                <code>
            var dt1 = DateTime.Now.AddHours(-10);
            var dt2 = DateTime.Now;
            var y1 = MarketSeries.Close[index - 10];
            var y2 = MarketSeries.Close[index];
            ChartObjects.DrawLine("line", 
                   dt1, y1, dt2, y2, 
                   Colors.Violet, 1, LineStyle.DotsRare);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.DrawVerticalLine(System.String,System.DateTime,cAlgo.API.Colors,System.Double,cAlgo.API.LineStyle)">
            <summary>
                Draws a vertical line given one coordinate, date, of type DateTime that passes through the time axis at time = date
            </summary>
            <param name="objectName">A unique name that represents the line object</param>
            <param name="date">The value at which the line passes through the Time axis (x-coordinate) </param>
            <param name="color">Line color</param>
            <param name="thickness">Line thickness</param>
            <param name="style">Line style</param>
            <example>
                <code>
            var dt1 = DateTime.Now.AddHours(-10);
            ChartObjects.DrawVerticalLine("vLine", dt1,         
                   Colors.Red, 1, LineStyle.Solid);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.DrawVerticalLine(System.String,System.Int32,cAlgo.API.Colors,System.Double,cAlgo.API.LineStyle)">
            <summary>
                Draws a vertical line given one coordinate, index, of type int (bar index) that passes through the time axis at
                index
            </summary>
            <param name="objectName">A unique name that represents the line object</param>
            <param name="index">The value at which the line passes through the Time axis (x-coordinate)</param>
            <param name="color">Line color</param>
            <param name="thickness">Line thickness</param>
            <param name="style">Line style</param>
            <example>
                <code>
            int index = MarketSeries.Close.Count - 1;
            ChartObjects.DrawVerticalLine("vLine", index,         
                   Colors.Red, 1, LineStyle.Dots);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.DrawHorizontalLine(System.String,System.Double,cAlgo.API.Colors,System.Double,cAlgo.API.LineStyle)">
            <summary>
                Draws a horizontal line given one coordinate, y, of type double (price) that passes through the price axis at price
                = y
            </summary>
            <param name="objectName">A unique name that represents the line object</param>
            <param name="y">The value at which the line passes through the price axis</param>
            <param name="color">Line color</param>
            <param name="thickness">Line thickness</param>
            <param name="style">Line style</param>
            <example>
                <code>
            double y = Symbol.Bid;
            ChartObjects.DrawHorizontalLine("hLine", y,         
                   Colors.Yellow, 2, LineStyle.Lines);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Internals.IIndicator">
            <summary>
            Base interface for all Indicators
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicator.Calculate(System.Int32)">
            <summary>
            Method to calculate the value(s) of indicator for given index. 
            </summary>
            <param name="index">The index.</param>
            <example>
            <code>
            Example 1
            
            &#47;&#47;&#46;&#46;&#46;
            
            [Parameter("Period", DefaultValue = 14)]
            public int Period { get; set; }
            
            &#47;&#47;&#46;&#46;&#46;
            
            public override void Calculate(int index)
            {
                // Calculate value at specified index
                
                // if the index is less than Period exit
                if(index &#60; Period)
                    return;
            
                // Maximum returns the largest number in the Series in the range [Series[index-Period], Series[index]]
                double high = MarketSeries.High.Maximum(Period);
                // Minimum returns the smallest number in the Series in the range [index - Period, index]
                double low = MarketSeries.Low.Minimum(Period);
                double center = (high + low) / 2;
            
                // Display Result of Indicator
                Result[index] = center;
            }
            Example 2
            
            &#47;&#47;&#46;&#46;&#46;
            
            [Parameter]
            public DataSeries Source { get; set; }
            
            [Parameter("Periods", DefaultValue = 25)]
            public int Periods { get; set; }
            
            &#47;&#47;&#46;&#46;&#46;
            
            public override void Calculate(int index)
            { 
                // Simple moving average calculation
                double sum = 0.0;
                for (int i = index - Periods + 1; i &#60;= index; i++)
                {
                    sum += Source[i];
                }
                Result[index] = sum / Periods;
             
            }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Internals.IAccount">
            <summary>
            Contains the current account information.
            </summary>
            <example>
            <code>
            
            // Account Properties
            
            // Current Account Balance 
            double balance = Account.Balance;   
            
            // Current Account Currency e.g. EUR
            string currency = Account.Currency; 
            
            // Current Account Equity 
            double equity = Account.Equity;     
            
            // Current Account Free Margin   
            double freemargin = Account.FreeMargin; 
            
            // Current Account Margin
            double margin = Account.Margin;
            
            //Margin level = Equity / Margin * 100
            double? marginlevel = Account.MarginLevel; 
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.AccountType">
            <summary>
            Returns the current account type.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.Balance">
            <summary>
            Returns the balance of the current account.
            </summary>
            <example>
            <code>
            double balancebefore;
            double balanceafter;
            
            protected override void OnStart()
            {
               // store the balance upon start up of the robot
               balancebefore = Account.Balance;
            }
            
            
            protected override void OnStop()
            {
                // Store the balance upon stop of the robot.
                balanceafter = Account.Balance;
                // print the difference
            	Print("The difference of balancebefore and balanceafter is: {0}", balancebefore-balanceafter);
            }
            </code>
            </example>
            <example>
            <code>
            if ( Account.Balance &#60; 0 )
                Stop();
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.Currency">
            <summary>
            Returns the currency of the current account, e.g. "EUR".
            </summary>
            <example>
            <code>
            Print("The currency of the current account is: {0}", Account.Currency);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.Equity">
            <summary>
            Represents the equity of the current account (balance minus Unrealized Net Loss plus Unrealized Net Profit plus Bonus).
            </summary>
            <example>
            <code>
            Print("The equity of this account is: {0}", Account.Equity);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.Margin">
            <summary>
            Represents the margin of the current account.
            </summary>
            <example>
            <code>
            Print("The margin of this account is: {0}", Account.Margin); 
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.FreeMargin">
            <summary>
            Represents the free margin of the current account.
            </summary>
            <example>
            <code>
            Print("The free margin of this account is: {0}", Account.FreeMargin); 
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.MarginLevel">
            <summary>
            Represents the margin level of the current account. 
            Margin level (in %) is calculated using this formula: 
            Equity / Margin * 100
            </summary>
            <example>
            <code>
            Print("The marginlevel of this account is: {0}", Account.MarginLevel); 
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.IsLive">
            <summary>
            Defines if the account is Live or Demo. True if the Account is Live, False if it is a Demo.
            </summary>
            <example>
            <code>
            if (Account.IsLive)
                Print("Live Account");
            else
                Print("Demo Account");
             </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.Leverage">
            <summary>
            The account leverage
            </summary>
            <example>
            <code>
            var leverage = Account.Leverage;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.Positions">
            <summary>
            Represents the open positions of the current account.
            </summary>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            protected override void OnTick()
            {
                Print("The number of position of this account is: {0}", Account.Positions.Count); 
            }
            
            &#47;&#47;&#46;&#46;&#46;
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.PendingOrders">
            <summary>
            Represents the pending orders of the current account.
            </summary>
            <example>
            <code>
            
            &#47;&#47;&#46;&#46;&#46;
            
            protected override void OnTick()
            {
                Print("The number of PendingOrder of this account is: {0}", Account.PendingOrder.Count); 
            }
            
            &#47;&#47;&#46;&#46;&#46;
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.Number">
            <summary>
            Returns the number of the current account, e.g. 123456.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.BrokerName">
            <summary>
            Returns the broker name of the current account.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.UnrealizedGrossProfit">
            <summary>
            Gets the Unrealized Gross profit value.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.UnrealizedNetProfit">
            <summary>
            Gets the Unrealized Gross profit value.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.PreciseLeverage">
            <summary>
            Gets the precise account leverage value.
            </summary>
            <example>
            <code>
            var leverage = Account.Leverage;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.StopOutLevel">
            <summary>
            Stop Out level is a lowest allowed Margin Level for account. If Margin Level is less than Stop Out, position will be closed sequentially until Margin Level is greater than Stop Out.
            </summary>
        </member>
        <member name="T:cAlgo.API.Internals.IDataSeriesFactory">
            <summary>
                Represents IndicatorDataSeries class
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.IDataSeriesFactory.CreateSeries(System.String,cAlgo.API.TimeFrame)">
            <summary>
                IndicatorDataSeries default constructor
            </summary>
            <param name="symbolCode">Name of symbol: EURUSD, GBPUSD, ...</param>
            <param name="timeFrame">TimeFrame: TimeFrame.Minute, TimeFrame.Minute2, ...</param>
            <returns></returns>
        </member>
        <member name="T:cAlgo.API.Internals.ILog">
            <summary>
            Provides access to the Write method
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.ILog.Write(cAlgo.API.Internals.LogMessageType,System.String)">
            <summary>
            Writes a string to the log
            </summary>
            <param name="messageType">the type of message</param>
            <param name="message">the message that is written</param>
        </member>
        <member name="T:cAlgo.API.Internals.IIndicatorsAccessor">
            <summary>
            Accessor to Indicators 
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.GetIndicator``1(System.Object[])">
            <summary>
            Initializes the custom indicator
            </summary>
            <typeparam name="TIndicator">The custom indicator name</typeparam>
            <param name="parameterValues">The custom indicator parameters</param>
            <returns>Custom indicator instance</returns>
            <example>
            <code>
            private SampleSMA sma;
            
            protected override void Initialize()
            {
                sma = Indicators.GetIndicator&#60;SampleSMA>(Source, Period);
            }
            public override void Calculate(int index)
            {
                // Display the sma result on the chart
                Result[index] = sma.Result[index]; 
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.GetIndicator``1(cAlgo.API.Internals.MarketSeries,System.Object[])">
            <summary>
            Initializes the custom indicator for a specific timeframe
            </summary>
            <typeparam name="TIndicator">The custom indicator name</typeparam>
            <param name="marketSeries">MarketSeries</param>
            <param name="parameterValues">The custom indicator parameters</param>
            <returns>Custom indicator instance</returns>
            <example>
            <code>
            private AdaptiveCG adaptiveCG;
            private MarketSeries seriesMin5;
            
            protected override void Initialize()
            {
                seriesMin5 = MarketData.GetSeries(TimeFrame.Minute5);
                adaptiveCG = Indicators.GetIndicator&#60;AdaptiveCG>(seriesMin5, Alpha);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MovingAverage(cAlgo.API.DataSeries,System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            Moving Average indicators are used to smooth data producing trend indicators.
            </summary>
            <param name="source">The source data used for the MA calculation.</param>
            <param name="periods">The periods used in the calculation.</param>
            <param name="maType">Method of calculation of MA.</param>
            <returns>Moving Average indicator instance</returns>
            <example>
            <code>
            private MovingAverage ma;
            
            protected override void Initialize()
            {
                ma = Indicators.MovingAverage(MarketSeries.Close, 50, MovingAverageType.Simple);
            }
            public override void Calculate(int index)
            {
                // Display the ma result on the chart
                Result[index] = ma.Result[index]; 
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ExponentialMovingAverage(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            The Exponential Moving Average smoothes the price data producing a trend indicator.
            </summary>
            <param name="source">The source data used for the EMA calculation.</param>
            <param name="periods">The periods used in the calculation.</param>
            <returns>Exponential Moving Average indicator instance</returns>
            <example>
            <code>
            private ExponentialMovingAverage ema;
            
            protected override void Initialize()
            {
                ema = Indicators.ExponentialMovingAverage(MarketSeries.Close, 50);
            }
            
            public override void Calculate(int index)
            {
                // Display the ema result on the chart
                Result[index] = ema.Result[index]; 
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WeightedMovingAverage(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            The Weighted Moving Average smoothes the price data producing a trend indicator.
            </summary>
            <param name="source">The source data used for WMA calculation.</param>
            <param name="periods">The periods used in the calculation.</param>
            <returns>Weighted Moving Average indicator instance</returns>
            <example>
            <code> 
            
            private WeigthedMovingAverage wma;
            
            protected override void Initialize()
            {
                wma = Indicators.WeightedMovingAverage(MarketSeries.Close, 20);
            }
            public override void Calculate(int index)
            {
                Result[index] = wma.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.SimpleMovingAverage(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            The simple moving average smoothes the price data producing a trend indicator
            </summary>
            <param name="source">The source data used for SMA calculation.</param>
            <param name="periods">The periods used in the calculation.</param>
            <returns>Simple Moving Average indicator instance</returns>
            <example>
            <code> 
            
            private SimpleMovingAverage sma;
            
            protected override void Initialize()
            {
                sma = Indicators.SimpleMovingAverage(MarketSeries.Close, 14);
            }
            public override void Calculate(int index)
            {
                Result[index] = sma.Result[index]; 
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TriangularMovingAverage(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            The Triangular Moving Average is averaged twice to produce a double smoothed trend indicator
            </summary>
            <param name="source">The source data used for TMA calculation.</param>
            <param name="periods">The periods used in the calculation.</param>
            <returns>Triangular Moving Average indicator instance</returns>
            <example>
            <code> 
            [Parameter]
            public DataSeries Source { get; set; }
            
            [Output("Result", Color = Colors.Orange)]
            public IndicatorDataSeries Result { get; set; }
            
            private SimpleMovingAverage tma;
            
            protected override void Initialize()
            {
                tma = Indicators.TriangularMovingAverage(Source, 10);
            }
            public override void Calculate(int index)
            {
                Result[index] = tma.Result[index]; 
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.HighMinusLow">
            <summary>
            The High Minus Low indicator is used to compute the range of daily bars
            </summary>
            <returns>High Minus Low indicator instance</returns>
            <example>
            <code> 
            [Output("Main")]
            public IndicatorDataSeries Result {get; set;}
            
            private HighMinusLow highMinusLow;
            
            protected override void Initialize()
            {
                highMinusLow = Indicators.HighMinusLow();
            }
            public override void Calculate(int index)
            {
                // Display the High Minus Low indicator on the chart
                Result[index] = highMinusLow.Result[index];
                Print("Previous HighMinusLow is: {0}", highMinusLow.Result[index-1]);
            }
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.HighMinusLow(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the High Minus Low indicator for a specific timeframe
            </summary>
            <remarks>
            The High Minus Low indicator is used to compute the range of daily bars
            </remarks>
            <returns>High Minus Low indicator instance</returns>
            <example>
            <code> 
            private MarketSeries seriesMin5;
            private HighMinusLow highMinusLow;
            
            protected override void Initialize()
            {
                seriesMin5 = MarketData.GetSeries(TimeFrame.Minute5);
                highMinusLow = Indicators.HighMinusLow(seriesMin5);
            }
            public override void Calculate(int index)
            {
                //...
                Print("Min 5 HighMinusLow is: {0}", highMinusLow.Result[indexMin5]);
            }        
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TrueRange">
            <summary>
            Initializes the True Range indicator.
            </summary>
            <remarks>
            The True Range indicator is the daily range plus any gap from the closing price of the previous day
            </remarks>
            <returns>True Range indicator instance</returns>
            <example>
            <code> 
            [Output("Main")]
            public IndicatorDataSeries Result {get; set;}
            
            private TrueRange trueRange;
            
            protected override void Initialize()
            {
                trueRange = Indicators.TrueRange();
            }
            public override void Calculate(int index)
            {
                Result[index] = trueRange.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TrueRange(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the True Range indicator for a specific timeframe
            </summary>
            <remarks>
            The True Range indicator is the daily range plus any gap from the closing price of the previous day
            </remarks>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <returns>True Range indicator instance</returns>
            <example>
            <code> 
            protected override void Initialize()
            {
                seriesMin10 = MarketData.GetSeries(TimeFrame.Minute10); 
                trueRange = Indicators.TrueRange(seriesMin10);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WellesWilderSmoothing(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            Welles Wilder Smoothing eliminates noise to identify the trend.
            </summary>
            <param name="source">The source data used for calculation.</param>
            <param name="periods">The value of the periods used for calculation.</param>
            <returns>Welles Wilder Smoothing indicator instance</returns>
            <example>
            <code> 
            [Output("Main")]
            public IndicatorDataSeries Result {get; set;}
            
            private WellesWilderSmoothing wws;
            
            protected override void Initialize()
            {
                wws = Indicators.WellesWilderSmoothing(MarketSeries.Close, 14);
            }
            public override void Calculate(int index)
            {
                Result[index] = wws.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.SwingIndex(System.Int32)">
            <summary>
            Returns the Swing Index indicator instance.
            </summary>
            <param name="limitMoveValue">The value of the limit move used for calculation.</param>
            <returns>Swing Index indicator instance</returns>
            <example>
            <code> 
            [Parameter(DefaultValue = 20)]
            public int limitMove { get; set; }
            
            [Output("Main")]
            public IndicatorDataSeries Result { get; set; }
            
            private SwingIndex si;
            protected override void Initialize()
            {
               si = Indicators.SwingIndex(limitMove);
            }
            
            public override void Calculate(int index)
            {
                //This stores current SwingIndex to Result Output
                Result[index] = si.Result[index];
                // This prints previous SwingIndex to log
                Print("Previous SwingIndex is: {0}", si.Result[index-1]);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.SwingIndex(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Returns the Swing Index indicator instance.
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="limitMoveValue">The value of the limit move used for calculation.</param>
            <returns>Swing Index indicator instance</returns>
            <example>
            <code> 
            protected override void Initialize()
            {
               seriesMin10 = MarketData.GetSeries(TimeFrame.Minute10);
               swingIndex = Indicators.SwingIndex(seriesMin10, limitMove);
            }
            
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AccumulativeSwingIndex(System.Int32)">
            <summary>
            Initializes the Accumulative Swing Index indicator
            </summary>
            <remarks>
            The Accumulative Swing Index indicator is used as a divergence and confirmation tool.
            </remarks>
            <param name="limitMoveValue">The value of the Limit Move used for calculation.</param>
            <returns>Accumulative Swing Index indicator instance</returns>
            <example>
            <code> 
            [Parameter(DefaultValue = 20)]
            public int limitMove { get; set; }
            
            [Output("Main")]
            public IndicatorDataSeries Result { get; set; }
            
            private AccumulativeSwingIndex asi;
            protected override void Initialize()
            {
               asi = Indicators.AccumulativeSwingIndex(limitMove);
            }
            
            public override void Calculate(int index)
            {
                //This stores current AccumulativeSwingIndex to Result Output
                Result[index] = asi.Result[index];
                // This prints previous AccumulativeSwingIndex to log
                Print("Previous AccumulativeSwingIndex is: {0}", asi.Result[index-1]);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AccumulativeSwingIndex(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the Accumulative Swing Index indicator for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="limitMoveValue">The Limit Move used in the calculation</param>
            <returns>AccumulativeSwingIndex indicator instance</returns>
            <example>
            <code>
            protected override void Initialize()
            {
               dailySeries = MarketData.GetSeries(TimeFrame.Daily);
               accumulativeSwingIndex = Indicators.AccumulativeSwingIndex(dailySeries, limitMove);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Aroon(System.Int32)">
            <summary>
            The Aroon indicator is used to identify trends and their reversals.
            </summary>
            <param name="periods">The value of the periods used for calculation.</param>
            <returns>Aroon indicator instance</returns>
            <example>
            <code> 
            [Parameter("Period")]
            public int Period { get; set; }
            
            private Aroon aroon;
            
            protected override void OnStart()
            {
                aroon = Indicators.Aroon(Period);
            }
            protected override void OnTick()
            {
                if (aroon.Up.LastValue &#60; aroon.Down.LastValue)
                {
                    //Do something
                }
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Aroon(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the Aroon indicator instance
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The periods used in the calculation</param>
            <returns>Aroon indiator instance</returns>
            <example>
            <code> 
            [Parameter("Period")]
            public int Period { get; set; }
            
            private Aroon aroonDaily;
            private MarketSeries dailySeries;
            
            protected override void OnStart()
            {
                dailySeries = MarketData.GetSeries(TimeFrame.Daily);
                aroonDaily = Indicators.Aroon(dailySeries, Period);
            }
            protected override void OnTick()
            {
                if (aroonDaily.Up.LastValue &#60; aroonDaily.Down.LastValue)
                {
                    //Do something
                }
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.StandardDeviation(cAlgo.API.DataSeries,System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            The Standard Deviation indicator shows volatility.
            </summary>
            <param name="source">The source data used for calculation.</param>
            <param name="periods">The value of the periods used for calculation.</param>
            <param name="maType">Type of the Moving Average.</param>
            <returns>Standard Deviation indicator instance</returns>
            <example>
            <code> 
            [Parameter]
            public DataSeries Source { get; set; }
            
            [Parameter(DefaultValue = 20)]
            public int Period { get; set; }
            
            [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
            public MovingAverageType MAType { get; set; }
            
            private StandardDeviation sd;
            private double previousValue;
            
            protected override void OnStart()
            {
                sd = Indicators.StandardDeviation(Source, Period, MAType);
                previousValue = sd.Result.LastValue;
            }
            
            protected override void OnBar() 
            {
                //If StandardDeviation has increased
                if (sd.Result.LastValue > previousValue) 
                {
                    //Do something
                }
                //...
                previousValue = sd.Result.LastValue;
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.BollingerBands(cAlgo.API.DataSeries,System.Int32,System.Double,cAlgo.API.MovingAverageType)">
            <summary>
            The Bollinger Bands indicator shows volatility.
            </summary>
            <param name="source">The source data used for calculation.</param>
            <param name="periods">The value of the periods used for calculation.</param>
            <param name="standardDeviations">The value of the standard deviations used for calculation.</param>
            <param name="maType">Type of the Moving Average.</param>
            <returns>Bollinger Bands indicator instance</returns>
            <example>
            <code> 
            
            [Parameter]
            public DataSeries Source { get; set; }
            
            [Parameter(DefaultValue = 20)]
            public int period { get; set; }
            
            [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
            public MovingAverageType MAType { get; set; }
            
            [Parameter(DefaultValue = 1.5)]
            public double std { get; set; }
            
            private BollingerBands bb;
            
            protected override void OnStart()
            {
                bb = Indicators.BollingerBands(Source, period, std, MAType);
            }
            protected override void OnTick()
            {
                if (bb.Top.LastValue > Symbol.Bid)
                {
                    Print("Bid price is higher than the Top Bollinger Band");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.RelativeStrengthIndex(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            The Relative Strength Index indicator measures turns in price by measuring turns in momentum.
            </summary>
            <param name="source">The source data used for calculation.</param>
            <param name="periods">The value of the periods used for calculation.</param>
            <returns>Relative Strength indicator instance</returns>
            <example>
            <code> 
            [Parameter]
            public DataSeries Source { get; set; }
            
            [Parameter(DefaultValue = 20)]
            public int Period { get; set; }
            
            private RelativeStrengthIndex rsi;
            
            protected override void OnStart()
            {
                rsi = Indicators.RelativeStrengthIndex(Source, Period);
            }
            protected override void OnBar()
            {
                if (rsi.Result.LastValue > 70)
                {
                    Print("RSI is higher than 70");
                }
            }
            </code>
            </example> 
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TimeSeriesMovingAverage(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             The Time Series Moving Average is a moving average based on linear regression
             </summary>
             <param name="source">The source data used for calculation.</param>
             <param name="periods">Number of periods used for calculation.</param>
             <returns>Time Series Moving Average indicator instance</returns>
             <example>
             <code> 
             
             [Parameter]
             public DataSeries Source { get; set; }
             
             [Parameter(DefaultValue = 14)]
             public int periodfast { get; set; }
             
             [Parameter(DefaultValue = 24)]
             public int periodslow { get; set; }
             
             private TimeSeriesMovingAverage tsmfast;
             private TimeSeriesMovingAverage tsmslow;
             
             protected override void OnStart()
             {
                 tsmfast = Indicators.TimeSeriesMovingAverage(Source, periodfast);
                 tsmslow = Indicators.TimeSeriesMovingAverage(Source, periodslow);
             }
             
             protected override void OnTick()
             {
                 //If TSMA with period 14 moves above TSMA with period 24 
                 if (tsmfast.Result.LastValue > tsmslow.Result.LastValue)
                 {
                     //Do something
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.LinearRegressionForecast(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            Linear Regression Forecast is a trend indicator used to forecast values using the Least Squares Fit method.
            </summary>
            <param name="source">The source data used for calculation.</param>
            <param name="periods">The value of the periods used for calculation.</param>
            <returns>Linear Regression Forecast indicator instance</returns>
            <example>
            <code>
            
            private LinearRegressionForecast lrForecast;
            
            protected override void OnStart()
            {
                lrForecast = Indicators.LinearRegressionForecast(Source, Period);
            }
            protected override void OnTick()
            {
                Print("LRF Last Value = {0}", lrForecast.Result.LastValue);
            }
            
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.LinearRegressionRSquared(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            The R Squared or coefficient of determination indicator's main purpose is the confirm the strength of the market.
            </summary>
            <param name="source">The source data used for calculation.</param>
            <param name="periods">The value of the periods used for calculation.</param>
            <returns>Linear Regression R-Squared indicator instance</returns>
            <example>
            <code>
            
            private LinearRegressionRSquared rSquared;
            
            protected override void OnStart()
            {
                rSquared = Indicators.LinearRegressionRSquared(Source, Period);
            }
            protected override void OnTick()
            {
                Print("R squared is {0}", rSquared.Result.LastValue)
            }
            
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.PriceROC(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            The Price Rate of Change indicator is the percentage change of the current price and the price N periods ago.
            </summary>
            <param name="source">The source data used for calculation.</param>
            <param name="periods">The value of the periods used for calculation.</param>
            <returns>Price Rate of Change indicator instance</returns>
            <example>
            <code>
            [Parameter("Source")]
            public DataSeries Source { get; set; }
            
            [Parameter(DefaultValue = 14)]
            public int Period { get; set; }
            
            private PriceROC priceROC;
            
            protected override void OnStart()
            {
                priceROC = Indicators.PriceROC(Source, Period);
            }
            
            protected override void OnTick()
            {
               Print("{0}", priceROC.Result.LastValue);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Vidya(cAlgo.API.DataSeries,System.Int32,System.Double)">
            <summary>
            Volatility Index Dynamic Average (VIDYA) is a smoothing (moving average) based on dynamically changing periods.
            </summary>
            <param name="source">The source data used for calculation.</param>
            <param name="periods">The value of the periods used for calculation.</param>
            <param name="r2Scale">The value of the r-squared scale used for calculation.</param>
            <returns>Vidya indicator instance</returns>
            <example>
            <code>
            [Parameter]
            public DataSeries Price { get; set; }
            
            [Parameter("Period", DefaultValue = 14)]
            public int Period { get; set; }
            
            [Parameter("Sigma", DefaultValue = 0.65, MinValue = 0.1, MaxValue = 0.95)]
            public double Sigma { get; set; }
            
            private Vidya vidya;
            
            protected override void OnStart()
            {
                vidya = Indicators.Vidya(Price, Period, Sigma);
            }
            
            protected override void OnTick()
            {
                //If vidya is greater than a specific value
                if (vidya.Result.LastValue > Value)
                {
                    //Do something
                    Print("LastValue {0}", vidya.Result.LastValue);
                }
            
                //...
            }        
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.UltimateOscillator(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the Ultimate Oscillator indicator instance.
            </summary>
            <param name="cycle1">The value of the short periods used for calculation.</param>
            <param name="cycle2">The value of the medium periods used for calculation.</param>
            <param name="cycle3">The value of the long periods used for calculation.</param>
            <returns>UltimateOscillator indicator instance</returns>
            <example>
            <code>
             
            protected override void OnStart()
            {
               ultimateOscillator = Indicators.UltimateOscillator(Cycle1,Cycle2,Cycle3);
            }
            
            protected override void OnTick()
            {
               double currentValue = ultimateOscillator.Result.LastValue;
            
                //...
            }
             
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.UltimateOscillator(cAlgo.API.Internals.MarketSeries,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the UltimateOscillator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="cycle1">the short periods used in calculation</param>
            <param name="cycle2">the medium periods used in calculation</param>
            <param name="cycle3">the long periods used in calculation</param>
            <returns>UltimateOscillator indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.DirectionalMovementSystem(System.Int32)">
            <summary>
            The Directional Movement System is composed of three indicators that show if the market is trending and provide signals.
            </summary>
            <param name="periods">The value of the periods used for calculation.</param>
            <returns>Directional Movement System indicator instance</returns>
            <example>
            <code>
            private DirectionalMovementSystem _dms;
            private double _dIplus;
            private double _dIminus;
            
            [Parameter("ADX Period", DefaultValue = 14)]
            public int Period { get; set; }
             
            protected override void OnStart()
            {
                _dms = Indicators.DirectionalMovementSystem(Period);
            }
            
            protected override void OnTick()
            {
                _dIplus = _dms.DIPlus.LastValue;
                _dIminus = _dms.DIMinus.LastValue;
            
                if (_dIminus > _dIplus)
                {
                    // Do something
                }
            
                //...
            }
             
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.DirectionalMovementSystem(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the Directional Movement System Indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The periods used in calculation</param>
            <returns>Directional Movement System Indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ParabolicSAR(System.Double,System.Double)">
            <summary>
            The Parabolic SAR indicator identifies potential reversals in the market direction
            </summary>
            <param name="minAf">The minimum accumulation factor</param>
            <param name="maxAf">The maximum accumulation factor</param>
            <returns>ParabolicSAR indicator instance</returns>
            <example>
            <code>
            
            private ParabolicSAR parabolicSar;
            
            //...
            
            protected override void OnStart()
            {
               parabolicSar = Indicators.ParabolicSAR(minaf, maxaf);
            }
            
            protected override void OnTick()
            {
               double currentValue = parabolicSar.Result.LastValue;
            
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ParabolicSAR(cAlgo.API.Internals.MarketSeries,System.Double,System.Double)">
            <summary>
            Initializes the ParabolicSAR Indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="minAf">The minimum accumulation factor</param>
            <param name="maxAf">The maximum accumulation factor</param>
            <returns>ParabolicSAR Indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.StochasticOscillator(System.Int32,System.Int32,System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            The Stochastic Oscillator is a momentum indicator that aims to show price reversals by comparing the closing price to the price range.
            </summary>
            <param name="kPeriods">The value of the k periods used for calculation.</param>
            <param name="kSlowing">The value of the k slowing used for calculation.</param>
            <param name="dPeriods">The value of the d periods used for calculation.</param>
            <param name="maType">Type of the Moving Average.</param>
            <returns>Stochastic Oscillator indicator instance.</returns>
            <example>
            <code>
            
            private StochasticOscillator stochastic;
            
            //...
            
            protected override void OnStart()
            {
               stochastic = Indicators.StochasticOscillator(kPeriods, kSlowing, dPeriods, maType);
            }
            
            protected override void OnTick()
            {
               double percentD = stochastic.PercentD.LastValue;
               double percentK = stochastic.PercentK.LastValue;
            
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.StochasticOscillator(cAlgo.API.Internals.MarketSeries,System.Int32,System.Int32,System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            Initializes the StochasticOscillator Indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="kPeriods">The value of the k periods used for calculation.</param>
            <param name="kSlowing">The value of the k slowing used for calculation.</param>
            <param name="dPeriods">The value of the d periods used for calculation.</param>
            <param name="maType">Type of the Moving Average.</param>
            <returns>Stochastic Oscillator indicator instance.</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MomentumOscillator(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            The Momentum Oscillator measures the momentum of the price.
            </summary>
            <param name="source">The source data used for calculation.</param>
            <param name="periods">The value of the periods used for calculation.</param>
            <returns>Momentum Oscillator indicator instance</returns>
            <example>
            <code>
            
            private MomentumOscillator _momentum;
            
            protected override void OnStart()
            {
                _momentum = Indicators.MomentumOscillator(MarketSeries.Close, 14);
            }
            protected override void OnTick()
            {
                double momentum = _momentum.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MedianPrice">
            <summary>
            The Median indicator is the average of the high and the low.
            </summary>
            <returns>Median indicator instance</returns>
            <example>
            <code>
            private MedianPrice medianPrice;
            
            protected override void OnStart()
            {
                medianPrice = Indicators.MedianPrice();
            }
            protected override void OnTick()
            {
                double price = medianPrice.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MedianPrice(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the Median indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <returns>Median indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WilliamsAccumulationDistribution">
            <summary>
            The Williams Accumulation Distribution indicator shows bullish or bearish trends.
            </summary>
            <returns>Williams Accumulation Distribution indicator instance</returns>
            <example>
            <code>
            private WilliamsAccumulationDistribution williamsAD;
            
            protected override void OnStart()
            {
                williamsAD = Indicators.WilliamsAccumulationDistribution();
            }        
            protected override void OnTick()
            {
                double result = williamsAD.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WilliamsAccumulationDistribution(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the WilliamsAccumulationDistribution indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <returns>WilliamsAccumulationDistribution indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.FractalChaosBands(System.Int32)">
            <summary>
            The Fractal Chaos Bands indicator breaks down large trends into predictable patterns.
            </summary>
            <param name="periods">The period used for calculation.</param>
            <returns>Fractal Chaos Bands indicator instance</returns>
            <example>
            <code>
            private FractalChaosBands fractalChaosBands;
            
            [Parameter("Period", DefaultValue = 14)]
            public int Period { get; set; }
            
            protected override void Initialize()
            {        
                fractalChaosBands = Indicators.FractalChaosBands(Period);
            }
            public override void Calculate(int index)
            {            
                Print("Fractal Chaos Bands High = {0}", fractalChaosBands.High[index]); 
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.FractalChaosBands(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the FractalChaosBands indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The period used for calculation</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TypicalPrice">
            <summary>
            The Typical Price indicator is the average of the high, low, and closing prices.
            </summary>
            <returns>Typical Price indicator instance.</returns>
            <example>
            <code>
            private TypicalPrice typicalPriceIndicator;
            
            protected override void Initialize()
            {
                typicalPriceIndicator = Indicators.TypicalPrice();
            }        
            public override void Calculate(int index)
            {
                double typicalPriceValue = typicalPriceIndicator.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TypicalPrice(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the TypicalPrice indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <returns>TypicalPrice indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.CommodityChannelIndex(System.Int32)">
            <summary>
            The Commodity Channel Index identifies overbough and oversold conditions, price reversals and trend strength.
            </summary>
            <param name="periods">The value of the periods used for calculation.</param>
            <returns>Commodity Channel Index indicator instance.</returns>
            <example>
            <code>
            
            private CommodityChannelIndex commodityChannelIndex;
            //...
            protected override void OnStart()
            {
                commodityChannelIndex = Indicators.CommodityChannelIndex(Periods);
            }
            protected override void OnBar()
            {
                // Print the current value to the log
                Print("The current CCI value = {0}", 
                        commodityChannelIndex.Result.LastValue);
            }
            
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.CommodityChannelIndex(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the CommodityChannelIndex indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The periods used in calculation</param>
            <returns>CommodityChannelIndex indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.HistoricalVolatility(cAlgo.API.DataSeries,System.Int32,System.Int32)">
            <summary>
            The Historical Volatility indicator is derived from time series of past market prices.
            </summary>
            <param name="source">The source data used for calculation.</param>
            <param name="periods">The value of the periods used for calculation.</param>
            <param name="barHistory">The value of the bar history used for calculation.</param>
            <returns>Historical Volatility indicator instance</returns>
            <example>
            <code>
            protected override void OnStart()
            {
                historicalVolatility = Indicators.HistoricalVolatility
                    (MarketSeries.Close, Period, BarHistory);
            }
            protected override void OnBar()
            {
                double hv = historicalVolatility.Result.LastValue;
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MassIndex(System.Int32)">
            <summary>
            The Mass Index indicator is used to predict trend reversals.
            </summary>
            <param name="periods">The value of the periods used for calculation.</param>
            <returns>Mass Index indicator instance</returns>
            <example>
            <code>
            private MassIndex massIndex;
            
            protected override void Initialize()
            {
                massIndex = Indicators.MassIndex(14);
            }
            
            public override void Calculate(int index)
            {
                double currentMassIndex = massIndex.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MassIndex(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the MassIndex indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The periods used in calculation</param>
            <returns>MassIndex indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ChaikinVolatility(System.Int32,System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            The Chaikin Volatiliy indicator measures the trading range between the high and the low prices.
            </summary>
            <param name="periods">The value of the periods used for calculation.</param>
            <param name="rateOfChange">The value of the rage of change used for calculation.</param>
            <param name="maType">Type of the Moving Average.</param>
            <returns>Chaikin Volatiliy indicator instance</returns>
            <example>
            <code>
            
            private ChaikinVolatility chaikinVolatility;
            
            protected override void OnStart()
            {
                chaikinVolatility = Indicators.ChaikinVolatility(Periods, _roc, MaType);
            }
            protected override void OnBar()
            {
                // Print to log
                Print("The Current Chaikin Volatility Value is: {0}",
                         chaikinVolatility.Result.LastValue);
            }
            
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ChaikinVolatility(cAlgo.API.Internals.MarketSeries,System.Int32,System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            Initializes the ChaikinVolatility indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The value of the periods used for calculation.</param>
            <param name="rateOfChange">The value of the rage of change used for calculation.</param>
            <param name="maType">Type of the Moving Average.</param>
            <returns>Chaikin Volatiliy indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.DetrendedPriceOscillator(cAlgo.API.DataSeries,System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            The Detrended Price Oscillator shows intermediate overbought and oversold levels.
            </summary>
            <param name="source">The price source data used for calculation.</param>
            <param name="periods">The period used for calculation.</param>
            <param name="maType">Type of the Moving Average.</param>
            <returns>Detrended Price Oscillator indicator instance</returns>
            <example>
            <code> 
             
            private _detrendedPriceOscillator _dpoFast;
            private _detrendedPriceOscillator _dpoSlow;
            
            protected override void OnStart()
            {
                _dpoFast = Indicators.DetrendedPriceOscillator(Source, PeriodFast, MaType);
                _dpoSlow = Indicators.DetrendedPriceOscillator(Source, PeriodSlow, MaType);
            }
            
            protected override void OnBar()
            {
                if(_dpoFast.Result.Count &#60; 1)
                    return;
            
                int currentIndex = _dpoFast.Result.Count - 1;
                int prevIndex = currentIndex - 1;
            
                if (_dpoFast.Result[prevIndex] > _dpoSlow.Result[prevIndex])
                {
                    //Do something
                }
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.LinearRegressionIntercept(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            The Linear Regression Intercept can be used together with the Linear Regression Slope indicator to plot the Linear Regression Line.
            </summary>
            <param name="source">The price source data used for calculation.</param>
            <param name="periods">The period used for calculation.</param>
            <returns>The Linear Regression Intercept indicator instance</returns>
            <example>
            <code>
            [Parameter("Period", DefaultValue = 14)]
            public int Period { get; set; }
            
            protected override void OnStart()
            {
                // initialize a new instance of LinearRegressionIntercept indicator class
                _linearRegressionIntercept = Indicators.
                    LinearRegressionIntercept(MarketSeries.Close, Period);
            }
            protected override void OnBar(int index)
            {
                // Result of _linearRegressionIntercept at the current index
                double result = _linearRegressionIntercept.Result[index];
                // Print the current result to the log
                Print("Linear Regression Intercept at the current index is = {0}", result);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.LinearRegressionSlope(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            The Linear Regression Slope indicator is intended to measure the direction and strength of a trend.
            </summary>
            <param name="source">The price source data used for calculation.</param>
            <param name="periods">The period used for calculation.</param>
            <returns>The Linear Regression Slope indicator instance</returns>
            <example>
            <code>
            private LinearRegressionSlope slope;
            
            protected override void Initialize()
            {
                slope = Indicators.LinearRegressionSlope(MarketSeries.Close, 14);
            }
            public override void Calculate(int index)
            {
                double currentSlope = slope.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MacdHistogram(System.Int32,System.Int32,System.Int32)">
            <summary>
            The MACD Histogram is a momentum indicator measured by typically subtracting a 26 period moving average from a 12 period moving average.
            </summary>
            <param name="longCycle">The long period used calculation.</param>
            <param name="shortCycle">The short period used calculation.</param>
            <param name="signalPeriods">The period used for the calculation of the signal.</param>
            <returns>The Macd Histogram indicator instance</returns>
            <example>
            <code>
            private MacdHistogram macd;
            //...
            protected override void Initialize()
            {
                macd = Indicators.MacdHistogram(LongCycle, ShortCycle, Period);
                //...
            }
            public override void Calculate(int index)
            {
                double macdHistogramResult = macd.Histogram[index];        
                double macdSignalResult = macd.Signal[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MacdHistogram(cAlgo.API.DataSeries,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the MacdHistogram indicator instance for a specific source series
            </summary>
            <param name="source">The source series to be applied</param>
            <param name="longCycle">The long period used calculation.</param>
            <param name="shortCycle">The short period used calculation.</param>
            <param name="signalPeriods">The period used for the calculation of the signal.</param>
            <returns>The Macd Histogram indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MacdCrossOver(System.Int32,System.Int32,System.Int32)">
            <summary>
            The MACD Line with the Signal line and their difference as a histogram.
            </summary>
            <param name="longCycle">The long period used calculation.</param>
            <param name="shortCycle">The short period used calculation.</param>
            <param name="signalPeriods">The period used for the calculation of the signal.</param>
            <returns>The Macd CrossOver indicator instance</returns>
            <example>
            <code>
            //...
            private MacdCrossOver _macdCrossOver;
             
            protected override void Initialize()
            {
                _macdCrossOver = Indicators.MacdCrossOver(LongCycle, ShortCycle, Period);
            }
            
            public override void Calculate(int index)
            {
                double macd = _macdCrossOver.MACD[index];
                double signal = _macdCrossOver.Signal[index];
                //...
            }
            
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MacdCrossOver(cAlgo.API.DataSeries,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the MacdCrossOver indicator instance for a specific source series
            </summary>
            <param name="source">The source series to be applied</param>
            <param name="longCycle">The long period used calculation.</param>
            <param name="shortCycle">The short period used calculation.</param>
            <param name="signalPeriods">The period used for the calculation of the signal.</param>
            <returns>The MacdCrossOver indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.PriceOscillator(cAlgo.API.DataSeries,System.Int32,System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            The Price Oscillator calculates the difference between two moving averages.
            </summary>
            <param name="source">The price source data used for calculation.</param>
            <param name="longCycle">The long period used for calculation.</param>
            <param name="shortCycle">The short period used for calculation.</param>
            <param name="maType">Type of the Moving Average.</param>
            <returns>The Price Oscillator indicator instance.</returns>
            <example>
            <code>
            //...
            private PriceOscillator priceOscillator;
                    
            protected override void OnStart()
            {
                priceOscillator = Indicators.PriceOscillator
                    (MarketSeries.Close, 14, 5, MovingAverageType.Simple);
                //...
            }
            protected override void OnTick()
            {
                double result = priceOscillator.Result[index];
                //...
            }
             </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.RainbowOscillator(cAlgo.API.DataSeries,System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            The Rainbow Oscillator is a process of repetitive smoothing of simple moving averages resulting in a full spectrum of trends.
            </summary>
            <param name="source">The price source data used for calculation.</param>
            <param name="levels">The value of the levels used for calculation.</param>
            <param name="maType">The Moving Average type used for calculation.</param>
            <returns>The Rainbow Oscillator instance.</returns>
            <example>
            <code>
            //...
            private RainbowOscillator rainbow;
            
            protected override void Initialize()
            {
                MovingAverageType simpleMa = MovingAverageType.Simple;
                DataSeries close = MarketSeries.Close;
                rainbow = Indicators.RainbowOscillator(close, 9, simpleMa);
                //...
            }
            public override void Calculate(int index)
            {
                double currentValue = rainbow.Result[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.VerticalHorizontalFilter(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            The Vertical Horizontal Filter indicator measures the level of trend activity.
            </summary>
            <param name="source">The source data used for calculation.</param>
            <param name="periods">The periods used for calculation.</param>
            <returns>the Vertical Horizontal Filter indicator instance</returns>
            <example>
            <code>
            //...
            private VerticalHorizontalFilter VHFilter;
            //...
            protected override void Initialize()
            {
                VHFilter = Indicators.VerticalHorizontalFilter(Source, Periods);
                //...
            }        
            public override void Calculate(int index)
            {
                double result = VHFilter.Result[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WilliamsPctR(System.Int32)">
            <summary>
            The Williams Percent R indicator is a momentum indicator measuring overbought and oversold levels.
            </summary>
            <param name="periods">The period used for calculation.</param>
            <returns>The Williams Percent R indicator instance</returns>
            <example>
            <code>
            //...
            private WilliamsPctR williamsPctRSeries;
            //...
            protected override void OnStart()
            {
                williamsPctRSeries = Indicators.WilliamsPctR(14);
                //...
            }        
            protected override void OnTick()
            {
                double williamsPctRValue = williamsPctRSeries.Result[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WilliamsPctR(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the WilliamsPctR indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The period used in calculation</param>
            <returns>WilliamsPctR indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Trix(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            The Trix indicator shows the slope of a triple-smoothed exponential moving average. 
            </summary>
            <param name="source">The source data used for calculation.</param>
            <param name="periods">The periods used for the calculation.</param>
            <returns>The Trix indicator instance.</returns>
            <example>
            <code>
            private Trix trixSeries;
            
            protected override void OnStart()
            {
                trixSeries = Indicators.Trix(MarketSeries.Close, 14);
            }
            protected override void OnTick()
            {
                double trixValue = trixSeries.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WeightedClose">
            <summary>
            The WeightedClose indicator is an average of each day's price with extra weight given to the closing price.
            </summary>
            <remarks>Similar to the Median Price and Typical Price Indicators</remarks>
            <returns>WeightedClose indicator instance</returns>
            <example>
            <code>
            //...
            private WeightedClose weightedCloseSeries;
            //...
            protected override void OnStart()
            {
                weightedCloseSeries = Indicators.WeightedClose();
                //...
            }
            protected override void OnBar()
            {
                double weightedCloseValue = weightedCloseSeries.Result[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WeightedClose(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the WeightedClose indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <returns>WeightedClose indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ChaikinMoneyFlow(System.Int32)">
            <summary>
            The Chaikin Money Flow indicator measures the money flow volume over a specific period.
            </summary>
            <param name="periods">The period used for the calculation</param>
            <returns>Chaikin Money Flow indicator instance</returns>
            <example>
            <code>
            private ChaikinMoneyFlow _chaikinMoneyFlow;
            
            [Parameter("Period", DefaultValue = 21)]
            public int Period { get; set; }
            
            protected override void OnStart()
            {
               _chaikinMoneyFlow = Indicators.ChaikinMoneyFlow(Period);
            }
            protected override void OnBar()
            {
               var index = MarketSeries.Open.Count - 1;
               double currentChaikinMF = _chaikinMoneyFlow.Result[index];
               double previousChaikinMF = _chaikinMoneyFlow.Result[index-1];
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ChaikinMoneyFlow(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the ChaikinMoneyFlow indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The period used in the calculation</param>
            <returns>ChaikinMoneyFlow indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.EaseOfMovement(System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            The Ease Of Movement indicator relates the price change to the volume.
            </summary>
            <param name="periods">The period used for the calculation</param>
            <param name="maType">The moving average type used for the calculation</param>
            <returns> Ease Of Movement indicator instance</returns>
            <example>
            <code>
            private EaseOfMovement _easeOfMovement;
            
            [Parameter("Period", DefaultValue = 14)]
            public int Period { get; set; }
            
            [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
            public MovingAverageType MAType { get; set; }
            
            
            protected override void OnStart()
            {
               _easeOfMovement = Indicators.EaseOfMovement(Period, MAType);
            }
            protected override void OnBar()
            {
               // get EaseOfMovement value
               var index = MarketSeries.Open.Count - 1;
               double currentEaseOfMovement = _easeOfMovement.Result[index];
               double previousEaseOfMovement = _easeOfMovement.Result[index-1];
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.EaseOfMovement(cAlgo.API.Internals.MarketSeries,System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            Initializes the EaseOfMovement indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The period used for the calculation</param>
            <param name="maType">The moving average type used for the calculation</param>
            <returns>EaseOfMovement indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MoneyFlowIndex(System.Int32)">
            <summary>
            The Money Flow Index measures the strength of the money flow.
            </summary>
            <param name="periods">The period used for the calculation</param>
            <returns>Money Flow Index indicator instance</returns>
            <example>
            <code>
            private MoneyFlowIndex _moneyFlow;
            
            [Parameter("Period", DefaultValue = 21)]
            public int Period { get; set; }
            
            protected override void OnStart()
            {
                _moneyFlow = Indicators.MoneyFlowIndex(Period);
            }
            protected override void OnBar()
            {
                var currentValue = _moneyFlow.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MoneyFlowIndex(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the MoneyFlowIndex instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The period used for the calculation</param>
            <returns>MoneyFlowIndex instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.NegativeVolumeIndex(cAlgo.API.DataSeries)">
            <summary>
            The Negative Volume Index is a calculation of the percentage change in price on days when trading volume declines.
            </summary>
            <param name="source">The price source data used for the calculation.</param>
            <returns>Negative Volume Index indicator instance</returns>
            <example>
            <code>
            private NegativeVolumeIndex _negativeVolume;
            
            [Parameter]
            public DataSeries Source { get; set; }
            
            [Output("Main")]
            public IndicatorDataSeries Result { get; set; }
            
            protected override void Initialize()
            {
               _negativeVolume = Indicators.NegativeVolumeIndex(Source);
            }
            public override void Calculate(int index)
            {
               // Display Result of Indicator
               Result[index] = _negativeVolume.Result[index];
            }
            </code>
            </example>    
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.OnBalanceVolume(cAlgo.API.DataSeries)">
            <summary>
            The On Balance Volume indicator relates price and volume.
            </summary>
            <param name="source">The price source data used for the calculation.</param>
            <returns>On Balance Volume indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.PositiveVolumeIndex(cAlgo.API.DataSeries)">
            <summary>
            The Positive Volume Index is a calculation of the percentage change in price on days when trading volume increased.
            </summary>
            <param name="source">The price source data used for the calculation.</param>
            <returns>Positive Volume Index indicator instance</returns>
            <example>
            <code>
            private PositiveVolumeIndex _positiveVolume;
            
            [Parameter]
            public DataSeries Source { get; set; }
            
            protected override void OnStart()
            {
                _positiveVolume = Indicators.PositiveVolumeIndex(Source);
            }
            protected override void OnBar()
            {
                var currentValue = _positiveVolume.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.PriceVolumeTrend(cAlgo.API.DataSeries)">
            <summary>
            The Price Volume Trend indicator shows the relationship between price and volume.
            </summary>
            <param name="source">The price source data used for the calculation.</param>
            <returns>Price Volume Trend indicator instance</returns>
            <example>
            <code>
            private PriceVolumeTrend _priceVolumeTrend;
            
            [Parameter]
            public DataSeries Source { get; set; }
            
            protected override void OnStart()
            {
                _priceVolumeTrend = Indicators.PriceVolumeTrend(Source);
            }
            protected override void OnBar()
            {
                var currentValue = _priceVolumeTrend.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TradeVolumeIndex(cAlgo.API.DataSeries)">
            <summary>
            Trade Volume Index indicator measures the amount of money flowing in and out of an asset.
            </summary>
            <param name="source">The price source data used for the calculation.</param>
            <returns>Trade Volume Index indicator instance</returns>
            <example>
            <code>
            private TradeVolumeIndex _tradeVolume;
            
            [Parameter]
            public DataSeries Source { get; set; }
            
            protected override void OnStart()
            {
                _tradeVolume = Indicators.TradeVolumeIndex(Source);
            }
            protected override void OnBar()
            {
                var currentValue = _tradeVolume.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.VolumeOscillator(System.Int32,System.Int32)">
             <summary>
             The Volume Oscillator indicator is the difference between two moving averages.
             </summary>
             <param name="shortTerm">The fast moving average period</param>
             <param name="longTerm">The slow moving average period</param>
             <returns>Volume Oscillator indicator instance</returns>
             <example>
             <code>
             private VolumeOscillator _volumeOscillator;
             
             [Parameter("Short Term", DefaultValue = 9)]
             public int ShortTerm { get; set; }
            
             [Parameter("Long Term", DefaultValue = 21)]
             public int LongTerm { get; set; }
            	
             protected override void OnStart()
             {
                 _volumeOscillator = Indicators.VolumeOscillator(ShortTerm, LongTerm);;
             }
             protected override void OnBar()
             {
                 var currentValue = _volumeOscillator.Result.LastValue;
                 //...
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.VolumeOscillator(cAlgo.API.Internals.MarketSeries,System.Int32,System.Int32)">
            <summary>
            Initializes the VolumeOscillator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="shortTerm">The fast moving average period</param>
            <param name="longTerm">The slow moving average period</param>
            <returns>VolumeOscillator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.VolumeROC(System.Int32)">
            <summary>
            Volume Rate of Change Indicator measures the rate of change of the tick volume.
            </summary>
            <param name="periods">The period used for the calculation</param>
            <returns>
            The Volume ROC indicator instance.
            </returns>
            <example>
            <code>
            //...
            private VolumeROC _volumeROC;
            //...
            [Parameter("Period", DefaultValue = 21)]
            public int Period { get; set; }
            
            protected override void OnStart()
            {
                _volumeROC = Indicators.VolumeROC(Period);
            }
            protected override void OnBar()
            {
                var currentValue = _volumeROC.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.VolumeROC(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the VolumeROC instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The period used for the calculation</param>
            <returns>VolumeROC instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AverageTrueRange(System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            Average true range. An indicator providing the degree of price volatility.
            </summary>
            <remarks>
            Average true range (ATR) is a technical analysis volatility indicator originally developed by J. Welles Wilder. The indicator provides the degree of price volatility. The average true range is an N-day exponential moving average of the true range values. Wilder recommended a 14-period smoothing.
            </remarks>
            <param name="periods">Period of moving average to use for Average True Range caluclation.</param>
            <param name="maType">Type of moving average to use for Average True Range caluclation.</param>
            <returns>Average True Range indicator instance</returns>
            <example>
            <code>
            private AverageTrueRange atrIndicator;
            
            [Parameter(DefaultValue = 20)]
            public int Period { get; set; }
            
            [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
            public MovingAverageType MAType { get; set; }
            
            [Parameter(DefaultValue = 0.002)]
            public double ATRValue { get; set; }
            
            protected override void OnStart()
            {
                atrIndicator = Indicators.AverageTrueRange(Period, MAType);
            }
            
            protected override void OnTick()
            {
                //If atrIndicator last value is greater than the ATRValue input
                if (atrIndicator.Result.LastValue > ATRValue)
                {
                    // Do something
                }
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AverageTrueRange(cAlgo.API.Internals.MarketSeries,System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            Initializes the AverageTrueRange instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">Period of moving average to use for Average True Range caluclation.</param>
            <param name="maType">Type of moving average to use for Average True Range caluclation.</param>
            <returns>Average True Range indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.DonchianChannel(System.Int32)">
            <summary>
            The Donchian channel is a volatility indicator forming a channel between the highest high and the lowest low of the chosen period.
            </summary>
            <remarks>
            The Donchian channel is mainly used for providing entry signals. A long is established when the price closes above the Donchian Channel. Conversely, if it closes below, then a short is established.
            </remarks>
            <param name="periods">Period of Calculation of the Dochian Channel</param>
            <returns>Donchian Channel indicator instance</returns>
            <example>
            <code>
            //...
            private DonchianChannel donchian;
            //...
            protected override void OnStart()
            {
                donchian = Indicators.DonchianChannel(Period);            
            }
            protected override void OnBar()
            {
                Print("Top Value = {0}", donchian.Top.LastValue);
                Print("Middle Value = {0}", donchian.Middle.LastValue);
                Print("Bottom Value = {0}", donchian.Bottom.LastValue);
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.DonchianChannel(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the DonchianChannel instance for a specific timeframe
            </summary>
            <param name="marketSeries">MarketSeries of the Timeframe to be applied</param>
            <param name="periods">Period used in the calculation</param>
            <returns>DonchianChannel instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.IchimokuKinkoHyo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Ichimoku Kinko Hyo Indicator is a moving average based trend identification system.
            </summary>
            <remarks>
            Ichimoku Kinko Hyo Indicator contains more data points than standard candlestick charts and thus provides a clearer picture of potential price action.
            </remarks>
            <param name="tenkanSenPeriods">The period used for the Tenkan Sen</param>
            <param name="kijunSenPeriods">The period used for the Kijun Sen</param>
            <param name="senkouSpanBPeriods">The period used for the Senkou Span B</param>
            <returns>Ichimoku Kinko Hyo Indicator instance</returns>
            <example>
            <code>
            //...
            private IchimokuKinkoHyo ichimokuKinkoHyo;
            //...
            protected override void OnStart()
            {
                ichimokuKinkoHyo = Indicators.IchimokuKinkoHyo
                    (tenkanSenPeriods, kijunSenPeriods, senkouSpanBPeriods);            
            }
            protected override void OnBar()
            {
                Print("ChikouSpan Value = {0}", ichimokuKinkoHyo.ChikouSpan.LastValue);
                Print("KijunSen Value = {0}", ichimokuKinkoHyo.KijunSen.LastValue);
                Print("SenkouSpanA Value = {0}", ichimokuKinkoHyo.SenkouSpanA.LastValue);
                Print("SenkouSpanB Value = {0}", ichimokuKinkoHyo.SenkouSpanB.LastValue);
                Print("TenkanSen Value = {0}", ichimokuKinkoHyo.TenkanSen.LastValue);
            
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.IchimokuKinkoHyo(cAlgo.API.Internals.MarketSeries,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the IchimokuKinkoHyo indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">MarketSeries of the Timeframe to be applied</param>
            <param name="tenkanSenPeriods">The period used for the Tenkan Sen</param>
            <param name="kijunSenPeriods">The period used for the Kijun Sen</param>
            <param name="senkouSpanBPeriods">The period used for the Senkou Span B</param>
            <returns>Ichimoku Kinko Hyo Indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AwesomeOscillator">
            <summary>
            Initializes the AwesomeOscillator indicator instance
            </summary>
            <returns>AwesomeOscillator indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AcceleratorOscillator">
            <summary>
            Initializes the AcceleratorOscillator indicator instance
            </summary>
            <returns>AcceleratorOscillator indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AwesomeOscillator(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the AwesomeOscillator instance for specific timeframe
            </summary>
            <param name="marketSeries">MarketSeries of the Timeframe to be applied</param>
            <returns>AwesomeOscillator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AcceleratorOscillator(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the AcceleratorOscillator instance for specific timeframe
            </summary>
            <param name="marketSeries">MarketSeries of the Timeframe to be applied</param>
            <returns>AcceleratorOscillator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.KeltnerChannels(System.Int32,cAlgo.API.MovingAverageType,System.Int32,cAlgo.API.MovingAverageType,System.Double)">
            <summary>
            Initializes the Keltner Channels indicator instance
            </summary>
            <param name="maPeriod">Moving Average Period</param>
            <param name="maType">Moving Average Type</param>
            <param name="atrPeriod">Average True Range Period</param>
            <param name="atrMaType">Average True Range MAType</param>
            <param name="bandDistance">ATR Multiplier</param>
            <returns>KeltnerChannels</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.KeltnerChannels(cAlgo.API.Internals.MarketSeries,System.Int32,cAlgo.API.MovingAverageType,System.Int32,cAlgo.API.MovingAverageType,System.Double)">
            <summary>
            Initializes the Keltner Channels indicator instance for specific MarketSeries
            </summary>
            <param name="marketSeries">Specific MarketSeries to be applied</param>
            <param name="maPeriod">Moving Average Period</param>
            <param name="maType">Moving Average Type</param>
            <param name="atrPeriod">Average True Range Period</param>
            <param name="atrMaType">Average True Range MAType</param>
            <param name="bandDistance">ATR Multiplier</param>
            <returns>KeltnerChannels</returns>
        </member>
        <member name="T:cAlgo.API.Internals.INotifications">
            <summary>
            It is an interface that represents all Notifications.
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.INotifications.PlaySound(System.String)">
            <summary>
            Plays a notification sound.
            </summary>
            <remarks>
            In indicators, use it with IsRealTime/IsLastBar, for real-time values.
            </remarks>
            <example>
            <code>
            Notifications.PlaySound(@&quot;C:\SampleDestination\SampleSound.mp3&quot;);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.INotifications.SendEmail(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a notification email message.
            </summary>
            <remarks>        
            Use correct settings before trying to send an email notification.
            You can do that in Preferences -&gt; Email Settings
            </remarks>
            <param name="from">Sender's Address</param>
            <param name="to">Recipient's Address</param>
            <param name="subject">Email Subject</param>
            <param name="text">Email Body</param>
            <example>
            <code>
            Notifications.SendEmail(&quot;from@email.com&quot;, &quot;to@email.com&quot;, 
                        &quot;Email Notification Subject&quot;, &quot;Email body&quot;);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Internals.IServer">
            <summary>
            Server related information.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.IServer.Time">
            <summary>
            Returns the server time.
            </summary>
            <example>
            <code>        
            protected override void OnTick()
            {
                Print("The Server Time is: {0}", Server.Time);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IServer.IsConnected">
            <summary>
            Indicates current connection status with the server
            </summary>
        </member>
        <member name="E:cAlgo.API.Internals.IServer.Connected">
            <summary>
            Event raised when successfully connected with the server
            </summary>
        </member>
        <member name="E:cAlgo.API.Internals.IServer.Disconnected">
            <summary>
            Disconnected - Event raised when connection with the server is lost
            </summary>
        </member>
        <member name="T:cAlgo.API.Internals.MarketSeries">
            <summary>
            Provides access to the market data such as the DataSeries Open, High, Low, Close.
            </summary>
            <remarks>
            Access to the Open, Hight, Low, Close, Median, Typical, Weighted price series
            as well as OpenTime for the current symbol and time frame.
            </remarks>
            <example>
            <code>
            //Accessing historical OHLC prices from Indicators 
            double close = MarketSeries.Close[index];
            double high = MarketSeries.High[index];
            double low = MarketSeries.Low[index];
            double open = MarketSeries.Open[index];
            </code>
            </example>
            <example>
            <code>
            //Accessing historical O-H-L-C prices from Robots
            int index = MarketSeries.Close.Count-1;
            double close = MarketSeries.Close[index];
            double high = MarketSeries.High[index];
            double low = MarketSeries.Low[index];
            double open = MarketSeries.Open[index];
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.Open">
            <summary>
            Open price series of historical trendbars.
            </summary>
            <example>
            <code>
            
            [Parameter(DefaultValue = 14)]
            public int period { get; set; }
            
            private SimpleMovingAverage smaopen
            
            protected override void Initialize()
            {
                //Simple moving average of the Open price series for the specified period
                smaopen = Indicators.SimpleMovingAverage(MarketSeries.Open, period);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.High">
            <summary>
            Highest price series of historical trendbars.
            </summary>
            <example>
            <code>
            
            [Parameter(DefaultValue = 14)]
            public int period { get; set; }
            
            private SimpleMovingAverage smahigh
            
            protected override void Initialize()
            {
                //Simple moving average of the High price series for the specified period
                smahigh = Indicators.SimpleMovingAverage(MarketSeries.High,period);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.Low">
            <summary>
            Low price series of historical trendbars.
            </summary>
            <example>
            <code>
            
            [Parameter(DefaultValue = 14)]
            public int period { get; set; }
            
            private SimpleMovingAverage smaLow
            
            protected override void Initialize()
            {
                //Simple moving average of the Low price series for the specified period
                smaLow = Indicators.SimpleMovingAverage(MarketSeries.Low, period);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.Close">
             <summary>
             Close price series of historical trendbars.
             </summary>
             <example>
             <code>
              
             [Parameter(DefaultValue = 14)]
             public int Period { get; set; }
            
             private SimpleMovingAverage smaClose
             
             protected override void Initialize()
             {
                 //Simple moving average of the Close prices series for the specified period
                 smaClose = Indicators.SimpleMovingAverage(MarketSeries.Close, Period);
             }
             
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.TickVolume">
            <summary>
            Volume of Ticks for Historical Trendbars
            </summary>
            <example>
            <code>
            
            public override void Calculate(int index)
            {
                double currentVolume = MarketSeries.TickVolume[index];
                double previousVolume = MarketSeries.TickVolume[index-1];
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.Median">
            <summary>
            Median price series of historical trendbars.
            </summary>
            <example>
            <code>
            
            protected override void OnBar()
            {
                int currentIndex = MarketSeries.Median.Count - 1;
                var currentTypical = MarketSeries.Median[currentIndex];     //The current Median price
                var previousTypical = MarketSeries.Median[currentIndex - 1]; //The previous Median price
                if (currentTypical &#60; previousTypical)
                {
                    // Do something
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.Typical">
            <summary>
            Typical price series of historical trendbars.
            </summary>
            <example>
            <code>
            
            public override void Calculate(int index)
            {
                if (IsRealTime)
                {
                    var currentTypical = MarketSeries.Typical[index];
                    var previousTypical = MarketSeries.Typical[index - 1];
                    if (currentTypical &#60; previousTypical)
                    {
                        Print("Current typical price is less than the previous one");
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.Weighted">
            <summary>
            Weighted price series of historical trendbars.
            </summary>
            <example>
            <code>
            protected override void OnBar()
            {
                int currentIndex = MarketSeries.Weighted.Count - 1;
                var currentWeighted = MarketSeries.Weighted[currentIndex];     //The current Weighted price
                var previousWeighted = MarketSeries.Weighted[currentIndex - 1]; //The previous Weighted price
                if (currentWeighted &#60;= previousWeighted)
                {
                    // Do something
                }
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.WeightedClose">
            <summary>
            Weighted price series of historical trendbars.
            </summary>
            <example>
            <code>
            protected override void OnBar()
            {
                int currentIndex = MarketSeries.Weighted.Count - 1;
                var currentWeighted = MarketSeries.Weighted[currentIndex];     //The current Weighted price
                var previousWeighted = MarketSeries.Weighted[currentIndex - 1]; //The previous Weighted price
                if (currentWeighted &#60;= previousWeighted)
                {
                    // Do something
                }
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.OpenTime">
            <summary>
            Open Time series of historical trendbars.
            </summary>
            <example>
            <code>
            
            //Accessing historical Open Times
            Print("{0}", MarketSeries.OpenTime[index]);     
            Print("{0}", MarketSeries.OpenTime[index].Day); 
            Print("{0}", MarketSeries.OpenTime[index].Hour);
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.TimeFrame">
            <summary>
            The timeframe that the MarketSeries is subscribed to
            </summary>
            <example>
            <code>
            Print("{0}", MarketSeries.TimeFrame);   
            </code>
            </example>
            <example>
            <code>
            Symbol eurUsd = MarketData.GetSymbol("EURUSD");
            MarketSeries seriesEurUsd = MarketData.GetSeries(eurUsd, TimeFrame.Daily);
            
            Print(seriesEurUsd.TimeFrame);
            </code>
            </example>       
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.SymbolCode">
            <summary>
            The code representation of the symbol that the MarketSeries is subscribed to
            </summary>
            <example>
            <code>
            Print("{0}", MarketSeries.SymbolCode);   
            </code>
            </example>
            <example>
            <code>
            Symbol eurUsd = MarketData.GetSymbol("EURUSD");
            MarketSeries seriesEurUsd = MarketData.GetSeries(eurUsd, TimeFrame.Daily);
            Print(seriesEurUsd.SymbolCode);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Internals.Symbol">
            <summary>
                Represents a currency pair
            </summary>
            <example>
                <code>
            	
             double bid = Symbol.Bid;
            	double ask = Symbol.Ask;
            	string code = Symbol.Code;
            	int digits = Symbol.Digits;
            	double pipSize = Symbol.PipSize;
            	double pointSize = Symbol.PointSize;
            	double spread = Symbol.Spread;
            	
             </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.Ask">
            <summary>
                The current ask price for this symbol.
            </summary>
            <remarks>
                The seller's price for the symbol.
            </remarks>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("Ask Price: {0}", Symbol.Ask);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.Bid">
            <summary>
                The current bid price for this symbol.
            </summary>
            <remarks>
                The buyer's price for the symbol.
            </remarks>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("Bid Price: {0}", Symbol.Bid);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.Spread">
            <summary>
                The current spread of this symbol.
            </summary>
            <remarks>
                The difference between the Ask and the Bid price for the symbol.
                (see <see cref="P:cAlgo.API.Internals.Symbol.Ask" /> and <see cref="P:cAlgo.API.Internals.Symbol.Bid" />)
            </remarks>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("The Spread of the symbol is: {0}", Symbol.Spread);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.Code">
            <summary>
                Represents the trading pair code, e.g. "EURUSD".
            </summary>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("This strategy is trading the symbol: {0}", Symbol.Code);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.PipSize">
            <summary>
                Pip size for current symbol.
            </summary>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("The current symbol has pip size of: {0}", Symbol.PipSize);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.Digits">
            <summary>
                The number of digits for the symbol.
            </summary>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("The number of Digits the current symbol  has is: {0}", Symbol.Digits);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.PointSize">
            <summary>
                Point size for the current symbol.
            </summary>
            <remarks>
                If the symbol is a 5 digit symbol, the point size is 0.00001.
            </remarks>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("The current symbol has PointSize: {0}", Symbol.PointSize);
            }
             </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.TickSize">
            <summary>
                Tick size for the current symbol.
            </summary>
            <remarks>
                If the symbol is a 5 digit symbol, the tick size is 0.00001.
            </remarks>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("The current symbol has TickSize: {0}", Symbol.TickSize);
            }
             </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.VolumeMin">
            <summary>
                The minimum tradable amount.
            </summary>
            <example>
                <code>
            if(volume &lt; Symbol.VolumeMin)
            {
                Print("The minimum volume is {0}", Symbol.VolumeMin);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.VolumeMax">
            <summary>
                The maximum tradable amount.
            </summary>
            <example>
                <code>
            if(Symbol.NormalizeVolume(volume, RoundingMode.Down) &lt;= Symbol.VolumeMax)
            {
                volume = Symbol.NormalizeVolume(volume, RoundingMode.Down);
                ExecuteMarketOrder(TradeType.Buy, Symbol, volume);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.VolumeStep">
            <summary>
                The minimum trade amount increment.
            </summary>
            <example>
                <code>
            if(volume + Symbol.VolumeStep &lt;= Symbol.VolumeMax)
            {
                volume += Symbol.VolumeStep;
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.VolumeInUnitsMin">
            <summary>
                The minimum tradable amount.
            </summary>
            <example>
                <code>
            if(volume &lt; Symbol.VolumeInUnitsMin)
            {
                Print("The minimum volume is {0}", Symbol.VolumeInUnitsMin);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.VolumeInUnitsMax">
            <summary>
                The maximum tradable amount.
            </summary>
            <example>
                <code>
            if(Symbol.NormalizeVolumeInUnits(volume, RoundingMode.Down) &lt;= Symbol.VolumeInUnitsMax)
            {
                volume = Symbol.NormalizeVolumeInUnits(volume, RoundingMode.Down);
                ExecuteMarketOrder(TradeType.Buy, Symbol, volume);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.VolumeInUnitsStep">
            <summary>
                The minimum trade amount increment.
            </summary>
            <example>
                <code>
            if(volume + Symbol.VolumeInUnitsStep &lt;= Symbol.VolumeInUnitsMax)
            {
                volume += Symbol.VolumeInUnitsStep;
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.PipValue">
            <summary>
                The monetary value of one pip.
            </summary>
            <example>
                <code>
            var volume = ((Account.Balance*Risk)/StopLoss)/Symbol.PipValue;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.TickValue">
            <summary>
                The monetary value of one tick.
            </summary>
            <example>
                <code>
            var volume = ((Account.Balance*Risk)/StopLoss)/Symbol.TickValue;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.LotSize">
            <summary>
            Size of 1 lot in units of the base currency.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.UnrealizedNetProfit">
            <summary>
            Sum of the unrealized Net profits of the positions of this Symbol.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.UnrealizedGrossProfit">
            <summary>
            Sum of the unrealized Gross profits of the positions of this Symbol
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.Symbol.NormalizeVolume(System.Double,cAlgo.API.RoundingMode)">
            <summary>
                Round the volume to the amount suitable for a trade.
            </summary>
            <param name="volume">Amount to normalize</param>
            <param name="roundingMode">Rounding method</param>
            <returns>Normalized volume</returns>
            <example>
                <code>
            volume = Symbol.NormalizeVolume(volume, RoundingMode.Down);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.Symbol.NormalizeVolumeInUnits(System.Double,cAlgo.API.RoundingMode)">
            <summary>
                Round the volume to the amount suitable for a trade.
            </summary>
            <param name="volume">Amount to normalize</param>
            <param name="roundingMode">Rounding method</param>
            <returns>Normalized volume</returns>
            <example>
                <code>
            volume = Symbol.NormalizeVolumeInUnits(volume, RoundingMode.Down);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.Symbol.QuantityToVolume(System.Double)">
            <summary>
            Convert Quantity (in lots) to Volume in units of base currency.
            </summary>
            <param name="quantity">Quantity (lots)</param>
            <returns>Volume in units of base currency</returns>
        </member>
        <member name="M:cAlgo.API.Internals.Symbol.QuantityToVolumeInUnits(System.Double)">
            <summary>
            Convert Quantity (in lots) to Volume in units of base currency.
            </summary>
            <param name="quantity">Quantity (lots)</param>
            <returns>Volume in units of base currency</returns>
        </member>
        <member name="M:cAlgo.API.Internals.Symbol.VolumeToQuantity(System.Int64)">
            <summary>
            Convert Volume in units of base currency to Quantity (in lots).
            </summary>
            <param name="volume"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.Symbol.VolumeInUnitsToQuantity(System.Double)">
            <summary>
            Convert Volume in units of base currency to Quantity (in lots).
            </summary>
            <param name="volume"></param>
            <returns></returns>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.Leverage">
            <summary>
            Maximum leverage for the instrument.
            </summary>
            <example>
            <code>
            var leverage = Math.Min(Symbol.Leverage, Account.Leverage);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.PreciseLeverage">
            <summary>
            Maximum leverage for the instrument.
            </summary>
            <example>
            <code>
            var leverage = Math.Min(Symbol.Leverage, Account.Leverage);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.DynamicLeverage">
            <summary>
            Dynamic leverage tiers for symbol. 
            </summary>
            <example>
            <code>
            var symbolLeverage = Symbol.DynamicLeverage[0]; 
            var realLeverage = Math.Min(symbolLeverage, Account.Leverage);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.MarketHours">
            <summary>
            Access to the symbol's trading sessions schedule.
            </summary>
        </member>
        <member name="T:cAlgo.API.Internals.ITrade">
            <summary>
            An accessor to subsystem for orders management (create order requests and execute trades).
            </summary>
            <example>
            <code>
            bool tradeisexecuting = Trade.IsExecuting;
            if(tradeisexecuting)//If there is another trade execution at this instance
            {
                //Do something, usually return;
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.ITrade.IsExecuting">
            <summary>
            Gets value indicating whether asynchronous operation is executing.
            </summary>
            <example>
            <code>
            protected override void OnTick()
            {
                
                // This prevents the robot to run 
                // during an asynchronous operation. 
                // e.g. An order has been sent and 
                // you are waiting for confirmation
                
                if(Trade.IsExecuting)
                	return;
                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.Close(cAlgo.API.Position)">
            <summary>
            Sends request to close the specified order.
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.CreateBuyMarketOrder(cAlgo.API.Internals.Symbol,System.Int32)">
            <summary>
            Creates buy market order.
            </summary>
            <param name="symbol">A subscribed symbol</param>
            <param name="volume">The trade monetary amount</param>
            <example>
            <code>
            private void Buy()
            {
                Trade.CreateBuyMarketOrder(Symbol, 10000);
            }
            </code>
            </example>
            <example>
            <code>
            
            Symbol USDCAD;
            Position position;
            
            protected override void OnStart()
            {
                USDCAD = MarketData.GetSymbol("USDCAD");
            }
            
            protected override void OnBar()
            {
                if (position == null)
                    Trade.CreateBuyMarketOrder(USDCAD, 100000);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.CreateSellMarketOrder(cAlgo.API.Internals.Symbol,System.Int32)">
            <summary>
            Creates sell market order.
            </summary>
            <param name="symbol">A subscribed symbol</param>
            <param name="volume">The trade monetary amount</param>
            <example>
            <code>
            protected override void OnTick()
            {
                var index = smaFast.Result.Count - 1;
                if (smaFast.Result[index-1] &lt; smaSlow.Result[index-2])
                {
                    Trade.CreateSellMarketOrder(Symbol, 10000);
                }
            }
            </code>
            </example>
            <example>
            <code>
            private Symbol EURUSD;
            
            protected override void OnStart()
            {
               EURUSD = MarketData.GetSymbol("EURUSD");
            }
            protected override void OnTick()
            {
                if (EURUSD.Bid >= value)
                {
                    Trade.CreateSellMarketOrder(EURUSD, 10000);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.CreateMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int32)">
            <summary>
            Creates buy/sell market order.
            </summary>
            <param name="tradeType"><see cref="F:cAlgo.API.TradeType.Buy"/> or <see cref="F:cAlgo.API.TradeType.Sell"/> command.</param>
            <param name="symbol">A subscribed symbol</param>
            <param name="volume">The trade monetary amount</param>
             <example>
             <code>
            protected override void OnBar()
            {
                if (Account.Positions.Count &lt; 2)
                {
                    Trade.CreateMarketOrder(TradeType.Buy, Symbol, 10000);
                }
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                var EURUSD = MarketData.GetSymbol("EURUSD");
                Trade.CreateMarketOrder(TradeType.Buy, EURUSD, 10000);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.CreateBuyLimitOrder(cAlgo.API.Internals.Symbol,System.Int32,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Creates a buy limit order.
            </summary>
            <param name="symbol">Symbol to create order, use the Symbol property to create order for a subscribed symbol.</param>
            <param name="volume">Volume to buy.</param>
            <param name="targetPrice">Target price for limit order.</param>
            <param name="stopLoss">Stop loss price. Use null to create order without stop loss.</param>
            <param name="takeProfit">Take profit price. Use null to create order without take profit.</param>
            <param name="expiration">Expiration date and time. Use null to create order without expiration.</param>
            <example>
            <code>
            protected override void OnStart()
            {
                var price = Symbol.Bid-Symbol.PipSize;
                Trade.CreateBuyLimitOrder(Symbol, 10000, price ,null, null, null);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                var EURUSD = MarketData.GetSymbol("EURUSD");
                var price = EURUSD.Bid - EURUSD.PipSize;
            
                Trade.CreateBuyLimitOrder(EURUSD, 10000, price, null, null, null);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.CreateSellLimitOrder(cAlgo.API.Internals.Symbol,System.Int32,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Creates sell limit order.
            </summary>
            <param name="symbol">Symbol to create order, use the Symbol property to create order for a subscribed symbol.</param>
            <param name="volume">Volume to sell.</param>
            <param name="targetPrice">Target price for limit order.</param>
            <param name="stopLoss">Stop loss price. Use null to create order without stop loss.</param>
            <param name="takeProfit">Take profit price. Use null to create order without take profit.</param>
            <param name="expiration">Expiration date and time. Use null to create order without expiration.</param>
            <example>
            <code>
            protected override void OnTick()
            {
                if (condition)
                {
                    Trade.CreateSellLimitOrder(Symbol, 10000, price,
                                                stopLoss,takeProfit,expiration);
                }
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                var EURUSD = MarketData.GetSymbol("EURUSD");
            
                Trade.CreateSellLimitOrder(EURUSD, Volume, Price, null, null, null);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.CreateBuyStopOrder(cAlgo.API.Internals.Symbol,System.Int32,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Creates buy stop order.
            </summary>
            <param name="symbol">Symbol to create order, use the Symbol property to create order for a subscribed symbol.</param>
            <param name="volume">Volume to sell.</param>
            <param name="targetPrice">Target price for stop order.</param>
            <param name="stopLoss">Stop loss price. Use null to create order without stop loss.</param>
            <param name="takeProfit">Take profit price. Use null to create order without take profit.</param>
            <param name="expiration">Expiration date and time. Use null to create order without expiration.</param>
            <example>
            <code>
            protected override void OnStart()
            {
                var volume = 10000;
                
                var price = Symbol.Bid + Symbol.PipSize;
                var stopLoss = Symbol.Bid - 100*Symbol.PipSize;
                var takeProfit = Symbol.Bid + 100*Symbol.PipSize;
            
                Trade.CreateBuyStopOrder(Symbol, volume, price,
                                            stopLoss, takeProfit, null);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                var volume = 10000;
                var EURUSD = MarketData.GetSymbol("EURUSD");
                var price = EURUSD.Bid + EURUSD.PipSize;
                var stopLoss = EURUSD.Bid - 100*EURUSD.PipSize;
                var expiration = DateTime.Now.AddHours(12);
            
                Trade.CreateBuyStopOrder(EURUSD, volume, price, stopLoss, null, expiration);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.CreateSellStopOrder(cAlgo.API.Internals.Symbol,System.Int32,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Creates sell stop order.
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Modifies position.
            </summary>
            <param name="position">Position to modify.</param>
            <param name="stopLoss">Stop loss price. Use null to leave position without stop loss.</param>
            <param name="takeProfit">Take profit price. Use null to leave position without take profit.</param>
            <example>
            <code>
            protected override void OnPositionOpened(Position openedPosition)
            {
               var stopLoss = openedPosition.TradeType == TradeType.Buy
                    ? openedPosition.EntryPrice - Symbol.PipSize * stopLossInPips
                    : openedPosition.EntryPrice + Symbol.PipSize * stopLossInPips;
            
                var takeProfit = openedPosition.TradeType == TradeType.Buy
                    ? openedPosition.EntryPrice + Symbol.PipSize * takeProfitInPips
                    : openedPosition.EntryPrice - Symbol.PipSize * takeProfitInPips;
            
                Trade.ModifyPosition(openedPosition, stopLoss, takeProfit);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnPositionOpened(Position openedPosition)
            {
               var stopLoss = openedPosition.TradeType == TradeType.Buy
                    ? openedPosition.EntryPrice - Symbol.PipSize * stopLossInPips
                    : openedPosition.EntryPrice + Symbol.PipSize * stopLossInPips;
            
                Trade.ModifyPosition(openedPosition, stopLoss, null);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.DeletePendingOrder(cAlgo.API.PendingOrder)">
            <summary>
            Deletes pending order.
            </summary>
            <example>
            <code>
            protected override void OnStop()
            {
                // Delete last pending orders of the account when the Robot stops operating
                foreach (var order in Account.PendingOrders)
                    Trade.DeletePendingOrder(order);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Modifies pending order.
            </summary>
            <param name="order">Pending order to modify</param>
            <param name="stopLoss">Stop loss price</param>
            <param name="takeProfit">Take profit price</param>
            <param name="expirationTime">Optional Expiration date and time.</param>
            <example>
            <code>
            protected override void OnStart()
            {
               Trade.CreateBuyLimitOrder(Symbol,10000,Symbol.Bid);
            }  
            protected override void OnStop()
            {
                foreach (var order in Account.PendingOrders)
                {
                    double? stopLoss = Symbol.Bid - Symbol.PipSize;
                    double? takeProfit = Symbol.Bid + Symbol.PipSize;
                    Trade.ModifyPendingOrder(order, stopLoss, takeProfit);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.Send(cAlgo.API.Requests.Request)">
            <summary>
            Send a new Trade Request to the server
            </summary>
            <param name="request">The trade request object</param>
            <example>
            <code>
            protected override void OnTick()
            {
                if(Trade.IsExecuting)
                    return;
            
                TradeType buy = TradeType.Buy;
                var marketOrder = new MarketOrderRequest(buy, 1000)
                                {
                                    Label = "MarketOrder", 
                                    SlippagePips = 1, 
                                    StopLossPips = 10, 
                                    TakeProfitPips = 10
                                }
                Trade.Send(marketOrder);
                
                double price = Symbol.Ask - 10*Symbol.PipSize;
                double? stopLoss = price - 30*Symbol.PipSize;
                double? takeProfit = price + 50*Symbol.PipSize;
                DateTime? expiry = DateTime.Now.AddMinutes(30);
            
                var limitOrder = new LimitOrderRequest(buy,1000,price)
                               {
                                    Label = "123456",
                                    StopLoss = stopLoss,
                                    TakeProfit = takeProfit
                                    Expiration = expiry,
                               }
                Trade.Send(limitOrder);
            }
            
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Internals.MarketData">
            <summary>
            Provides access to Depth of Market Data
            </summary>
            <example>
            <code>
             MarketDepth md = MarketData.GetMarketDepth(Symbol);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetMarketDepth(System.String)">
            <summary>
            Get the depth of market prices and volumes of the symbol passed as parameter
            </summary>
            <param name="symbolCode">The symbol code e.g. "EURUSD"</param>
            <returns>Depth of Market</returns>
            <example>
            <code>
             MarketDepth md = MarketData.GetMarketDepth("EURUSD");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetMarketDepth(cAlgo.API.Internals.Symbol)">
            <summary>
            Get the depth of market price and volume of the current symbol
            </summary>
            <param name="symbol">The currency pair</param>
            <returns>Depth of Market</returns>
            <example>
            <code>
             MarketDepth md = MarketData.GetMarketDepth(Symbol);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetSeries(cAlgo.API.TimeFrame)">
            <summary>
            Get the MarketSeries of a specific timeframe and the current symbol
            </summary>
            <param name="timeFrame">The timeframe of the MarketSeries data</param>
            <example>
            <code>
            var marketSeriesMin30 = MarketData.GetSeries(TimeFrame.Minute30);
            var smaMin30 = Indicators.SimpleMovingAverage(marketSeriesMin30.Close, 14);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetSeries(System.String,cAlgo.API.TimeFrame)">
            <summary>
            Get the MarketSeries of market data for the symbol and timeframe
            </summary>
            <param name="symbolCode">the symbol code string of the market data</param>
            <param name="timeFrame">the Timeframe of the market data</param>
            <returns>MarketSeries of specific Symbol and Timeframe</returns>
            <example>
            <code>
            var daily = MarketData.GetSeries("EURUSD", TimeFrame.Daily);
            var sma = Indicators.SimpleMovingAverage(daily.Close, 14);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetSeries(cAlgo.API.Internals.Symbol,cAlgo.API.TimeFrame)">
            <summary>
            Get the MataSeries of market data for the symbol and timeframe
            </summary>
            <param name="symbol">the Symbol of the market data</param>
            <param name="timeFrame">the Timeframe of the market data</param>
            <returns>MarketSeries of specific Symbol and Timeframe</returns>
            <example>
            <code>
            Symbol USDCAD = GetSymbol("USDCAD");
            var daily = MarketData.GetSeries(USDCAD, TimeFrame.Daily);
            var sma = Indicators.SimpleMovingAverage(daily.Close, 14);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetSymbol(System.String)">
            <summary>
            Get the Symbol given the symbol's string name representation
            </summary>
            <param name="symbolCode"></param>
            <returns>Symbol</returns>
            <example>
            <code>
            Symbol USDCAD = MarketData.GetSymbol("USDCAD");
            var usdCadAsk = USDCAD.Ask;
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.IndicatorAttribute">
            <summary>
            Indicator Attribute. Applies metadata to enable the indicator plot.
            </summary>
            <remarks>
            To make it effective apply enclosed in square brackets, e.g. [Indicator] before the indicator class declaration. Cannot be ommited.
            </remarks>
            <example>
            <code>
             namespace cAlgo.Indicators
            {
                [Indicator()]
                public class SampleIndicator : Indicator
                {
                    &#47;&#47;&#46;&#46;&#46;
                }
            }
            </code>
            </example>
            <example>
            <code>
            [Indicator("Custom Indicator" )]
            public class SampleIndicator : Indicator
            </code>
            </example>
            <example>
            <code>
            [Indicator("IndicatorName", ScalePrecision = 5, IsOverlay = false, TimeZone = TimeZones.UTC)] 
            public class SampleIndicator : Indicator
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.IndicatorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IndicatorAttribute and sets the name of the indicator.
            </summary>
            <remarks>
            To make it effective apply enclosed in square brackets, e.g. [Indicator("IndicatorName")] before the indicator class declaration.
            The name is displayed on the top left of the indicator panel.
            </remarks>
            <param name="name">The name of an indicator.</param>
            <example>
            <code>
            [Indicator("IndicatorName")] 
            public class SampleIndicator : Indicator
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.IndicatorAttribute.#ctor">
            <summary>
            Initializes a new instance of the IndicatorAttribute
            </summary>
            <remarks>
            To make it effective apply enclosed in square brackets, e.g. [Indicator] before the indicator class declaration.
            The name is displayed on the top left of the indicator panel.
            </remarks>
            <example>
            <code>
            
            namespace cAlgo.Indicators
            {
                [Indicator()]
                public class SampleIndicator : Indicator
                {
                    &#47;&#47;&#46;&#46;&#46;
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.IndicatorAttribute.Name">
            <summary>
            The name of the Indicator.
            </summary>
            <remarks>
            The name is displayed to the left of the indicator panel.
            </remarks>
            <example>
            <code>
            
            namespace cAlgo.Indicators
            {
                [Indicator("IndicatorName")] 
                public class SampleIndicator : Indicator
                {
                    &#47;&#47;&#46;&#46;&#46;
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.IndicatorAttribute.ScalePrecision">
            <summary>
            The price scale precision.
            </summary>
            <remarks>
            The number of decimals displayed on the price scale of the indicator panel
            </remarks>
            <example>
            <code>
            
            namespace cAlgo.Indicators
            {
                [Indicator(ScalePrecision = 5)] // The scale precision is 5 decimals.
                public class SampleIndicator : Indicator
                {
                    &#47;&#47;&#46;&#46;&#46;
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.IndicatorAttribute.IsOverlay">
            <summary>
            Indicates whether this instance is overlayed on the chart or plotted on a separate indicator panel
            </summary>
            <value>
            The IsOverlay property sets the value true if this Indicator should be plotted on the chart panel; false if the indicator should be plotted on a separate Indicator Panel
            </value>
            <example>
            <code>
            
                [Indicator(IsOverlay = true)] // Plots the Indicator on the chart
                public class SampleIndicator : Indicator
            
            </code>
            </example>
            <example>
            <code>
            
                [Indicator(IsOverlay = false)] // Plots the Indicator on a separate indicator panel.
                public class SampleIndicator : Indicator
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.IndicatorAttribute.AutoRescale">
            <summary>
            Indicates whether this instance automatically rescales the chart or not
            </summary>
            <example>
            <code>
            
                [Indicator(AutoRescale = false)]
                public class SampleIndicator : Indicator
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.IndicatorAttribute.TimeZone">
            <summary>
            The chart timezone of the displayed indicator
            </summary>
            <example>
            <code>
            [Indicator(TimeZone = TimeZones.UTC)]
            public class SampleIndicator : Indicator
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.IndicatorAttribute.AccessRights">
            <summary>
            AccessRights required for Indicator
            </summary>
        </member>
        <member name="T:cAlgo.API.LevelsAttribute">
            <summary>
            Levels Attribute. Applies metadata to enable the plot of level lines.
            </summary>
            <remarks>
            Represents level lines. It is commonly used in Oscillators, for instance to add a zero line.
            Must be added before the indicator class declaration.
            </remarks>
            <example>
            <code>
            namespace cAlgo.Indicators
            {
                [Levels(0, 50, 100)]
                [Indicator()]
                public class NewIndicator : Indicator
                //...
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.LevelsAttribute.#ctor(System.Double[])">
            <summary>
            Initializes a new LevelsAttribute instance
            </summary>
            <remarks>
            Draws level (horizontal) lines at a fixed position when the plot is on the indicator panel below the chart. To make it effective apply enclosed in square brackets, e.g. [Levels(0)], before the Indicator atribute declaration.
            </remarks>
            <param name="levels">The price values that the level lines are representing</param>
            <example>
            <code>
            namespace cAlgo.Indicators
            {
                // A zero line will be drawn
                [Levels(0)]
                [Indicator]
                public class NewIndicator : Indicator
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.LevelsAttribute.Levels">
            <summary>
            The array of price values that are ploted as level lines
            </summary>
            <example>
            <code>
            namespace cAlgo.Indicators
            {
                // two level lines will be drawn at prices 20.0 and 80.5
                [Levels(20.0, 80.5)] 
                [Indicator]
                public class NewIndicator : Indicator
                //...
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.OutputAttribute">
            <summary>
            Sealed Class OutputAttribute
            </summary>
            <remarks>
            Marks a IndicatorDataSeries property as output to be displayed on the chart or panel below.
            To make it effective please apply this attribute in front of the declaration of the IndicatorDataSeries to be displayed.
            </remarks>
        </member>
        <member name="M:cAlgo.API.OutputAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the OutputAttribute and sets the name.
             </summary>
             <param name="lineName">The name given to the output plot</param>
             <remarks>
             The members have the following default values:
                 PlotType = PlotType.Line;
                 LineStyle = LineStyle.Solid;
                 Thickness = 1f;
                 LineColor = "Green";
                 Name = lineName;
             </remarks>
             <example>
             <code>
             // Simple plot that uses the default solid line plot in green color
             [Output("Main")]
             public IndicatorDataSeries Result { get; set; }
             
             </code>
             </example>
             <example>
             <code>
             
             //Plot a simple moving average with a set of lines (dashes)
             [Output("Simple Moving Average", LineStyle = LineStyle.Lines)]
             public IndicatorDataSeries SMA { get; set; }
                 
             </code>
             </example>
             <example>
             <code>
             
             &#47;&#47;&#46;&#46;&#46;
             
             //Plot a Histogram.
             [Output("Commodity Channel Index", PlotType = PlotType.Histogram)]
             public IndicatorDataSeries Result { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
             
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.OutputAttribute.LineStyle">
            <summary>
            Gets or sets the Line Style for given Output property. By default it is set to Solid
            </summary>
            <remarks>
            If PlotType = PlotType.Line (default) the LineStyle can be added.
            Supported line styles are:
                Dots
                DotsRare
                DotsVeryRare
                Lines
                LinesDots
                Solid
            </remarks>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            //Simple moving average will be now plotted as Lines.
            [Output("Simple Moving Average", LineStyle = LineStyle.Lines)]
            public IndicatorDataSeries SMA { get; set; }
                
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.OutputAttribute.Name">
            <summary>
            The plot name
            </summary>
            <remarks>
            Displayed in the User Interface when adding an new instance of the Indicator.
            </remarks>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            //The plotted indicator name is Simple Moving Average.
            [Output("Simple Moving Average")]
            public IndicatorDataSeries SMA { get; set; }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.OutputAttribute.Color">
             <summary>
             Gets or sets the Color of the Output property. This Color will be used when the line for this Output is plotted.
             </summary>
             <example>
             <code> 
             &#47;&#47;&#46;&#46;&#46;
             
             //The result is plotted in Turquoise.
             [Output("Simple Moving Average", Color = Colors.Turquoise)] 
             public IndicatorDataSeries SMA { get; set; }
            
             public override void Calculate(int index)
             {
                &#47;&#47;&#46;&#46;&#46;
             }
             
             
             
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.OutputAttribute.LineColor">
             <summary>
             Gets or sets the Color of the Output property. This Color will be used when the line for this Output is plotted.
             </summary>
             <example>
             <code> 
             &#47;&#47;&#46;&#46;&#46;
             
             //The result is plotted in Turquoise.
             [Output("Main", LineColor = "#008000")]
             public IndicatorDataSeries SMA { get; set; }
            
             public override void Calculate(int index)
             {
                &#47;&#47;&#46;&#46;&#46;
             }
             
             
             
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.OutputAttribute.Thickness">
             <summary>
             Sets the Width of the Output property. 
             </summary>
             <remarks>
             This Width will be used when the line for this Output is plotted.
             </remarks>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
             
             //The result is plotted as a line with thickness level five
             [Output("Simple Moving Average", Thickness = 5)]
             public IndicatorDataSeries SMA { get; set; }
            
             public override void Calculate(int index)
             {
                 &#47;&#47;&#46;&#46;&#46;
             }
             
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.OutputAttribute.IsHistogram">
            <summary>
            Plots a Histogram. 
            </summary>
            <example>
            <code>
            [Output("Main", IsHistogram = true)]
            public IndicatorDataSeries Result { get; set; }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.OutputAttribute.PlotType">
             <summary>
             Plot type.
             </summary>
             <remarks>
             The type of the output plotted on the output panel. Default = Line
             Supported types are:
                 Line
                 Points
                 Histogram
             </remarks>
             <example>
             <code>
             
             &#47;&#47;&#46;&#46;&#46;
             
             //The result is plotted as a Histogram.
             [Output("Commodity Channel Index", PlotType = PlotType.Histogram)]
             public IndicatorDataSeries SMA { get; set; }
            
             public override void Calculate(int index)
             {
                 &#47;&#47;&#46;&#46;&#46;
             }
              
             </code>
             </example>
             <example>
             <code>
             
             &#47;&#47;&#46;&#46;&#46;
             
             //Plot the result as a set of yellow points.
             [Output("Main", LineColor = "Yellow", PlotType = PlotType.Points)]
             public IndicatorDataSeries Result { get; set; }
             
             &#47;&#47;&#46;&#46;&#46;
             
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.ParameterAttribute">
            <summary>
            Class ParameterAttribute
            </summary>
            <remarks>
            Marks a property as input parameter
            </remarks>
        </member>
        <member name="M:cAlgo.API.ParameterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new ParameterAttribute instance and sets the name
            </summary>
            <remarks>
            Represents an input parameter to the program.
            To make it effective type in enclosed in square brackets, e.g. [Parameter], before the property declaration. Parameters are listed in the instance button of the robot/indicator.
            </remarks>
            <param name="name">The name of the parameter.</param>
            <example>
            <code>
            
            &#47;&#47;&#46;&#46;&#46;
            // parameter attribute
            [Parameter("Parameter Name")]
            public int ParameterName { get; set; }
            
            &#47;&#47;&#46;&#46;&#46;
            
            </code>
            </example>
            <example>
            <code>
            
            &#47;&#47;&#46;&#46;&#46;
            
            // parameter attribute
            [Parameter("ParameterName", DefaultValue = 14, MinValue = 2, MaxValue = 30)] 
            public int ParameterName { get; set; } //  property declaration
            
            &#47;&#47;&#46;&#46;&#46;
            
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.ParameterAttribute.#ctor">
            <summary>
            Initializes a new instance of the ParameterAttribute class.
            </summary>
            <remarks>
            In this case the parameter name is the same as the property name.
            </remarks>
            <example>
            <code>
            
            &#47;&#47;&#46;&#46;&#46;
            
            // The Parameter name is MaPeriod
            [Parameter]
            public int MaPeriod { get; set; }
            
            &#47;&#47;&#46;&#46;&#46;
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.ParameterAttribute.Name">
            <summary>
            The input parameter name.
            </summary>
            It is included in the input settings when a new instance is added.
            If omitted then the property name is assumed.
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            //The input parameter name is MaPeriod
            [Parameter("MaPeriod")]
            public int Period { get; set; } 
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.ParameterAttribute.DefaultValue">
            <summary>
            Gets or sets the default value of this Parameter property.
            </summary>
            <example>
            <code> 
            &#47;&#47;&#46;&#46;&#46;
            
            //The value for Periods is fourteen
            [Parameter(DefaultValue = 14)] 
            public int Periods { get; set; }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.ParameterAttribute.MinValue">
            <summary>
            Gets or sets the minimum value of this Parameter property. It is used for validating user input.
            </summary>
            <example>
            <code> 
            &#47;&#47;&#46;&#46;&#46;
            
            //The minimum value the user can set Periods is five.
            [Parameter(DefaultValue = 14, MinValue = 5)] 
            public int Periods { get; set; }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.ParameterAttribute.MaxValue">
            <summary>
            Gets or sets the maximum value of this Parameter property. It is used for validating user input.
            </summary>
            <example>
            <code> 
            &#47;&#47;&#46;&#46;&#46;
            
            //The maximum value the user can set Periods is twenty
            [Parameter(DefaultValue = 14, MaxValue = 20)] 
            public int Periods { get; set; }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.ParameterAttribute.Step">
            <summary>
            Gets or sets the step of this Parameter. Step is used in NumericUpDown controls in parameter editors.
            </summary>
        </member>
        <member name="T:cAlgo.API.Colors">
            <summary>
            A predefined color palette. Use these colors in indicators and other chart objects. Same as System.Drawing.Color. 
            </summary>
            <example>
            <code>
            [Output("Result1", Color = Colors.Blue)]
            public IndicatorDataSeries Result1 { get; set; }
            
            [Output("Result2", Color = Colors.Red)]
            public IndicatorDataSeries Result2 { get; set; }
            
            [Output("Result3", Color = Colors.Lime)]
            public IndicatorDataSeries Result3 { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.Colors.AliceBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF0F8FF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.AntiqueWhite">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFAEBD7.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Aqua">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Aquamarine">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF7FFFD4.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Azure">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF0FFFF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Beige">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF5F5DC.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Bisque">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFE4C4.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Black">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF000000.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.BlanchedAlmond">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFEBCD.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Blue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF0000FF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.BlueViolet">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF8A2BE2.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Brown">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFA52A2A.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.BurlyWood">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFDEB887.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.CadetBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF5F9EA0.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Chartreuse">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF7FFF00.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Chocolate">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFD2691E.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Coral">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF7F50.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.CornflowerBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF6495ED.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Cornsilk">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFF8DC.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Crimson">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFDC143C.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Cyan">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00008B.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkCyan">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF008B8B.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkGoldenrod">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFB8860B.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkGray">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFA9A9A9.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF006400.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkKhaki">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFBDB76B.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkMagenta">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF8B008B.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkOliveGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF556B2F.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkOrange">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF8C00.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkOrchid">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF9932CC.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkRed">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF8B0000.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkSalmon">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFE9967A.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkSeaGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF8FBC8F.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkSlateBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF483D8B.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkSlateGray">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF2F4F4F.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkTurquoise">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00CED1.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkViolet">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF9400D3.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DeepPink">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF1493.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DeepSkyBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00BFFF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DimGray">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF696969.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DodgerBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF1E90FF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Firebrick">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFB22222.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.FloralWhite">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFAF0.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.ForestGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF228B22.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Fuchsia">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Gainsboro">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFDCDCDC.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.GhostWhite">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF8F8FF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Gold">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFD700.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Goldenrod">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFDAA520.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Gray">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF808080.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Green">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF008000.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.GreenYellow">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFADFF2F.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Honeydew">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF0FFF0.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.HotPink">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF69B4.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.IndianRed">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFCD5C5C.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Indigo">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF4B0082.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Ivory">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFFF0.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Khaki">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF0E68C.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Lavender">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFE6E6FA.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LavenderBlush">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFF0F5.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LawnGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF7CFC00.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LemonChiffon">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFACD.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFADD8E6.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightCoral">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF08080.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightCyan">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFE0FFFF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightGoldenrodYellow">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFAFAD2.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightGray">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFD3D3D3.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF90EE90.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightPink">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFB6C1.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightSalmon">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFA07A.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightSeaGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF20B2AA.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightSkyBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF87CEFA.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightSlateGray">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF778899.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightSteelBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFB0C4DE.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightYellow">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFFE0.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Lime">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00FF00.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LimeGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF32CD32.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Linen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFAF0E6.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Magenta">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Maroon">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF800000.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumAquamarine">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF66CDAA.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF0000CD.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumOrchid">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFBA55D3.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumPurple">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF9370DB.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumSeaGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF3CB371.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumSlateBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF7B68EE.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumSpringGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00FA9A.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumTurquoise">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF48D1CC.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumVioletRed">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFC71585
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MidnightBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF191970.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MintCream">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF5FFFA.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MistyRose">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFE4E1.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Moccasin">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFE4B5.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.NavajoWhite">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFDEAD.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Navy">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF000080.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.OldLace">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFDF5E6.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Olive">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF808000.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.OliveDrab">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF6B8E23.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Orange">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFA500.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.OrangeRed">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF4500.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Orchid">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFDA70D6.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.PaleGoldenrod">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFEEE8AA.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.PaleGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF98FB98.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.PaleTurquoise">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFAFEEEE.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.PaleVioletRed">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFDB7093.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.PapayaWhip">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFEFD5.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.PeachPuff">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFDAB9.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Peru">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFCD853F.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Pink">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFC0CB.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Plum">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFDDA0DD.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.PowderBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFB0E0E6.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Purple">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF800080.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Red">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF0000.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.RosyBrown">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFBC8F8F.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.RoyalBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF4169E1.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SaddleBrown">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF8B4513.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Salmon">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFA8072.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SandyBrown">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF4A460.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SeaGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF2E8B57.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SeaShell">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFF5EE.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Sienna">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFA0522D.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Silver">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFC0C0C0.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SkyBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF87CEEB.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SlateBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF6A5ACD.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SlateGray">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF708090.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Snow">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFAFA.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SpringGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00FF7F.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SteelBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF4682B4.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Tan">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFD2B48C.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Teal">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF008080.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Thistle">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFD8BFD8.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Tomato">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF6347.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Turquoise">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF40E0D0.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Violet">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFEE82EE.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Wheat">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF5DEB3.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.White">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFFFF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.WhiteSmoke">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF5F5F5.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Yellow">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFF00.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.YellowGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF9ACD32.
            </summary>
        </member>
        <member name="T:cAlgo.API.Error">
            <summary>
            Encapsulates an error code.
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                // Print the error code
                Print("{0}", error.Code);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Error.Code">
            <summary>
            The encapsulated error code.
            </summary>
            <example>
            <code> 
            protected override void OnError(Error error)
            {
                // stop the robot if there is a volume error
                if (error.Code == ErrorCode.BadVolume)
                    Stop();
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Error.TradeResult">
            <summary>
            The result of the trade that produced the error
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                var result = error.TradeResult;
                Print(result);
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.ErrorCode">
            <summary>
            Enumeration of standard error codes.
            </summary>
            <remarks>
            Error codes are readable descriptions of the responses returned by the server.
            </remarks>
            <example>
            <code>
            
                protected override void OnError(Error error)
                {
                    //  Print the error to the log
                    switch (error.Code)
                    {
                            case ErrorCode.BadVolume: Print("Bad Volume");
                            break;
                            case ErrorCode.TechnicalError:Print("Technical Error");
                            break;
                            case ErrorCode.NoMoney: Print("No Money");
                            break;
                            case ErrorCode.Disconnected: Print("Disconnected");
                            break;
                            case ErrorCode.MarketClosed: Print("Market Closed");
                            break;
                    }
                }
            
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.TechnicalError">
            <summary>
            A generic technical error with a trade request.
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.TechnicalError)
                {
                    Print("Error. Confirm that the trade command parameters are valid");
                }
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.BadVolume">
            <summary>
            The volume value is not valid
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.BadVolume)
                {
                    Print("Invalid Volume amount");
                }
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.NoMoney">
            <summary>
            There are not enough money in the account to trade with.
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.NoMoney)
                {
                    Print("Not enough money to trade.");
                }
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.MarketClosed">
            <summary>
            The market is closed.
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.MarketClosed)
                {
                    Print("The market is closed.");
                }
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.Disconnected">
            <summary>
            The server is disconnected.
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.Disconnected)
                {
                    Print("The server is disconnected.");
                }
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.EntityNotFound">
            <summary>
            Position does not exist. 
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.EntityNotFound)
                {
                    Print("Position not found");
                }
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.Timeout">
            <summary>
            Operation timed out.
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.Timeout)
                {
                    Print("Operation timed out");
                }
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.PositionClosedEventArgs">
            <summary>
            Provides data for the position closing event.
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                Positions.Closed += PositionsClosed;
            }
            private void PositionsOnClosed(PositionClosedEventArgs args)
            {
                var position = args.Position;
                Print("Position closed with {0} profit", position.GrossProfit);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PositionClosedEventArgs.Position">
            <summary>
            Gets the position being closed.
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel");
                Positions.Closed += PositionsClosed;
            }
            private void PositionsClosed(PositionClosedEventArgs args)
            {
                var position = args.Position;
                if(position.Label == "myLabel")
                {                
                    var tradeType = position.TradeType;
                    var symbol = MarketData.GetSymbol(position.SymbolCode);
                    var volume = position.Volume;
                    var label = position.Label;
                    
                    if(position.GrossProfit > 0)
                        ExecuteMarketOrder(tradeType, symbol, volume, label);
                    else
                    {
                        var oppositeTrade = tradeType == TradeType.Buy
                                    ? TradeType.Sell
                                    : TradeType.Buy;
                        ExecuteMarketOrder(oppositeTrade, symbol, volume, label);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PositionClosedEventArgs.Reason">
            <summary>
            Gets the reason of the position being closed.
            </summary>
        </member>
        <member name="T:cAlgo.API.Functions">
            <summary>
            This class contains valuable functions that apply to DataSeries.
            </summary>
            <example>
            <code>
            
            //...
            
            SimpleMovingAverage sma;
            
            protected override void Initialize()
            {
                sma = Indicators.SimpleMovingAverage(source, period);
            }
            
            public override void Calculate(int index)
            {
                // IsRising returns true if the current value is greater
                // than the previous value in the data series
                if (Functions.IsRising(sma.Result))
                {
                    //Do something
                }
                // IsFalling returns true if the current value is less
                // than the previous value in the data series 
                else if(Functions.IsFalling(sma.Result))
                {
                    // Do something else
                }
                else // sma is level
                {
                    Do something else
                }
            
                //...
            
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Functions.IsRising(cAlgo.API.DataSeries)">
            <summary>
            Checks if the last value in a dataseries is greater than the previous.
            </summary>
            <param name="series">Input dataseries</param>
            <returns>True if the last value of a dataseries is greater than the previous, false otherwise</returns>
            <example>
            <code>
            SimpleMovingAverage sma;
            //...
            public override void Calculate(int index)
            {
                if (Functions.IsRising(sma.Result))
                {
                    //Do something
                }
                //May be invoked as an extension method
                if (sma.Result.IsRising())  
                {
                    //Do something
                }
            }
            //...
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Functions.IsFalling(cAlgo.API.DataSeries)">
            <summary>
            Checks if the last value in a dataseries is less than the previous
            </summary>
            <param name="series">Input dataseries</param>
            <returns>True if the last value in a dataseries is less than the previous, false otherwise</returns>
            <example>
            <code>
            SimpleMovingAverage sma;
            //...
            public override void Calculate(int index)
            {
                if (Functions.IsFalling(sma.Result))
                {
                    //Do something
                }
                // May also be invoked as an extension method
                if (sma.Result.IsFalling())
                {
                    //Do something
                }
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Functions.Maximum(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            Finds the maximum value in a dataseries for a given period.
            </summary>
            <param name="series">Input dataseries</param>
            <param name="period">Input period</param>
            <returns>The maximum value in the dataseries in this period</returns>
            <example>
            <code>
            public override void Calculate(int index)
            {
                if(Functions.Maximum(sma.Result,20) > MarketSeries.Close[index])
                {
                    //Do something
                }
            
                // May be invoked as an extension method
                
                if (sma.Result.Maximum(20) > MarketSeries.Close[index])
                {
                    //Do something
                }
            }
            </code>
            </example>
            <example>
            <code>
            var maxHigh = MarketSeries.High.Maximum(periods); 
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Functions.Minimum(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            Finds the minimum of a dataseries for a given period.
            </summary>
            <param name="series">Input dataseries</param>
            <param name="period">Input period</param>
            <returns>The minimum value in the dataseries in this period</returns>
            <example>
            <code>
            public override void Calculate(int index)
            {
                if(Functions.Minimum(sma.Result, 20) > MarketSeries.Close[index])
                {
                    //Do something
                }
            
                // May be invoked as an extension method
                
                if (sma.Result.Minimum(20) > MarketSeries.Close[index])
                {
                    //Do something
                }
            }
            </code>
            </example>
            <example>
            <code>
            var minLow = MarketSeries.Low.Minimum(periods);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Functions.HasCrossedAbove(cAlgo.API.DataSeries,cAlgo.API.DataSeries,System.Int32)">
            <summary>
            Returns true, if dataseries1 has crossed above dataseries2, over the specified Period.
            </summary>
            <param name="crossingSeries">Crossing dataseries</param>
            <param name="crossedSeries">Crossed dataseries</param>
            <param name="period">Period for which to check for crossing</param>
            <remarks>
            HasCrossedAbove will compare the crossing dataseries to the crossed dataseries starting from the
            current value of the series going back the specified period.
            If period is zero only the current bar values will be compared. 
            If period is one the current bar values will be compared as well as the previous.
            
            e.g. Functions.HasCrossedAbove(sma.Result, MarketSeries.Close, 0) 
            will only compare the current values which are not completed until the close of the bar.
            It is not uncommon that the function will return true and by the end of the bar the two 
            series will uncross.
            </remarks>
            <example>
            <code>
            
            public override void Calculate(int index)
            {
                if(Functions.HasCrossedAbove(sma.Result, MarketSeries.Close, 0))
                {
                    //Do something
                }
            
                // May be invoked as an extension method as well
                
                if(sma.Result.HasCrossedAbove(MarketSeries.Close, 0))
                {
                    //Do something
                }
            }
            
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Functions.HasCrossedBelow(cAlgo.API.DataSeries,cAlgo.API.DataSeries,System.Int32)">
            <summary>
            Returns true, if dataseries1 has crossed below dataseries2, over the specified Period.
            </summary>
            <param name="crossingSeries">Crossing dataseries</param>
            <param name="crossedSeries">Crossed dataseries</param>
            <param name="period">Period for which to check for crossing</param>
            <remarks>
            HasCrossedBelow will compare the crossing dataseries to the crossed dataseries starting from the
            current value of the series going back the specified period.
            If period is zero only the current bar values will be compared.
            If period is one the current bar values will be compared as well as the previous.
            
            e.g. Functions.HasCrossedBelow(sma.Result, MarketSeries.Close, 0)
            will only compare the current values which are not completed until the close of the bar.
            It is not uncommon that the function will return true and by the end of the bar the two 
            series will uncross.
            </remarks>
            <example>
            <code>
            
            public override void Calculate(int index)
            {
                if(Functions.HasCrossedBelow(sma.Result, MarketSeries.Close,0)
                {
                    //Do something
                }
            
                // May be invoked as an extension method
                
                if(sma.Result.HasCrossedBelow(MarketSeries.Close, 0))
                {
                    //Do something
                }
            }
            
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Functions.HasCrossedAbove(cAlgo.API.DataSeries,System.Double,System.Int32)">
            <summary>
            Checks if dataseries1 has crossed above value, sometime within the specified period.
            </summary>
            <param name="crossingSeries">Crossing dataseries</param>
            <param name="value">Price value to check if crossed</param>
            <param name="period">Period for which to check for crossing</param>
            <returns>true, if dataseries1 has crossed above value</returns>
            <remarks>
            HasCrossedAbove will compare the crossing dataseries to the crossed dataseries starting from the
            current value of the series going back the specified period.
            If period is zero only the current bar values will be compared. 
            If period is one the current bar values will be compared as well as the previous.
            e.g. Functions.HasCrossedAbove(sma.Result, value, 0) 
            will only compare the current simple moving average series value 
            which is not completed until the close of the bar.
            It is not uncommon that the function will return true and by the end of the bar the series will uncross.
            </remarks>
            <example>
            <code>
            
            public override void Calculate(int index)
            {
                var value = MarketSeries.Close[index - 1];
                if(Functions.HasCrossedAbove(sma.Result, value, 1)
                {
                    //Do something
                }
            
                // May be invoked as an extension method as well
                
                if(sma.Result.HasCrossedAbove(MarketSeries.Close[index-1], 1))
                {
                    //Do something
                }
            }
            
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Functions.HasCrossedBelow(cAlgo.API.DataSeries,System.Double,System.Int32)">
            <summary>
            Checks if dataseries1 has crossed below the value, sometime within the specified period.
            </summary>
            <param name="crossingSeries">Crossing DataDeries</param>
            <param name="value">Price value to check if crossed </param>
            <param name="period">Period for which to check for crossing</param>
            <returns>True if dataseries1 has crossed below value, false otherwise</returns>
            <remarks>
            HasCrossedBelow compares the crossing dataseries to the value starting from the
            current value of the series going back the specified period.
            If period is zero, only the current bar value will be examined. 
            If period is one, the current and previous bar value will be examined.
            e.g. Functions.HasCrossedAbove(sma.Result, value, 0)
            will only compare the current simple moving average series value 
            which is not completed until the close of the bar.
            It is not uncommon that the function will return true and by the end of the bar the series will uncross.
            </remarks>
            <example>
            <code>
            public override void Calculate(int index)
            {
                if(Functions.HasCrossedBelow(sma.Result, MarketSeries.Close[index], 0)
                {
                    //Do something
                }
                // May be invoked as an extension method as well
                if(sma.Result.HasCrossedBelow(MarketSeries.Close[index], 0))
                {
                    //Do something
                }
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Functions.Sum(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            Calculates the sum of a dataseries, over the specified period.
            </summary>
            <param name="series">DataSeries of which values are summed</param>
            <param name="period">Period of values that are summed prior to current index</param>
            <returns>The sum of the series for the period</returns>
            <example>
            <code>
            SimpleMovingAverage sma;
            //...
            public override void Calculate(int index)
            {
                //The sum of the simple moving average series of the last 20 bars
                var sumSma = Functions.Sum(sma.Result, 20); 
                //...
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.History">
            <summary>
            Collection of all historical trades
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.Positions">
            <summary>
            Collection of all open positions
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.PendingOrders">
            <summary>
            Collection of all pending orders
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.Equity">
            <summary>
            Represents the equity of the account (balance plus unrealized profit and loss)
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.NetProfit">
            <summary>
            The net profit of all trades
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.MaxBalanceDrawdownPercentages">
            <summary>
            The maximum amount of balance drawdown (%).
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.MaxEquityDrawdownPercentages">
            <summary>
            The maximum amount of equity drawdown (%).
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.MaxBalanceDrawdown">
            <summary>
            The maximum amount of balance drawdown in deposit currency.
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.MaxEquityDrawdown">
            <summary>
            The maximum amount of equity drawdown in deposit currency.
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.WinningTrades">
            <summary>
            Total number of winning trades
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.LosingTrades">
            <summary>
            Total number of losing trades 
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.TotalTrades">
            <summary>
            Total number of trades taken
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.AverageTrade">
            <summary>
            Average profit for all trades
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.ProfitFactor">
            <summary>
            Profit Factor is the ratio of Total Net Profit divided by Total Net Loss
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.SharpeRatio">
            <summary>
            A ratio to measure risk-adjusted performance. The higher the value, the better.
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.SortinoRatio">
            <summary>
            The Sortino ratio is an alternative to the Sharpe ratio, using downward deviation in place of standard deviation. The higher the value, the better.
            </summary>
        </member>
        <member name="T:cAlgo.API.HistoricalTrade">
            <summary>
            Represents historical trade
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.ClosingDealId">
            <summary>
            Unique deal identifier
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.PositionId">
            <summary>
            The position's unique identifier.
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.SymbolCode">
            <summary>
            Symbol code of the Historical Trade.
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.TradeType">
            <summary>
            The TradeType of the Opening Deal
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Volume">
            <summary>
            The Volume that was closed by the Closing Deal
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.VolumeInUnits">
            <summary>
            The Volume that was closed by the Closing Deal
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.EntryTime">
            <summary>
            Time of the Opening Deal, or the time of the first Opening deal that was closed
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.EntryPrice">
            <summary>
            The VWAP (Volume Weighted Average Price) of the Opening Deals that are closed
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.ClosingTime">
            <summary>
            Time of the Closing Deal
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.ClosingPrice">
            <summary>
            The execution price of the Closing Deal
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Label">
            <summary>
            The label
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Comment">
            <summary>
            The comment
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Commissions">
            <summary>
            Commission owed
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Swap">
            <summary>
            Swap is the overnight interest rate if any, accrued on the position.
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.NetProfit">
            <summary>
            Profit and loss including swaps and commissions
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.GrossProfit">
            <summary>
            Profit and loss before swaps and commission
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Balance">
            <summary>
            Account balance after the Deal was filled
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Pips">
            <summary>
            Represents the winning or loosing pips
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Quantity">
            <summary>
            The Quantity (in lots) that was closed by the Closing Deal
            </summary>
        </member>
        <member name="T:cAlgo.API.History">
            <summary>
            Provides access to methods of the historical trades collection
            </summary>
        </member>
        <member name="P:cAlgo.API.History.Item(System.Int32)">
            <summary>
            Find a historical trade by index
            </summary>
            <param name="index">the index in the list</param>
        </member>
        <member name="P:cAlgo.API.History.Count">
            <summary>
            Total number of historical trades
            </summary>
        </member>
        <member name="M:cAlgo.API.History.FindLast(System.String)">
            <summary>
            Find last historical trade by its label
            </summary>
            <param name="label">Label to search by</param>
        </member>
        <member name="M:cAlgo.API.History.FindLast(System.String,cAlgo.API.Internals.Symbol)">
            <summary>
            Find last historical trade by its label, symbol
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbol">Symbol to search by</param>
        </member>
        <member name="M:cAlgo.API.History.FindLast(System.String,cAlgo.API.Internals.Symbol,cAlgo.API.TradeType)">
            <summary>
            Find last historical trade by its label, symbol and trade type
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbol">Symbol to search by</param>
            <param name="tradeType">Trade type to search by</param>
        </member>
        <member name="M:cAlgo.API.History.FindAll(System.String)">
            <summary>
            Find all historical trades by the label
            </summary>
            <param name="label">Label to search by</param>
        </member>
        <member name="M:cAlgo.API.History.FindAll(System.String,cAlgo.API.Internals.Symbol)">
            <summary>
            Find all historical trades by label and symbol
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbol">Symbol to search by</param>
        </member>
        <member name="M:cAlgo.API.History.FindAll(System.String,cAlgo.API.Internals.Symbol,cAlgo.API.TradeType)">
            <summary>
            Find all historical trades by label, symbol and trade type
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbol">Symbol to search by</param>
            <param name="tradeType">Trade type to search by</param>
        </member>
        <member name="T:cAlgo.API.HorizontalAlignment">
            <summary>
            Describes horizontal position related to an anchor point or a parent element
            </summary>
        </member>
        <member name="F:cAlgo.API.HorizontalAlignment.Center">
            <summary>
            Center horizontal alignment.
            </summary>
        </member>
        <member name="F:cAlgo.API.HorizontalAlignment.Left">
            <summary>
            Left horizontal alignment.
            </summary>      
        </member>
        <member name="F:cAlgo.API.HorizontalAlignment.Right">
            <summary>
            Right horizontal alignment.
            </summary>        
        </member>
        <member name="F:cAlgo.API.HorizontalAlignment.Stretch">
            <summary>
            </summary>
        </member>
        <member name="T:cAlgo.API.Indicators.AcceleratorOscillator">
            <summary>
            Identifies possible trend reversals
            </summary>
            <example>
            <code>
            protected override void Initialize()
            {
                acceleratorOscillator = Indicators.AcceleratorOscillator();
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.AcceleratorOscillator.Result">
            <summary>
            AcceleratorOscillator calculation result
            </summary>
            <example>
            <code>
            protected override void OnBar()
            {
                var lastValue = acceleratorOscillator.Result.LastValue;
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.AverageTrueRange">
            <summary>
            Average true range. An indicator providing the degree of price volatility.
            </summary>
            <remarks>
            Average true range is a volatility indicator originally developed by J. Welles Wilder. The indicator provides the degree of price volatility. The average true range is an N-day (exponential) moving average of the true range values. Wilder recommended a 14-period smoothing.
            </remarks>
            <example>
            <code>
            private AverageTrueRange averageTrueRange;
            
            [Parameter(DefaultValue = 14)]
            public int Periods { get; set; }
            
            [Parameter(DefaultValue = 0.002)]
            public double ATRValue { get; set; }
            
            [Parameter("MA Type", DefaultValue = MovingAverageType.Exponential)]
            public MovingAverageType MAType { get; set; }
            
            protected override void OnStart()
            {
                averageTrueRange = Indicators.AverageTrueRange(Periods, MAType);
            }
            
            protected override void OnTick()
            {
                // if the 14 day Average True Range is higher than 0.002
                if(averageTrueRange.Result.LastValue >= ATRValue)
                {
                    // Do Something
                }
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.AverageTrueRange.Result">
            <summary>
            The resulting data series of Average True Range Indicator instance
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                // Plot the Average True Range of period 14
                Result[index] = averageTrueRange.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.AwesomeOscillator">
            <summary>
            Displays market momentum as a histogram
            </summary>
            <example>
            <code>
            protected override void Initialize()
            {
                awesomeOscillator = Indicators.AwesomeOscillator();
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.AwesomeOscillator.Result">
            <summary>
            AwesomeOscillator calculation result
            </summary>
            <example>
            <code>
            protected override void OnBar()
            {
                var lastValue = awesomeOscillator.Result.LastValue;
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.ChaikinMoneyFlow">
            <summary>
            Chaikin Money Flow measures the amount of Money Flow Volume over a specific period. 
            The resulting indicator fluctuates above/below the zero line. 
            </summary>
            <example>
            <code>
            private ChaikinMoneyFlow _chaikinMoneyFlow;
            
            [Parameter("Period", DefaultValue = 21)]
            public int Period { get; set; }
            
            [Output("Main")]
            public IndicatorDataSeries Result { get; set; }
            
            protected override void Initialize()
            {
               _chaikinMoneyFlow = Indicators.ChaikinMoneyFlow(Period);
            }
            public override void Calculate(int index)
            {
               // Display Result of Indicator
               Result[index] = _chaikinMoneyFlow.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.ChaikinMoneyFlow.Result">
            <summary>
            The time series of ChaikinMoneyFlow Indicator
            </summary>
            <example>
            <code>
            private ChaikinMoneyFlow _chaikinMoneyFlow;
            
            [Parameter("Period", DefaultValue = 21)]
            public int Period { get; set; }
            
            protected override void OnStart()
            {
                _chaikinMoneyFlow = Indicators.ChaikinMoneyFlow(Period);
            }
            protected override void OnBar()
            {
                var currentValue = _chaikinMoneyFlow.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.DonchianChannel">
            <summary>
            The Donchian channel is a volatility indicator forming a channel between the highest high and the lowest low of the chosen period.
            </summary>
            <remarks>
            The Donchian channel is mainly used for providing entry signals. A long is established when the price closes above the Donchian Channel. Conversely, if it closes below, then a short is established.
            </remarks>
            <example>
            <code>
            //...
            private DonchianChannel donchian;
            //...
            protected override void OnStart()
            {
                donchian = Indicators.DonchianChannel(Period);            
            }
            protected override void OnBar()
            {
                Print("Top Value = {0}", donchian.Top.LastValue);
                Print("Middle Value = {0}", donchian.Middle.LastValue);
                Print("Bottom Value = {0}", donchian.Bottom.LastValue);
                //...
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.DonchianChannel.Top">
            <summary>
            The highest high of the period
            </summary>
            <example>
            <code>
            //...
            private DonchianChannel donchian;
            //...
            Print("Top Value = {0}", donchian.Top.LastValue);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.DonchianChannel.Middle">
            <summary>
            The middle of the highest high and the lowest low of the period
            </summary>
            <example>
            <code>
            //...
            private DonchianChannel donchian;
            //...
            Print("Middle Value = {0}", donchian.Middle.LastValue);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.DonchianChannel.Bottom">
            <summary>
            The lowest low of the period
            </summary>
            <example>
            <code>
            //...
            private DonchianChannel donchian;
            //...
            Print("Bottom Value = {0}", donchian.Bottom.LastValue);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.EaseOfMovement">
            <summary>
            Ease of Movement is a volume based oscillator that measures the "ease" of price movement.    
            </summary>
            <remarks>
            It quantifies the price/volume relationship. 
            When the oscillator is close to zero it signifies that prices will not move easy.
            Conversely, prices are advancing or declining with relative ease when the oscillator is positive or negative away from zero. 
            </remarks>
            <example>
            <code>
            private EaseOfMovement _easeOfMovement;
            
            [Parameter("Period", DefaultValue = 14)]
            public int Period { get; set; }
            
            [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
            public MovingAverageType MAType { get; set; }
            
            [Output("Main")]
            public IndicatorDataSeries Result { get; set; }
            
            protected override void Initialize()
            {
               _easeOfMovement = Indicators.EaseOfMovement(Period, MAType);
            }
            public override void Calculate(int index)
            {
               // Display Result of Indicator
               Result[index] = _easeOfMovement.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.EaseOfMovement.Result">
            <summary>
            The time series of EaseOfMovement Indicator
            </summary>
            <example>
            <code>
            private EaseOfMovement _easeOfMovement;
            
            [Parameter("Period", DefaultValue = 21)]
            public int Period { get; set; }
            
            [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
            public MovingAverageType MAType { get; set; }
            
            protected override void OnStart()
            {
                _easeOfMovement = Indicators.EaseOfMovement(Period, MAType);
            }
            protected override void OnBar()
            {
                var currentValue = _easeOfMovement.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.IchimokuKinkoHyo">
            <summary>
            Ichimoku Kinko Hyo Indicator.
            </summary>
            <remarks>
            Ichimoku is a moving average based trend identification system. It contains more data points than standard candlestick charts and thus provides a clearer picture of potential price action.
            </remarks>
            <example>
            <code>
            //...
            private IchimokuKinkoHyo ichimokuKinkoHyo;
            //...
            protected override void OnStart()
            {
                ichimokuKinkoHyo = Indicators.IchimokuKinkoHyo
                    (tenkanSenPeriods, kijunSenPeriods, senkouSpanBPeriods);            
            }
            protected override void OnBar()
            {
                Print("ChikouSpan Value = {0}", ichimokuKinkoHyo.ChikouSpan.LastValue);
                Print("KijunSen Value = {0}", ichimokuKinkoHyo.KijunSen.LastValue);
                Print("SenkouSpanA Value = {0}", ichimokuKinkoHyo.SenkouSpanA.LastValue);
                Print("SenkouSpanB Value = {0}", ichimokuKinkoHyo.SenkouSpanB.LastValue);
                Print("TenkanSen Value = {0}", ichimokuKinkoHyo.TenkanSen.LastValue);
            
                //...
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.IchimokuKinkoHyo.KijunSen">
            <summary>
            This is a confirmation line, a support-resistance line, and can be used as a trailing stop line.
            </summary>
            <example>
            <code>
            Print("KijunSen Value = {0}", ichimokuKinkoHyo.KijunSen.LastValue);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.IchimokuKinkoHyo.TenkanSen">
            <summary>
            It is primarily used as a signal line and a minor support-resistance line.
            </summary>
            <example>
            <code>
            Print("TenkanSen Value = {0}", ichimokuKinkoHyo.TenkanSen.LastValue);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.IchimokuKinkoHyo.ChikouSpan">
            <summary>
            It is used as a support-resistance aid.
            </summary>
            <example>
            <code>
            Print("ChikouSpan Value = {0}", ichimokuKinkoHyo.ChikouSpan.LastValue);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.IchimokuKinkoHyo.SenkouSpanA">
            <summary>
            Leading span 1, this line forms one edge of the kumo, or cloud.
            If the price is above the Senkou span, the top line serves as the first support level while the bottom line serves as the second support level.
            </summary>
            <example>
            <code>
            Print("SenkouSpanA Value = {0}", ichimokuKinkoHyo.SenkouSpanA.LastValue);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.IchimokuKinkoHyo.SenkouSpanB">
            <summary>
            Leading span 2, this line forms the other edge of the kumo.
            </summary>
            <example>
            <code>
            Print("SenkouSpanB Value = {0}", ichimokuKinkoHyo.SenkouSpanB.LastValue);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.KeltnerChannels">
            <summary>
            Keltner Channels are volatility-based envelopes set above and below an exponential moving average
            </summary>
        </member>
        <member name="P:cAlgo.API.Indicators.KeltnerChannels.Main">
            <summary>
            Moving Average Line
            </summary>
        </member>
        <member name="P:cAlgo.API.Indicators.KeltnerChannels.Top">
            <summary>
            Moving Average + ATR * BandDistance
            </summary>
        </member>
        <member name="P:cAlgo.API.Indicators.KeltnerChannels.Bottom">
            <summary>
            Moving Average - ATR * BandDistance
            </summary>
        </member>
        <member name="T:cAlgo.API.Indicators.MacdCrossOver">
            <summary>
            Calculates a MACD (moving average convergence/divergence) Indicator
            </summary>
            <remarks>
            MACD (moving average convergence/divergence) is used to spot changes in the strength, direction, momentum, and duration of a trend. 
            </remarks>
            <example>
            <code>
            //...
            private MacdCrossOver _macdCrossOver;
            
            [Output("MACD")]
            public IndicatorDataSeries Macd { get; set; }
            
            protected override void Initialize()
            {
                _macdCrossOver = Indicators.MacdCrossOver(LongCycle, ShortCycle, Period); 
                //...
            }
            
            public override void Calculate(int index)
            {
                Macd[index] = _macdCrossOver.MACD[index];
                //...
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MacdCrossOver.Histogram">
            <summary>
            The Histogram (bar graph)
            </summary>
            <remarks>
             Histogram of MACD: difference between the blue and red lines
            </remarks>
            <example>
            <code>
            //...
            private MacdCrossOver _macdCrossOver;
            
            [Output("Histogram")]
            public IndicatorDataSeries Histogram { get; set; }
            
            protected override void Initialize()
            {
                _macdCrossOver = Indicators.MacdCrossOver(LongCycle, ShortCycle, Period);
            }
            
            public override void Calculate(int index)
            {
                Histogram[index] = _macdCrossOver.Histogram[index];
                //...
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MacdCrossOver.MACD">
            <summary>
            The main MACD line (blue line)
            </summary>
            <remarks>
             MACD line: difference between the 12 and 26 days EMAs
            </remarks>
            <example>
            <code>
            //...
            private MacdCrossOver _macdCrossOver;
            
            [Output("MACD")]
            public IndicatorDataSeries Macd { get; set; }
            
            protected override void Initialize()
            {
                _macdCrossOver = Indicators.MacdCrossOver(LongCycle, ShortCycle, Period);
            }
            
            public override void Calculate(int index)
            {
                Macd[index] = _macdCrossOver.MACD[index];
                //...
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MacdCrossOver.Signal">
             <summary>
             The Signal line of MACD (red line)
             </summary>
             <remarks>
             Signal: 9 day EMA of the blue line
             </remarks>
             <example>
             <code>
             //...
             private MacdCrossOver _macdCrossOver;
             
             [Output("Signal")]
             public IndicatorDataSeries Signal { get; set; }
             
             protected override void Initialize()
             {
                 _macdCrossOver = Indicators.MacdCrossOver(LongCycle, ShortCycle, Period);
             }
             
             public override void Calculate(int index)
             {
                 Signal[index] = _macdCrossOver.Signal[index];
                 //...
             }
            
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.MoneyFlowIndex">
            <summary>
            The Money Flow Index is an oscillator that calculates buying and selling pressure using typical price and volume.
            It oscillates between zero and one hundred. It is typically used to identify trend reversals and price extremes.
            </summary>
            <example>
            <code>
            private MoneyFlowIndex _moneyFlow;
            
            [Parameter("Period", DefaultValue = 14)]
            public int Period { get; set; }
            
            [Output("Main")]
            public IndicatorDataSeries Result { get; set; }
            
            protected override void Initialize()
            {
               _moneyFlow = Indicators.MoneyFlowIndex(Period);
            }
            public override void Calculate(int index)
            {
               // Display Result of Indicator
               Result[index] = _moneyFlow.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MoneyFlowIndex.Result">
            <summary>
            The time series of MoneyFlowIndex Indicator
            </summary>
            <example>
            <code>
            private MoneyFlowIndex _moneyFlow;
            
            [Parameter("Period", DefaultValue = 21)]
            public int Period { get; set; }
            
            protected override void OnStart()
            {
                _moneyFlow = Indicators.MoneyFlowIndex(Period);
            }
            protected override void OnBar()
            {
                var currentValue = _moneyFlow.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.NegativeVolumeIndex">
            <summary>
            Dysart's Negative Volume Index assumes that the smart money is active on days when volume decreases and the not-so-smart money is active on days when volume increases (measured by the Positive Volume Index).
            </summary>
            <example>
            <code>
            private NegativeVolumeIndex _negativeVolume;
            
            [Parameter]
            public DataSeries Source { get; set; }
            
            [Output("Main")]
            public IndicatorDataSeries Result { get; set; }
            
            protected override void Initialize()
            {
               _negativeVolume = Indicators.NegativeVolumeIndex(Source);
            }
            public override void Calculate(int index)
            {
               // Display Result of Indicator
               Result[index] = _negativeVolume.Result[index];
            }
            </code>
            </example>    
        </member>
        <member name="P:cAlgo.API.Indicators.NegativeVolumeIndex.Result">
            <summary>
            The time series of NegativeVolumeIndex Indicator
            </summary>
            <example>
            <code>
            private NegativeVolumeIndex _negativeVolume;
            
            [Parameter]
            public DataSeries Source { get; set; }
            
            protected override void OnStart()
            {
                _negativeVolume = Indicators.NegativeVolumeIndex(Source);
            }
            protected override void OnBar()
            {
                var currentValue = _negativeVolume.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.OnBalanceVolume">
            <summary>
            On Balance Volume measures buying and selling pressure as a cumulative indicator that adds volume on up days and subtracts volume on down days.
            </summary>
            <example>
            <code>
            private OnBalanceVolume _onBalanceVolume;
            
            [Parameter]
            public DataSeries Source { get; set; }
            
            [Output("Main")]
            public IndicatorDataSeries Result { get; set; }
            
            protected override void Initialize()
            {
               _onBalanceVolume = Indicators.OnBalanceVolume(Source);
            }
            public override void Calculate(int index)
            {
               // Display Result of Indicator
               Result[index] = _onBalanceVolume.Result[index];
            }
            </code>
            </example>    
        </member>
        <member name="P:cAlgo.API.Indicators.OnBalanceVolume.Result">
            <summary>
            The time series of OnBalanceVolume Indicator
            </summary>
            <example>
            <code>
            private OnBalanceVolume _onBalanceVolume;
            
            [Parameter]
            public DataSeries Source { get; set; }
            
            protected override void OnStart()
            {
                _onBalanceVolume = Indicators.OnBalanceVolume(Source);
            }
            protected override void OnBar()
            {
                var currentValue = _onBalanceVolume.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.PositiveVolumeIndex">
            <summary>
            The positive volume index measures the trend of the stock prices for days when volume increases from previous day's volume.    
            </summary>
            <remarks>
            Assumes that the smart money is active on days when volume decreases (measured by the Negative Volume Index) 
            and the not-so-smart money is active on days when volume increases.
            </remarks>
            <example>
            <code>
            private PositiveVolumeIndex _positiveVolume;
            
            [Parameter]
            public DataSeries Source { get; set; }
            
            [Output("Main")]
            public IndicatorDataSeries Result { get; set; }
            
            protected override void Initialize()
            {
               _positiveVolume = Indicators.PositiveVolumeIndex(Source);
            }
            public override void Calculate(int index)
            {
               // Display Result of Indicator
               Result[index] = _positiveVolume.Result[index];
            }
            </code>
            </example>    
        </member>
        <member name="P:cAlgo.API.Indicators.PositiveVolumeIndex.Result">
            <summary>
            The time series result of the PositiveVolumeIndex Indicator instance
            </summary>
            <example>
            <code>
            protected override void OnBar()
            {
                var currentValue = _positiveVolume.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.PriceVolumeTrend">
            <summary>
            Price and Volume Trend is a variation of On Balance Volume, used to determine the strength of trends and warn of reversals.
            </summary>
            <example>
            <code>
            private PriceVolumeTrend _priceVolumeTrend;
            
            [Parameter]
            public DataSeries Source { get; set; }
            
            [Output("Main")]
            public IndicatorDataSeries Result { get; set; }
            
            protected override void Initialize()
            {
               _priceVolumeTrend = Indicators.PriceVolumeTrend(Source);
            }
            public override void Calculate(int index)
            {
               // Display Result of Indicator
               Result[index] = _priceVolumeTrend.Result[index];
            }
            </code>
            </example>    
        </member>
        <member name="P:cAlgo.API.Indicators.PriceVolumeTrend.Result">
            <summary>
            The time series of PriceVolumeTrend Indicator
            </summary>
            <example>
            <code>
            //...
            private PriceVolumeTrend _priceVolumeTrend;
            //...
            protected override void OnBar()
            {
                var currentValue = _priceVolumeTrend.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.TradeVolumeIndex">
            <summary>
            Trade Volume Index measures the amount of money flowing in and out of an asset.
            </summary>
            <remarks>
            The underlying assumption of this indicator is that there is buying pressure when the price trades near the asking price and selling pressure when it trades near the bid.
            </remarks>
            <example>
            <code>
            private TradeVolumeIndex _tradeVolume;
            
            [Parameter]
            public DataSeries Source { get; set; }
            
            [Output("Main")]
            public IndicatorDataSeries Result { get; set; }
            
            protected override void Initialize()
            {
               _tradeVolume = Indicators.TradeVolumeIndex(Source);
            }
            public override void Calculate(int index)
            {
               // Display Result of Indicator
               Result[index] = _tradeVolume.Result[index];
            }
            </code>
            </example>    
        </member>
        <member name="P:cAlgo.API.Indicators.TradeVolumeIndex.Result">
            <summary>
            The time series of TradeVolumeIndex Indicator
            </summary>
            <example>
            <code>
            //...
            private TradeVolumeIndex _tradeVolume;
            //...
            protected override void OnBar()
            {
                var currentValue = _tradeVolume.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.UltimateOscillator">
            <summary>
            The Ultimate Oscillator is a technical analysis oscillator based on a notion of buying or selling "pressure".
            </summary>
            <remarks>
            It uses the weighted average of three different time periods to reduce the volatility and false transaction signals that are associated with many other indicators that mainly rely on a single time period.
            </remarks>
            <example>
            <code>
            private UltimateOscillator ultimateOscillator;
            
            [Parameter("Cycle 1", DefaultValue = 7)]
            public int Cycle1 { get; set; }
            
            [Parameter("Cycle 2", DefaultValue = 14)]
            public int Cycle2 { get; set; }
            
            [Parameter("Cycle 3", DefaultValue = 28)]
            public int Cycle3 { get; set; }
            
            [Output("Main", Color = Colors.Green)]
            public IndicatorDataSeries Result { get; set; }
            
            protected override void Initialize()
            {
                ultimateOscillator = Indicators.UltimateOscillator(Cycle1,Cycle2,Cycle3);
            }        
            public override void Calculate(int index)
            {
                Result[index] = ultimateOscillator.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.UltimateOscillator.Result">
            <summary>
            The resulting time series of the UltimateOscillator Indicator calculation
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                double result = ultimateOscillator.Result[index];
                
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.VolumeOscillator">
             <summary>
             The Volume Oscillator identifies trends in volume using a two moving average system. A strong trend is signaled when it is positive. Falling volume indicates trend weakness.
             </summary>
             <example>
             <code>
             private VolumeOscillator _volumeOscillator;
            	
             [Parameter("Short Term", DefaultValue = 9)]
             public int ShortTerm { get; set; }
            
             [Parameter("Long Term", DefaultValue = 21)]
             public int LongTerm { get; set; }
            	
             protected override void Initialize()
             {
                _volumeOscillator = Indicators.VolumeOscillator(ShortTerm, LongTerm);
             }
             public override void Calculate(int index)
             {
                // Display Result of Indicator
                Result[index] = _volumeOscillator.Result[index];
             }
             </code>
             </example>    
        </member>
        <member name="P:cAlgo.API.Indicators.VolumeOscillator.Result">
            <summary>
            The time series of VolumeOscillator Indicator
            </summary>
            <example>
            <code>
            //...
            private VolumeOscillator _volumeOscillator;
            //...
            protected override void OnBar()
            {
                var currentValue = _volumeOscillator.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.VolumeROC">
            <summary>
            The Volume Rate of Change indicator measures the Rate Of Change of the tick volume.
            </summary>
            <remarks>
            It shows whether or not a volume trend is developing and can be used to confirm price moves.
            </remarks>
            <example>
            <code>
            private VolumeROC _volumeROC;
            
            [Parameter("Period", DefaultValue = 14)]
            public int Period { get; set; }
            
            [Output("Main")]
            public IndicatorDataSeries Result { get; set; }
            
            protected override void Initialize()
            {
               _volumeROC = Indicators.VolumeROC(Period);
            }
            public override void Calculate(int index)
            {
               // Display Result of Indicator
               Result[index] = _volumeROC.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.VolumeROC.Result">
            <summary>
            The time series of VolumeROC Indicator
            </summary>
            <example>
            <code>
            //...
            private VolumeROC _volumeROC;
            //...
            protected override void OnBar()
            {
                var currentValue = _volumeROC.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.ChaikinVolatility">
            <summary>
            Calculates a Chaikin Volatility Indicator
            </summary>
            <remarks>
            The Chaikin Volatility's main purpose is to confirm price trends and to forecast price reversals.
            </remarks>
            <example>
            <code>
            private ChaikinVolatility chaikinVolatility;
                    
            [Output("Main")]
            public IndicatorDataSeries Result { get; set; }
            
            protected override void Initialize()
            {
                chaikinVolatility = Indicators.ChaikinVolatility(14, 10, MovingAverageType.Simple);
            }
            public override void Calculate(int index)
            {
                // Display Result of Indicator
                Result[index] = _chaikinVolatility.Result[index];
                
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.ChaikinVolatility.Result">
            <summary>
            Chaikin Volatility Result Series.
            </summary>
            <value>The Output Series of ChaikinVolatility.</value>
            <example>
            <code>
            
            private ChaikinVolatility _chaikinVolatility;
            
            protected override void OnStart()
            {
                _chaikinVolatility = Indicators.ChaikinVolatility(Periods, _roc, MaType);
            }
            protected override void OnBar()
            {
                // Print to log
                Print("The Current Chaikin Volatility Value is: {0}", 
                        _chaikinVolatility.Result.LastValue);
            }
            
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.CommodityChannelIndex">
            <summary>
            Calculates a Commodity Channel Index
            </summary>
            <remarks>
            The Commodity Channel Index is used to determine overbought and oversold conditions relating to a symbol. The Commodity Channel Index can be used to forecast changes in price direction. 
            </remarks>
            <example>
            <code>
            using cAlgo.API;
            using cAlgo.API.Indicators;
            
            namespace cAlgo.Indicator
            {
                [Indicator]
                public class CommodityChannelIndexReferenceExample:Indicator
                {
                    private CommodityChannelIndex _commodityChannelIndex;
            
                    [Parameter("Periods", DefaultValue = 14)]
                    public int Periods { get; set; }
                    	
                    [Output("Main")]
                    public IndicatorDataSeries Result { get; set; }
            
                    protected override void Initialize()
                    {
                        _commodityChannelIndex = Indicators.CommodityChannelIndex(Periods);
                    }
                    public override void Calculate(int index)
                    {
                        // Display Result of Indicator
                        Result[index] = _commodityChannelIndex.Result[index];
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.CommodityChannelIndex.Result">
            <summary>
            Commodity Channel Index Result Series.
            </summary>
            <value>The Output Series of CommodityChannelIndex.</value>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            private CommodityChannelIndex _commodityChannelIndex;
                     
            &#47;&#47;&#46;&#46;&#46;
            
            protected override void OnStart()
            {
                _commodityChannelIndex = Indicators.CommodityChannelIndex(Periods);
            }
            protected override void OnBar()
            {
                // Print to log
                Print("The Current Commodity Channel Index is: {0}", _commodityChannelIndex.Result.LastValue);
            }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.DetrendedPriceOscillator">
            <summary>
            Calculates the Detrended Price Oscillator Indicator
            </summary>
            <remarks>
            The Detrended Price Oscillator eliminates trends in prices, showing only absolute changes in price movement.
            </remarks>
            <example>
            <code>
            private DetrendedPriceOscillator _detrendedPriceOscillator;
            	
            [Output("Main")]
            public IndicatorDataSeries Result { get; set; }
            
            protected override void Initialize()
            {
                _detrendedPriceOscillator = Indicators.DetrendedPriceOscillator(Source, Periods, MaType);
            }
            public override void Calculate(int index)
            {
                // Display Result of Indicator
                Result[index] = _detrendedPriceOscillator.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.DetrendedPriceOscillator.Result">
            <summary>
            The resulting time series of Detrended Price Oscillator calculation
            </summary>
            <example>
            <code> 
             
            private _detrendedPriceOscillator _dpoFast;
            private _detrendedPriceOscillator _dpoSlow;
            
            protected override void OnStart()
            {
                _dpoFast = Indicators.DetrendedPriceOscillator(Source, PeriodFast, MaType);
                _dpoSlow = Indicators.DetrendedPriceOscillator(Source, PeriodSlow, MaType);
            }
            
            protected override void OnBar()
            {
                if(_dpoFast.Result.Count &#60; 1)
                    return;
            
                int currentIndex = _dpoFast.Result.Count - 1;
                int prevIndex = currentIndex - 1;
            
                if (_dpoFast.Result[prevIndex] > _dpoSlow.Result[prevIndex])
                {
                    //Do something
                }
            }
            
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.FractalChaosBands">
            <summary>
            The Fractal Chaos Bands indicator attempts to determine whether or not the market is trending.
            </summary>
            <remarks>
            When the market is trending, the bands will have a slope, and if the market is not trending or choppy, the bands will flatten out.
            The flatter the bands, the stronger the signal that the market is choppy. The more steep the band slopes, the stronger the signal that the market trending or stable.
            </remarks>
            <example>
            <code>
            private FractalChaosBands _fractalChaosBands;
            
            [Parameter("Period", DefaultValue = 14)]
            public int Period { get; set; }
            
            protected override void Initialize()
            {        
                _fractalChaosBands = Indicators.FractalChaosBands(Period);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.FractalChaosBands.High">
            <summary>
            The high limit of the chaos band.
            </summary>
            <example>
            <code>
            
            public override void Calculate(int index)
            {            
                Print("Fractal Chaos Bands High = {0}", _fractalChaosBands.High[index]); 
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.FractalChaosBands.Low">
            <summary>
            The low limit of the chaos band.
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {            
                Print("Fractal Chaos Bands Low = {0}", _fractalChaosBands.Low[index]); 
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.DirectionalMovementSystem">
            <summary>
            Welles Wilder's Directional Movement Indicator calculation
            </summary>
            <remarks>
             Welles Wilder's Directional Movement System uses three indicators to determine whether the market is trending, and in which direction, and sends trading signals accordingly. A buy signal occurs when +DI line crosses above -DI line. A sell signal occurs when -DI line crosses below +DI line.</remarks>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            [Indicator(IsOverlay = true)]
            public class SampleADX : Indicator
            {
                private DirectionalMovementSystem _dms;
                private double _dIplus;
                private double _dIminus;
            
                [Parameter("ADX Period", DefaultValue = 14)]
                public int Period { get; set; }
            
                [Output("Buy", PlotType = PlotType.Points, Color = Colors.Green, Thickness = 4)]
                public IndicatorDataSeries Buy { get; set; }
            
                [Output("Sell", PlotType = PlotType.Points, Color = Colors.Red, Thickness = 4)]
                public IndicatorDataSeries Sell { get; set; }
            
                protected override void Initialize()
                {
                    _dms = Indicators.DirectionalMovementSystem(Period);
                }
            
                public override void Calculate(int index)
                {
            
                    _dIplus = _dms.DIPlus[index];
                    _dIminus = _dms.DIMinus[index];
            
                    if (_dIminus > _dIplus)
                    {
                        Sell[index] = MarketSeries.Close[index] + Symbol.PointSize*100;
                    }
                    else
                    {
                        Buy[index] = MarketSeries.Close[index] - Symbol.PointSize*100;
                    }
                }
            }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.DirectionalMovementSystem.ADX">
            <summary>
            The Average Directional Movement Index (ADX) indicates whether the market is trending or ranging.
            </summary>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            [Robot]
            public class SampleRobot : Robot
            
            &#47;&#47;&#46;&#46;&#46;
            
            private DirectionalMovementSystem _dms;
            
            protected override void Initialize()
            {
                _dms = Indicators.DirectionalMovementSystem(Period);
            }
            &#47;&#47;&#46;&#46;&#46;
            
            protected override void OnBar()
            {
                Print("The Current Average Directional Movement Index is: {0}", _dms.ADX.LastValue);
            }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.DirectionalMovementSystem.DIPlus">
            <summary>
            The Positive Direction Indicator (+DI) indicates upward trend movement;
            </summary>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            [Robot]
            public class SampleRobot : Robot
            
            &#47;&#47;&#46;&#46;&#46;
            
            private DirectionalMovementSystem _dms;
            
            protected override void Initialize()
            {
                _dms = Indicators.DirectionalMovementSystem(Period);
            }
            &#47;&#47;&#46;&#46;&#46;
            
            protected override void OnBar()
            {
                Print("The Current Positive Direction Indicator (+DI) is: {0}", _dms.DIPlus.LastValue);
            }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.DirectionalMovementSystem.DIMinus">
            <summary>
            The Negative Direction Indicator (-DI) indicates downward trend movement;
            </summary>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            [Robot]
            public class SampleRobot : Robot
            
            &#47;&#47;&#46;&#46;&#46;
            
            private DirectionalMovementSystem _dms;
            
            protected override void Initialize()
            {
                _dms = Indicators.DirectionalMovementSystem(Period);
            }
            &#47;&#47;&#46;&#46;&#46;
            
            protected override void OnBar()
            {
                Print("The Current Negative Direction Indicator (-DI) is: {0}", _dms.DIMinus.LastValue);
            }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.HistoricalVolatility">
            <summary>
            The measured price fluctuation over a specified time period.
            </summary>
            <remarks>
            The higher the values of the indicator, the more volatile an instrument is.
            </remarks>
            <example>
            <code>
            private HistoricalVolatility historicalVolatility;
            
            private const int BarHistory = 252;
            
            [Parameter("Period", DefaultValue = 14)]
            public int Period { get; set; }
            
            protected override void Initialize()
            {
                historicalVolatility = Indicators.HistoricalVolatility
                    (MarketSeries.Close, Period, BarHistory);
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.HistoricalVolatility.Result">
            <summary>
            The result of the HistoricalVolatility Indicator
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                Print("Historical Volatility = {0}",
                     _historicalVolatility.Result[index]);
                }
            
             </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.LinearRegressionForecast">
            <summary>
            Linear Regression Forecast is one of the indicators calculated by the Linear Regression approach.
            </summary>
            <remarks>
            The Linear Regression Forecast is used for identifying trends and trend direction, and shows the statistical trend of a financial instrument over a specified time period. The calculation uses a Linear Regression Line.
            </remarks>
            <example>
            <code>
            
            private LinearRegressionForecast _linearRegressionForecast;
            
            [Parameter("Period", DefaultValue = 14)]
            public int Period { get; set; }
            
            protected override void Initialize()
            {
                // initialize a new instance of LinearRegressionForecastIndicator class 
                _linearRegressionForecast = Indicators.LinearRegressionForecast(MarketSeries.Close, Period);
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.LinearRegressionForecast.Result">
            <summary>
            The Result Series of the Linear Regression Forecast Indicator
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                // Print the current result of the Linear Regression Forecast to the log
                Print("Linear Regression Forecast at the current index is = {0}", _linearRegressionForecast.Result[index]);
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.AccumulativeSwingIndex">
            <summary>
            A variation on Wilder's swing index which plots an accumulation of the swing index value of each candlestick or bar.
            </summary>
            <remarks>
            The accumulative swing index is used to gain a longer-term picture than the Wilder's swing index. 
            When the accumulative swing index is positive, the long-term trend is up. 
            When the accumulative swing index is negative, it signals a downwards long-term trend. 
            </remarks>
            <example>
            <code>
            using cAlgo.API;
            using cAlgo.API.Indicators;
            
            namespace cAlgo.Indicator
            {
                [Indicator]
                public class AccumSwingIndexReferenceExample:Indicator
                {
                    private AccumulativeSwingIndex _accumulativeSwingIndex;
            
                    [Parameter("Limit Move", DefaultValue = 12)]
                    public int LimitMove { get; set; }
            
                    [Output("Main")]
                    public IndicatorDataSeries Result { get; set; }
            
                    protected override void Initialize()
                    {
                        _accumulativeSwingIndex = Indicators.AccumulativeSwingIndex(LimitMove);
                    }
                    public override void Calculate(int index)
                    {
                        // Display Result of Indicator
                        Result[index] = _accumulativeSwingIndex.Result[index];
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.AccumulativeSwingIndex.Result">
            <summary>
            The time series of AccumulativeSwingIndex.
            </summary>
            <value>The Output Series of AccumulativeSwingIndex.</value>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            private AccumulativeSwingIndex _accumulativeSwingIndex;
            
            &#47;&#47;&#46;&#46;&#46;
            
            [Parameter("Limit Move", DefaultValue = 12)]
            public int LimitMove { get; set; }
                    
            &#47;&#47;&#46;&#46;&#46;
            
            protected override void OnStart()
            {
                _accumulativeSwingIndex = Indicators.AccumulativeSwingIndex(LimitMove);
            }
            protected override void OnBar()
            {
                // Print to log
                Print("The Current Accumulative Swing Index is: {0}", _accumulativeSwingIndex.Result.LastValue);
            }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.Aroon">
            <summary>
            An indicator for identifying trends in a currency pair, as well as for gauging the probability of a trend reversal. 
            </summary>
            <remarks>The indicator fluctuates between 0 and 100, with values above 80 signalling an upward trend, and values below 20 signalling a downward trend.
            </remarks>
            <example>
            <code>
            using cAlgo.API;
            using cAlgo.API.Indicators;
            
            namespace cAlgo.Indicators
            {
                [Indicator]
                public class AroonReferenceExample:Indicator
                {
                    private Aroon _aroon;
            
                    [Parameter("Periods", DefaultValue = 25)]
                    public int Periods { get; set; }
            
                    [Output("Up")]
                    public IndicatorDataSeries ResultAroonUp { get; set; }
            
                    [Output("Down")]
                    public IndicatorDataSeries ResultAroonDown { get; set; }
            
                    protected override void Initialize()
                    {
                        _aroon = Indicators.Aroon(Periods);
                    }
            
                    public override void Calculate(int index)
                    {
                        ResultAroonUp[index] = _aroon.Up[index];
                        ResultAroonDown[index] = _aroon.Down[index];
                    }
            
                }
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.Aroon.Up">
            <summary>
            Aroon Up
            </summary>
            <value>The Aroon Up result.</value>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            [Parameter("Periods", DefaultValue = 25)]
            public int Periods { get; set; }
            
            &#47;&#47;&#46;&#46;&#46;
            
            private Aroon _aroon;
            
            &#47;&#47;&#46;&#46;&#46;
            
            protected override void OnStart()
            {
                _aroon = Indicators.Aroon(Periods);
            }
            protected override void OnBar()
            {
                Print("Current Aroon Up Value is: {0}", _aroon.Up.LastValue);
            }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.Aroon.Down">
            <summary>
            Aroon Down
            </summary>
            <value>The Aroon Down result.</value>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            [Parameter("Periods", DefaultValue = 25)]
            public int Periods { get; set; }
            
            &#47;&#47;&#46;&#46;&#46;
            
            private Aroon _aroon;
            
            &#47;&#47;&#46;&#46;&#46;
            
            protected override void OnStart()
            {
                _aroon = Indicators.Aroon(Periods);
            }
            protected override void OnBar()
            {
                Print("Current Aroon Down Value is: {0}", _aroon.Down.LastValue);
            }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.BollingerBands">
            <summary>
            Bollinger Bands are used to confirm signals. The bands indicate overbought and oversold levels relative to a moving average.
            </summary>
            <remarks>Bollinger bands widen in volatile market periods, and contract during less volatile periods. Tightening of the bands is often used a signal that there will shortly be a sharp increase in market volatility.
            </remarks>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            [Robot]
            public class SampleRobot : Robot
            
            &#47;&#47;&#46;&#46;&#46;
            
            [Parameter("Source")]
            public DataSeries Source { get; set; }
            
            [Parameter("BandPeriods", DefaultValue = 14)]
            public int BandPeriod { get; set; }
            
            [Parameter("Std", DefaultValue = 14)]
            public int std { get; set; }
            
            [Parameter("MAType")]
            public MovingAverageType MAType { get; set; }
            
            &#47;&#47;&#46;&#46;&#46;
            
            private BollingerBands boll;
            
            &#47;&#47;&#46;&#46;&#46;
            
            protected override void OnStart()
            {
                boll = Indicators.BollingerBands(Source,BandPeriod,std,MAType);
            }
            protected override void OnBar()
            {
                Print("Current Main Bollinger Band's price is: {0}", boll.Main.LastValue);
                Print("Current Bottom Bollinger Band's price is: {0}", boll.Bottom.LastValue);
                Print("Current Top Bollinger Band's price is: {0}", boll.Top.LastValue);
            }
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.BollingerBands.Main">
            <summary>
            Moving Average (Middle Bollinger Band).
            </summary>
            <value>The main result.</value>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            [Robot]
            public class SampleRobot : Robot
            
            &#47;&#47;&#46;&#46;&#46;
            
            [Parameter("Source")]
            public DataSeries Source { get; set; }
            
            [Parameter("BandPeriods", DefaultValue = 14)]
            public int BandPeriod { get; set; }
            
            [Parameter("Std", DefaultValue = 14)]
            public int std { get; set; }
            
            [Parameter("MAType")]
            public MovingAverageType MAType { get; set; }
            
            &#47;&#47;&#46;&#46;&#46;
            
            private BollingerBands boll;
            
            &#47;&#47;&#46;&#46;&#46;
            
            protected override void OnStart()
            {
                boll = Indicators.BollingerBands(Source,BandPeriod,std,MAType);
            }
            protected override void OnBar()
            {
                Print("Current Main Bollinger Band's price is: {0}", boll.Main.LastValue);
            }
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.BollingerBands.Top">
            <summary>
            Upper Bollinger Band.
            </summary>
            <value>The Upper Bollinger Band result.</value>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            [Robot]
            public class SampleRobot : Robot
            
            &#47;&#47;&#46;&#46;&#46;
            
            [Parameter("Source")]
            public DataSeries Source { get; set; }
            
            [Parameter("BandPeriods", DefaultValue = 14)]
            public int BandPeriod { get; set; }
            
            [Parameter("Std", DefaultValue = 14)]
            public int std { get; set; }
            
            [Parameter("MAType")]
            public MovingAverageType MAType { get; set; }
            
            &#47;&#47;&#46;&#46;&#46;
            
            private BollingerBands boll;
            
            &#47;&#47;&#46;&#46;&#46;
            
            protected override void OnStart()
            {
                boll = Indicators.BollingerBands(Source,BandPeriod,std,MAType);
            }
            protected override void OnBar()
            {
                Print("Current Top Bollinger Band's price is: {0}", boll.Top.LastValue);
            }
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.BollingerBands.Bottom">
            <summary>
            Lower Bollinger Band.
            </summary>
            <value>The Bottom Bollinger Band result.</value>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            [Parameter("Source")]
            public DataSeries Source { get; set; }
            [Parameter("BandPeriods", DefaultValue = 14)]
            public int BandPeriod { get; set; }
            [Parameter("Std", DefaultValue = 14)]
            public int std { get; set; }
            [Parameter("MAType")]
            public MovingAverageType MAType { get; set; }
            &#47;&#47;&#46;&#46;&#46;
            private BollingerBands boll;
            &#47;&#47;&#46;&#46;&#46;
            protected override void OnStart()
            {
                boll = Indicators.BollingerBands(Source,BandPeriod,std,MAType);
            }
            protected override void OnBar()
            {
                Print("Current Bottom Bollinger Band's price is: {0}", boll.Bottom.LastValue);
            }
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.ExponentialMovingAverage">
            <summary>
            The exponential moving average of the price data source over a period of time.
            </summary> 
            <remarks>
            The exponential moving average is similar to the simple moving average, but applies more weight to more recent data.
            The weighting for each older price data decreases exponentially. 
            Therefore the exponential moving average reacts faster to latest price changes than the simple moving average.
            </remarks>
            <example>
            <code>
                [Indicator]
                public class EmaExample : Indicator
                {
                    private ExponentialMovingAverage _emaFast;
                    private ExponentialMovingAverage _emaSlow;
            
                    [Parameter("Data Source")]
                    public DataSeries Price { get; set; }
            
                    [Parameter("Slow Periods", DefaultValue = 10)]
                    public int SlowPeriods { get; set; }
            
                    [Parameter("Fast Periods", DefaultValue = 5)]
                    public int FastPeriods { get; set; }
            
                    protected override void Initialize()
                    {
                        // initialize new instances of ExponentialMovingAverage Indicator class 
                        _emaFast = Indicators.ExponentialMovingAverage(Price, FastPeriods);
                        // _emaSlow is the exponential moving average of the emaFast 
                        _emaSlow = Indicators.ExponentialMovingAverage(_emaFast.Result, SlowPeriods);
            
                    }
            
                    public override void Calculate(int index)
                    {
                        // If the index is less than SlowPeriods don't calculate
                        if(index &#60;= SlowPeriods)
                        {
                            return;
                        }
            
                        if(_emaFast.Result.HasCrossedAbove(_emaSlow.Result,0))
                        {
                            // Print the index at which the fast ema crossed the slow ema
                            Print("Fast EMA Has Crossed Above at index = {0}", index);
                        }
                    }
                }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.HighMinusLow">
            <summary>
            Difference between MarketSeries.High and MarketSeries.Low calculation for each index
            </summary>
            <remarks>
            This volatility indicator works by calculating the difference between the high and the low of each trendbar. 
            The larger the difference between high and low, the more volatile the market during that period.
            </remarks>
            <example>
            <code>
            using cAlgo.API;
            using cAlgo.API.Indicators;
            
            namespace cAlgo.Indicators
            {
                [Indicator]
                public class Example : Indicator
                {
                    private HighMinusLow _highMinusLow;
            
                    protected override void Initialize()
                    {
                        _highMinusLow = Indicators.HighMinusLow();
                    }
            
                    public override void Calculate(int index)
                    {
                        // same as MarketSeries.High[index] - MarketSeries.Low[index];
                        Print("High minus Low result = {0}", _highMinusLow.Result[index]);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.HighMinusLow.Result">
            <summary>
            The resulting time series of the calculation
            </summary>
            <example>
            <code>
            Print("High minus Low result = {0}", _highMinusLow.Result[index]);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.LinearRegressionIntercept">
            <summary>
            Linear Regression Intercept is one of the indicators calculated by the Linear Regression approach.
            </summary>
            <remarks>
            Linear regression is a statistical tool used to predict the future from past data.
            </remarks>
            <example>
            <code>
            [Parameter("Period", DefaultValue = 14)]
            public int Period { get; set; }
            
            protected override void OnStart()
            {
                // initialize a new instance of LinearRegressionIntercept indicator class
                _linearRegressionIntercept = Indicators.LinearRegressionIntercept(MarketSeries.Close, Period);
            }
              </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.LinearRegressionIntercept.Result">
            <summary>
            The Result Series of the Linear Regression Intercept Indicator
            </summary>
            <example>
            <code>
             
            public override void Calculate(int index)
            {
                // Result of _linearRegressionIntercept at the current index
                double result = _linearRegressionIntercept.Result[index];
                // Print the current result to the log
                Print("Linear Regression Intercept at the current index is = {0}", result);
            }
             
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.LinearRegressionRSquared">
            <summary>
            Linear Regression R Squared is used to confirm the strength of the market trend
            </summary>
            <remarks>
            A higher value of R-Squared means that the stronger the trend.
            </remarks>
            <example>
            <code>    
            private LinearRegressionRSquared rSquared;
            
            protected override void OnStart()
            {
                // initialize rSquared indicator
                rSquared = Indicators.LinearRegressionRSquared(Source, Period);
            }
            protected override void OnTick()
            {
                Print("{0}", rSquared.Result.LastValue);
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.LinearRegressionRSquared.Result">
            <summary>
            The Result Series of the LinearRegressionRSquared Indicator
            </summary>
            <example>
            <code>
            private LinearRegressionRSquared rSquared;
            
            protected override void OnStart()
            {
                // initialize rSquared indicator
                rSquared = Indicators.LinearRegressionRSquared(MarketSeries.Close, 9);
            }
            protected override void OnTick()
            {
                // Print the last value of rSquared indicator to the log
                Print("The current value of R Squared is {0}", rSquared.Result.LastValue);
            }
            
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.LinearRegressionSlope">
            <summary>
            The calculation of Linear Regression Slope Indicator
            </summary>
            <remarks>
            Linear Regression Slope refers to the slope of the Least Squares Line. This slope represents how prices change per unit of time.
            </remarks>
            <example>
            <code>
            private LinearRegressionSlope _lrSlope;
            protected override void Initialize()
            {
                _lrSlope = Indicators.LinearRegressionSlope(MarketSeries.Close, 14);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.LinearRegressionSlope.Result">
            <summary>
            The resulting time series of the calculation of LinearRegressionSlope Indicator
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                double lr = _lrSlope.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.MacdHistogram">
            <summary>
            The calculation of the MACD Histogram
            </summary>
            <remarks>
            MACD (moving average convergence/divergence) is used to spot changes in the strength, direction, momentum, and duration of a trend.   
            </remarks>
            <example>
            <code>
            //...
            private MacdHistogram macd;
            //...
            macd = Indicators.MacdHistogram(LongCycle, ShortCycle, Period);
            //...
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MacdHistogram.Histogram">
            <summary>
             Histogram (bar graph) The difference between the short and long cycles
            </summary>
            <example>
            <code>
            //...
            private MacdHistogram macd;
            macd = Indicators.MacdHistogram(LongCycle, ShortCycle, Period);
            //...
            public override void Calculate(int index)
            {
                double macdHistogramResult = macd.Histogram[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MacdHistogram.Signal">
            <summary>
             Signal (red line) The exponential moving average  of the macd histogram
            </summary>
            <example>
            <code>
            //...
            private MacdHistogram macd;
            macd = Indicators.MacdHistogram(LongCycle, ShortCycle, Period);
            //...
            public override void Calculate(int index)
            {
                double macdSignalResult = macd.Signal[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.MassIndex">
            <summary>
            The calculation of Mass Index Indicator
            </summary>
            <remarks>
            The Mass Index can be a great tool to identify future price reversal. It is expected for a reversal to occur when Mass index is rising.
            </remarks>
            <example>
            <code>
            private MassIndex _massIndex;
            protected override void Initialize()
            {
                _massIndex = Indicators.MassIndex(14);
            }
            
            public override void Calculate(int index)
            {
                double massIndex = _massIndex.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MassIndex.Result">
            <summary>
            The resulting series of the calculation of the Mass Index
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                double massIndex = _massIndex.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.MedianPrice">
            <summary>
            A Median Price is an average of one period’s high and low values.
            </summary>
            <remarks>A Median Price is often used as a component for calculating other indicators.
            </remarks>
            <example>
            <code>
            private MedianPrice _price;
            protected override void Initialize()
            {
                _price = Indicators.MedianPrice();
            }
            public override void Calculate(int index)
            {
                double price = _price.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MedianPrice.Result">
            <summary>
            The resulting series of the calculation of Median Price
            </summary>
            <example>
            <code>
            private MedianPrice _price;
            protected override void Initialize()
            {
                _price = Indicators.MedianPrice();
            }
            public override void Calculate(int index)
            {
                double price = _price.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.MomentumOscillator">
            <summary>
            The calculation of a momentum oscillator
            </summary>
            <remarks>
            Momentum measures the rate of price change over time and provides a leading indicator of changes in trend. It gives signals before price action happens. The momentum oscillator is unbounded i.e. there is no maximum or minimum value. It is calculated as the closing price now minus the closing price n periods ago. 
             </remarks>
            <example>
            <code>
            private MomentumOscillator _momentum;
            protected override void Initialize()
            {
                _momentum = Indicators.MomentumOscillator(MarketSeries.Close, 14);
            }
            
            public override void Calculate(int index)
            {
                double momentum = _momentum.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MomentumOscillator.Result">
            <summary>
            The resulting series of the momentum oscillator calculation
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                double momentum = _momentum.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.MovingAverage">
            <summary>
            Moving Average Indicator calculation
            </summary>
            <remarks>
            Used to smooth the price data to form a trend following indicator
            </remarks>
            <example>
            <code>
            private MovingAverage ma;
            
            protected override void Initialize()
            {
                ma = Indicators.MovingAverage(Source, MAPeriods, MAType);
            }
            &#47;&#47;&#46;&#46;&#46;
            public override void Calculate(int index)
            {
                MA[index] = ma.Result[index];   
                &#47;&#47;&#46;&#46;&#46;
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MovingAverage.Result">
            <summary>
            The resulting time series of the calculation
            </summary>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            [Output]
            public IndicatorDataSeries Result { get; set; }
            
            private MovingAverage ma;
            
            protected override void Initialize()
            {
                ma = Indicators.MovingAverage(Source, MAPeriods, MAType);
            }
            public override void Calculate(int index)
            {
                Result[index] = ma.Result[index];   
            
                &#47;&#47;&#46;&#46;&#46;
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.ParabolicSAR">
            <summary>
            The calculation of Parabolic SAR Indicator
            </summary>
            <remarks>
            Developed by Welles Wilder, SAR stands for stop and reverse and is based on a concept similar to time decay, 
            unless a security can continue to generate more profits over time, it should be liquidated. 
            SAR trails prices as the trend extends over time, being below prices when they are increasing and above prices 
            when they are decreasing. In this view, the indicator stops and reverses when the price trend reverses and breaks 
            above or below the indicator. The indicator generally works well in trending markets, but not during non-trending, 
            sideways phases. Therefore, Wilder recommended establishing the strength and direction of the trend first through the 
            use of other indicators and then using the Parabolic SAR to trade that trend.The indicator is below prices when 
            prices are rising and above prices when prices are falling. In this regard, the indicator stops and reverses when 
            the price trend reverses and breaks above or below the indicator.
            </remarks>
            <example>
            <code>
            private ParabolicSAR _parabolic;
            protected override void Initialize()
            {
                _parabolic = Indicators.ParabolicSAR(minaf, maxaf);
            }
            public override void Calculate(int index)
            {
                double parabolic = _parabolic.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.ParabolicSAR.Result">
            <summary>
            The resulting series of Parabolic SAR Indicator
            </summary>
            <example>
            <code>
            private ParabolicSAR _parabolic;
            protected override void Initialize()
            {
                _parabolic = Indicators.ParabolicSAR(minaf, maxaf);
            }
            public override void Calculate(int index)
            {
                double parabolic = _parabolic.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.PriceOscillator">
            <summary>
            The Price Oscillator calculates the spread between a short-period moving average and a long-period moving average.
            </summary>
            <example>
            <code>
            //...
            private PriceOscillator priceOscillator;
             
            protected override void Initialize()
            {
                priceOscillator = Indicators.PriceOscillator
                    (Price, LongCycle, ShortCycle, MAType);
            }
            
            public override void Calculate(int index)
            {
                double current = priceOscillator.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.PriceOscillator.Result">
            <summary>
            The resulting time series of the PriceOscillator Indicator calculation
            </summary>
            <example>
            <code>
            private PriceOscillator priceOscillator;
                    
            protected override void Initialize()
            {
                priceOscillator = Indicators.PriceOscillator
                    (MarketSeries.Close, 14, 5, MovingAverageType.Simple);
            }
            
            public override void Calculate(int index)
            {
                double result = priceOscillator.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.PriceROC">
            <summary>
            The Price ROC calculates the percentage change between the most recent price and the n-periods of past price.
            </summary>
            <remarks>Can be used to determine whether an instrument is overbought or oversold.
            </remarks>
            <example>
            <code>
            private PriceROC _result;        
            protected override void Initialize()
            {
                _result = Indicators.PriceROC(MarketSeries.Close, 14);
            }
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.PriceROC.Result">
            <summary>
            The resulting time series of the PriceROC Indicator calculation
            </summary>
            <example>
            <code>
            private PriceROC _result;        
            protected override void Initialize()
            {
                _result = Indicators.PriceROC(MarketSeries.Close, 14);
            }
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.RainbowOscillator">
            <summary>
            Developed by Mel Widner, Rainbow Oscillator is based on multiple moving averages and helps to identify trends and provides overbought/oversold levels.
            </summary>
            <example>
            <code>
            //...
            private RainbowOscillator rainbow;
            //...
            protected override void Initialize()
            {
                rainbow = Indicators.RainbowOscillator
                    (MarketSeries.Close, 9, MovingAverageType.Simple);
                //...
            }
            public override void Calculate(int index)
            {
                double result = rainbow.Result[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.RainbowOscillator.Result">
            <summary>
            The resulting time series of the RainbowOscillator Indicator calculation
            </summary>
            <example>
            <code>
            //...
            private RainbowOscillator rainbow;      
            //...
            protected override void Initialize()
            {
                rainbow = Indicators.RainbowOscillator
                    (MarketSeries.Close, 9, MovingAverageType.Simple);
                //...
            }
            public override void Calculate(int index)
            {
                double result = rainbow.Result[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.SimpleMovingAverage">
            <summary>
             The simple moving average is an average of price within n previous periods.
            </summary>
            <remarks>
            The simple moving average is the unweighted mean of the previous n price data, 
            where n is the period used for the calculation and price data the price data source, e.g. The closing price.
            </remarks>
            <example>
            <code>
            
                [Indicator]
                public class SimpleMovingAverageExample : Indicator
                {
                    [Parameter]
                    public DataSeries Source { get; set; }
            
                    [Parameter(DefaultValue = 14, MinValue = 2)]
                    public int Periods { get; set; }
            
                    [Output("Result", Color = Colors.Orange)]
                    public IndicatorDataSeries Result { get; set; }
            
            
                    private SimpleMovingAverage _simpleMovingAverage;
            
                    protected override void Initialize()
                    {
                        _simpleMovingAverage = Indicators.SimpleMovingAverage(Source, Periods);
                    }
            
                    public override void Calculate(int index)
                    {
                        var average = _simpleMovingAverage.Result[index];
            
                        double sum = 0;
            
                        for (var period = 0; period &#60; Periods; period++)
                        {
                            sum += Math.Pow(Source[index - period] - average, 2.0);
                        }
            
                        Result[index] = Math.Sqrt(sum / Periods);
                    }
                }
            
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.StandardDeviation">
            <summary>
            Standard Deviation measures the market volatility with a commonly used statisctical function.
            </summary>
            <example>
            <code>
            private StandardDeviation _standardDeviation;
            protected override void Initialize()
            {            
                _standardDeviation = Indicators.StandardDeviation(MarketSeries.Close, 14, MovingAverageType.Simple);
            }
            public override void Calculate(int index)
            {
                double result = _standardDeviation.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.StandardDeviation.Result">
            <summary>
            The resulting time series of the Standard Deviation Indicator calculation
            </summary>
            <example>
            <code>
            private StandardDeviation _standardDeviation;
            protected override void Initialize()
            {            
                _standardDeviation = Indicators.StandardDeviation(MarketSeries.Close, 14, MovingAverageType.Simple);
            }
            public override void Calculate(int index)
            {
                double result = _standardDeviation.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.StochasticOscillator">
            <summary>
            The Stochastic Oscillator is a momentum indicator that aims to show price reversals by comparing the closing price to the price range.
            </summary>
            <remarks>
            Calculates the range between the high and low price during a given period of time. The current price is then expressed as a percentage of this range with 0% indicating the bottom of the range and 100% indicating the top of the range over this time period. 
            Based on the theory that prices tend to close near the boundaries of the recent range.
            </remarks>
            <example>
            <code>
            private StochasticOscillator _stochastic;
            protected override void Initialize()
            {
                // Initialize the Stochastic Oscillator indicator
                 _stochastic = Indicators.StochasticOscillator(kPeriods, kSlowing, dPeriods, maType);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.StochasticOscillator.PercentD">
            <summary>
            %D is 3 Period Exponential Moving Average of %K
            </summary>
            <example>
            <code>
            double result = _stochastic.PercentK[index];
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.StochasticOscillator.PercentK">
             <summary>
             Calculation of %K is 100 multiplied by the ratio of the closing price minus the lowest price over the last N periods over the highest price over the last N minus the lowest price over the last N periods.
             </summary>
             <example>
             <code>
            double result = _stochastic.PercentD[index];
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.StochasticOscillator.PersentsD">
            <summary>
            Obsolete. Use PercentD property instead.
            </summary>
        </member>
        <member name="P:cAlgo.API.Indicators.StochasticOscillator.PersentsK">
            <summary>
            Obsolete. Use PercentK property instead.
            </summary>
        </member>
        <member name="T:cAlgo.API.Indicators.TimeSeriesMovingAverage">
            <summary>
            A Time Series Moving Average is moving average based on linear regression forecast. 
            </summary>
            <example>
            <code>
            private TimeSeriesMovingAverage _timeSeriesMovingAverage;
            
            protected override void Initialize()
            {
                _timeSeriesMovingAverage = Indicators.TimeSeriesMovingAverage(MarketSeries.Close, 9);
            }
             
            public override void Calculate(int index)
            {
                //Print the current value of TimeSeries Moving Average to the log
                Print("The current TimeSeries Moving Average  is {0}", _timeSeriesMovingAverage.Result[index]);
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.Trix">
            <summary>
            TRIX was developed by Jack Huton. It is a momentum oscillator that will help you filter unimportant price movement.
            </summary>
            <remarks>
            When TRIX is rising, it is a good signal to buy, whether when TRIX is falling, it is a good signal to sell.
            </remarks>
            <example>
            <code>
            private Trix _result;
            protected override void Initialize()
            {
                _result = Indicators.Trix(MarketSeries.Close, 14);
            }
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.Trix.Result">
            <summary>
            The resulting time series of the Trix Indicator calculation
            </summary>
            <example>
            <code>
            private Trix _result;
            protected override void Initialize()
            {
                _result = Indicators.Trix(MarketSeries.Close, 14);
            }
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.TrueRange">
             <summary>
             The Average True Range is a measure of market volatility developed by Wilder.
             </summary>
             <example>
             <code>
            private TrueRange tri;
             
            protected override void Initialize()
            {
                 tri = Indicators.TrueRange();
            }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.TrueRange.Result">
            <summary>
            The resulting time series of the TrueRange Indicator calculation
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                Result[index] = tri.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.TypicalPrice">
            <summary>
            A Typical Price is an average of high, low and close values for a single period.
            </summary>
            <remarks>
            Typical Price gives a simplified view of all prices for a period as a single series. 
            </remarks>
            <example>
            <code>
            private TypicalPrice _result;
            protected override void Initialize()
            {
                _result = Indicators.TypicalPrice();
            }        
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.TypicalPrice.Result">
            <summary>
            The resulting time series of the TypicalPrice Indicator calculation
            </summary>
            <example>
            <code>
            private TypicalPrice _result;
            protected override void Initialize()
            {
                _result = Indicators.TypicalPrice();
            }        
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.VerticalHorizontalFilter">
            <summary>
            Vertical Horizontal Filter determines whether a price is going through a congestion phase or a trending phase.
            </summary>
            <remarks>
            Vertical Horizontal Filter rises when trend is strong and falls when trend is weak. 
            </remarks>
            <example>
            <code>
            //...
            private VerticalHorizontalFilter VHFilter;
            //...
            protected override void Initialize()
            {
                VHFilter = Indicators.VerticalHorizontalFilter(MarketSeries.Open, 28);
                //...
            }        
            public override void Calculate(int index)
            {
                double value = VHFilter.Result[index];
                //...   
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.VerticalHorizontalFilter.Result">
            <summary>
            The resulting time series of the VerticalHorizontalFilter Indicator calculation
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                double result = VHFilter.Result[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.Vidya">
            <summary>
            Volatility Index Dynamic Average (VIDYA) is a smoothing (moving average) based on dynamically changing periods.
            </summary>
            <example>
            <code>
            [Parameter]
            public DataSeries Price { get; set; }
            
            [Parameter("Period", DefaultValue = 14)]
            public int Period { get; set; }
            
            [Parameter("Sigma", DefaultValue = 0.65, MinValue = 0.1, MaxValue = 0.95)]
            public double Sigma { get; set; }
            
            [Output("Main")]
            public IndicatorDataSeries Result { get; set; }
            
            private Vidya vidya;
            
            protected override void Initialize()
            {
                vidya = Indicators.Vidya(Price, Period, Sigma);
            }
            public override void Calculate(int index)
            {
                // Plot VIDYA to the chart
                Result[index] = vidya.Result.LastValue;
            }       
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.WeightedClose">
            <summary>
            Weighted Close is an average of high, low and close prices where close has greater weight. 
            </summary>
            <remarks>
            Like a Typical price indicator weighted Close gives a simplified view of all prices for a period as a single series.
            </remarks>
            <example>
            <code>
            //...
            private WeightedClose weightedCloseSeries;
            //...
            protected override void Initialize()
            {
                weightedCloseSeries = Indicators.WeightedClose();
                //...
            }
            public override void Calculate(int index)
            {
                double weightedCloseValue = weightedCloseSeries.Result[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.WeightedClose.Result">
            <summary>
            The resulting time series of the WeightedClose Indicator calculation
            </summary>
            <example>
            <code>
            double weightedCloseValue = weightedCloseSeries.Result[index];
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.WeightedMovingAverage">
            <summary>
            The Weighted Moving Average is a moving average that gives more weith to the latest values.
            </summary>
            <example>
            <code>
            private WeightedMovingAverage _weightedMovingAverage;
            
            protected override void OnStart()
            {
                _weightedMovingAverage = Indicators.WeightedMovingAverage(Source, Period);
            }
            
            protected override void OnTick()
            {
                if(Trade.IsExecuting)
                    return;
            
                int index = MarketSeries.Close.Count - 1;
            
                if(Symbol.Bid > _weightedMovingAverage.Result[index])
                {
                    Trade.CreateMarketOrder(TradeType.Buy, Symbol, Volume);
                }
             }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.WeightedMovingAverage.Result">
            <summary>
            The resulting time series of the WeightedMovingAverage Indicator calculation
            </summary>
            <example>
            <code>
            private WeightedMovingAverage _weightedMovingAverage;
            
            protected override void OnStart()
            {
                _weightedMovingAverage = Indicators.WeightedMovingAverage(Source, Period);
            }
            
            protected override void OnTick()
            {
                if(Trade.IsExecuting)
                    return;
            
                int index = MarketSeries.Close.Count - 1;
            
                if(Symbol.Bid > _weightedMovingAverage.Result[index])
                {
                    Trade.CreateMarketOrder(TradeType.Buy, Symbol, Volume);
                }
             }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.RelativeStrengthIndex">
            <summary>
            The RSI (Wilder) is momentum oscillator, measuring the velocity and magnitude of directional price movements.
            </summary>
            <remarks>
            The RSI is most typically used on a 14 day timeframe, measured on a scale from 0 to 100, with high and low levels marked at 70 and 30, respectively. Shorter or longer timeframes are used for alternately shorter or longer outlooks. More extreme high and low levels—80 and 20, or 90 and 10—occur less frequently but indicate stronger momentum.
            </remarks>
            <example>
            <code>
            private RelativeStrengthIndex _rsi;
            protected override void Initialize()
            {            
                _rsi = Indicators.RelativeStrengthIndex(MarketSeries.Close, 14);
            }
            public override void Calculate(int index)
            {
                double result = _rsi.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.RelativeStrengthIndex.Result">
            <summary>
            The resulting time series of the RelativeStrengthIndex Indicator calculation
            </summary>
            <example>
            <code>
            private RelativeStrengthIndex _rsi;
            protected override void Initialize()
            {            
                _rsi = Indicators.RelativeStrengthIndex(MarketSeries.Close, 14);
            }
            public override void Calculate(int index)
            {
                double result = _rsi.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.WilliamsAccumulationDistribution">
            <summary>
            William's Accumulation Distribution is an oscillator that can identify if the market is driven by buyers (accumulation) or by sellers (distribution) 
            </summary>
            <remarks>The divergence between price and the William's Accumulation Distribution. When price is falling and WAD is rising, it is a buying opportunity 
            </remarks>
            <example>
            <code>
            private WilliamsAccumulationDistribution _result;
            protected override void Initialize()
            {
                _result = Indicators.WilliamsAccumulationDistribution();
            }        
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.WilliamsAccumulationDistribution.Result">
            <summary>
            The resulting time series of the WilliamsAccumulationDistribution Indicator calculation
            </summary>
            <example>
            <code>
            private WilliamsAccumulationDistribution _result;
            protected override void Initialize()
            {
                _result = Indicators.WilliamsAccumulationDistribution();
            }        
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.WilliamsPctR">
            <summary>
            Williams %R is an effective momentum oscillator and was described by Larry Williams for the first time in 1973. 
            </summary>
            <remarks>
            It shows the relationship of the close relative to the high-low range over a set period of time.
            </remarks>
            <example>
            <code>
            private WilliamsPctR _result;
            protected override void Initialize()
            {
                _result = Indicators.WilliamsPctR(14);
            }        
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.WilliamsPctR.Result">
            <summary>
            The resulting time series of the WilliamsPctR Indicator calculation
            </summary>
            <example>
            <code>
            private WilliamsPctR _result;
            protected override void Initialize()
            {
                _result = Indicators.WilliamsPctR(14);
            }        
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.SwingIndex">
            <summary>
            Developed by Welles Wilder, the Swing Index compares current Open, high, Low and Close prices to find of current and previous periods to find "real" price.
            </summary>
            <example>
            <code>
            using cAlgo.API;
            using cAlgo.API.Indicators;
            
            namespace cAlgo.Indicators
            {
                [Indicator]
                public class Test:Indicator
                {
                    private SwingIndex _swingIndex;
            
                    [Parameter(DefaultValue = 12)]
                    public int LimitMoveValue { get; set; }
            
                    protected override void Initialize()
                    {
                        _swingIndex = Indicators.SwingIndex(LimitMoveValue);
                    }
                    
                    public override void Calculate(int index)
                    {
                        //Print the current value of SwingIndex to the log
                        Print("The current value of SwingIndex is {0}", _swingIndex.Result[index]);            
                    }
                }
            }
              </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.SwingIndex.Result">
             <summary>
             The Result Series of the Swing Index Indicator
             </summary>
             <example>
             <code>
            public override void Calculate(int index)
            {
                 //Print the current value of SwingIndex to the log
                 Print("The current value of SwingIndex is {0}", _swingIndex.Result[index]);            
            }
            	</code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.WellesWilderSmoothing">
            <summary>
            The Welles Wilder's Smoothing indicator is an exponential moving average, but it has different alpha ration. As a result it responds to price changes slower.
            </summary>
            <remarks>
            Usage is the same as EMA usage. Please mind the different in alpha ration.
            </remarks>
            <example>
            <code>
            private WellesWilderSmoothing _result;
            protected override void Initialize()
            {
                _result = Indicators.WellesWilderSmoothing(MarketSeries.Close, 14);
            }        
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.TriangularMovingAverage">
            <summary>
            The Triangular Moving Average is a moving average that gives more weith to values located in the middle of aggregated period.
            </summary>
            <example>
            <code>
            private TriangularMovingAverage _triangularMovingAverage;
            protected override void Initialize()
            {
                _triangularMovingAverage = Indicators.TriangularMovingAverage(MarketSeries.Close, 9);
            }
            
            public override void Calculate(int index)
            {
                //Print the current value of _triangularMovingAverage to the log
                Print("The current Triangular Moving Average is {0}", _triangularMovingAverage.Result[index]);            
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.PositionOpenedEventArgs">
            <summary>
            Provides data for the position opening event.
            </summary>
            <example>
            <code>
            public class SampleRobot : Robot
            {
                protected override void OnStart()
                {
                    Positions.Opened += Positions_Opened;
                    ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel");         
                }
                private void Positions_Opened(PositionOpenedEventArgs args)
                {
                    var position = args.Position;
                    if(position.Label == "myLabel")
                        Print("Position opened by SampleRobot");
                }
                //...
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PositionOpenedEventArgs.Position">
            <summary>
            Gets or sets the position being opened.
            </summary>
            <example>
            <code>
            private void PositionsOnOpened(PositionOpenedEventArgs args)
            {
                var position = args.Position;
                Print("Position opened at {0}", position.EntryPrice);
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.PendingOrders">
            <summary>
            Provides access to methods of the Pending Orders collection
            </summary>
        </member>
        <member name="P:cAlgo.API.PendingOrders.Item(System.Int32)">
            <summary>
            Find a pending order by index
            </summary>
            <param name="index">The position of the order in the collection</param>
            <example>
            <code>
            if(PendingOrders.Count > 0)
                Print(PendingOrders[0].Id);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrders.Count">
            <summary>
            Total number of pending orders
            </summary>
            <example>
            <code>
            var totalOrders = PendingOrders.Count;
            </code>
            </example>
        </member>
        <member name="E:cAlgo.API.PendingOrders.Created">
            <summary>
            Occurs when pending order is created
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Created += PendingOrdersOnCreated;
                PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize);
            }
            private void PendingOrdersOnCreated(PendingOrderCreatedEventArgs args)
            {
                Print("Pending order with id {0} was created", args.PendingOrder.Id);
            }
            </code>
            </example>
        </member>
        <member name="E:cAlgo.API.PendingOrders.Modified">
            <summary>
            Occurs when pending order is modified
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Modified += PendingOrdersOnModified;
                var result = PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize);
                ModifyPendingOrder(result.PendingOrder, Symbol.Ask + 20 * Symbol.PipSize ,null, null, null);
            }
            private void PendingOrdersOnModified(PendingOrderModifiedEventArgs args)
            {
                Print("Pending order with id {0} was modifed", args.PendingOrder.Id);
            }
            </code>
            </example>
        </member>
        <member name="E:cAlgo.API.PendingOrders.Cancelled">
            <summary>
            Occurs when pending order is cancelled
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Cancelled += PendingOrdersOnCancelled;
                var result = PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize);
                CancelPendingOrder(result.PendingOrder);
            }
            private void PendingOrdersOnCancelled(PendingOrderCancelledEventArgs args)
            {
               Print("Pending order with id {0} was cancelled. Reason: {1}", args.PendingOrder.Id, args.Reason);
            }
            </code>
            </example>
        </member>
        <member name="E:cAlgo.API.PendingOrders.Filled">
            <summary>
            Occurs when pending order is filled
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Filled += PendingOrdersOnFilled;
                PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            }
            private void PendingOrdersOnFilled(PendingOrderFilledEventArgs args)
            {
                Print("Pending order with id {0} was filled, position id  is {1}", args.PendngOrder.Id, args.Position.Id);
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.PendingOrderCancellationReason">
            <summary>
            Reason for order cancellation
            </summary>
        </member>
        <member name="F:cAlgo.API.PendingOrderCancellationReason.Cancelled">
            <summary>
            Order was cancelled by trader
            </summary>
        </member>
        <member name="F:cAlgo.API.PendingOrderCancellationReason.Expired">
            <summary>
            Order was cancelled due to expiration
            </summary>
        </member>
        <member name="F:cAlgo.API.PendingOrderCancellationReason.Rejected">
            <summary>
            Order fill was rejected and order was cancelled
            </summary>
        </member>
        <member name="T:cAlgo.API.PositionCloseReason">
            <summary>
            Reason for position closing
            </summary>
        </member>
        <member name="F:cAlgo.API.PositionCloseReason.Closed">
            <summary>
            Positions was closed by trader
            </summary>
        </member>
        <member name="F:cAlgo.API.PositionCloseReason.StopLoss">
            <summary>
            Position was closed by Stop Loss
            </summary>
        </member>
        <member name="F:cAlgo.API.PositionCloseReason.TakeProfit">
            <summary>
            Position was closed by Take Profit
            </summary>
        </member>
        <member name="F:cAlgo.API.PositionCloseReason.StopOut">
            <summary>
            Position was closed because Stop Out level reached
            </summary>
        </member>
        <member name="T:cAlgo.API.Positions">
            <summary>
            Provides access to methods of the positions collection.
            </summary>
            <example>
            <code>
            int totalPositions = Positions.Count;
            </code>
            </example>
            <example>
            <code>
            Position position =  Positions.Find("myLabel", Symbol, TradeType.Buy);
            </code>
            </example>
            <example>
            <code>
            Position[] positions = Positions.FindAll("myLabel", Symbol, TradeType.Buy);
            </code>
            </example>
            <example>
            <code>
            Positions.Opened += PositionsOnOpened;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Positions.Item(System.Int32)">
            <summary>
            Finds a position by index.
            </summary>
            <param name="index">the index in the list</param>
            <example>
            <code>
            var position = Positions[0];
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Positions.Count">
            <summary>
            The total number of open positions.
            </summary>
            <example>
            <code>
            int totalPositions = Positions.Count;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Positions.Find(System.String)">
            <summary>
            Find a position by its label.
            </summary>
            <param name="label">Label to search by</param>
            <returns>Position if it exists, null otherwise</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Positions.Find(System.String,cAlgo.API.Internals.Symbol)">
            <summary>
            Find a position by its label and symbol.
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbol">Symbol to search by</param>
            <returns>Position if it exists, null otherwise</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Positions.Find(System.String,cAlgo.API.Internals.Symbol,cAlgo.API.TradeType)">
            <summary>
            Find a position by its label, symbol and trade type
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbol">Symbol to search by </param>
            <param name="tradeType">Trade type to search by</param>
            <returns>Position if it exists, null otherwise</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Positions.FindAll(System.String)">
            <summary>
            Find all positions with this label.
            </summary>
            <param name="label">Label to search by</param>
            <returns>Array of Positions</returns>
            <example>
            <code>
            var positions = Positions.FindAll("myLabel");
            
            foreach (var position in positions)
            {
                double? newStopLoss = position.StopLoss ?? 10;
                ModifyPosition(position, newStopLoss, position.TakeProfit);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Positions.FindAll(System.String,cAlgo.API.Internals.Symbol)">
            <summary>
            Find all positions with this label and symbol.
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbol">Symbol to search by </param>
            <returns>Array of Positions</returns>
            <example>
            <code>
            var positions = Positions.FindAll("myLabel", Symbol);
            
            foreach (var position in positions)
            {
                double? newStopLoss = position.StopLoss ?? 10;
                ModifyPosition(position, newStopLoss, position.TakeProfit);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Positions.FindAll(System.String,cAlgo.API.Internals.Symbol,cAlgo.API.TradeType)">
            <summary>
            Finds all the positions of this label, symbol and trade type.
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbol">Symbol to search by </param>
            <param name="tradeType">Trade type to search by</param>
            <returns>Array of Positions</returns>
            <example>
            <code>
            var positions = Positions.FindAll("myLabel", Symbol, TradeType.Buy);
            
            foreach (var position in positions)
            {
                double? newStopLoss = position.StopLoss ?? 10;
                ModifyPosition(position, newStopLoss, position.TakeProfit);
            }
            </code>
            </example>
        </member>
        <member name="E:cAlgo.API.Positions.Closed">
             <summary>
             Occurs each time a position is closed.
             </summary>
             <example>
             <code>
            protected override void OnStart()
             {
                 Positions.Closed += PositionsOnClosed;            
             }
             private void PositionsOnClosed(PositionClosedEventArgs args)
             {
                 var position = args.Position;
                 Print("Position closed with {0} profit", position.GrossProfit);
             }
             </code>
             </example>
        </member>
        <member name="E:cAlgo.API.Positions.Opened">
             <summary>
             Occurs each time a position is opened.
             </summary>
             <example>
             <code>
            protected override void OnStart()
             {
                 Positions.Opened += PositionsOnOpened;            
             }
             private void PositionsOnOpened(PositionOpenedEventArgs args)
             {
                 Print("Position opened {0}", args.Position.Label);
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.RunningMode">
            <summary>
            Defines if a cBot is running in real time, in the silent backtesting mode, in the visual backtesting mode, or in the optimization mode.
            </summary>
        </member>
        <member name="F:cAlgo.API.RunningMode.RealTime">
            <summary>
            The cBot is running in real time.
            </summary>
        </member>
        <member name="F:cAlgo.API.RunningMode.SilentBacktesting">
            <summary>
            The cBot is running in the silent backtesting mode. 
            </summary>
        </member>
        <member name="F:cAlgo.API.RunningMode.VisualBacktesting">
            <summary>
            The cBot is running in the visual backtesting mode.
            </summary>
        </member>
        <member name="F:cAlgo.API.RunningMode.Optimization">
            <summary>
            The cBot is running in the optimization mode.
            </summary>
        </member>
        <member name="T:cAlgo.API.Timer">
            <summary>
            Schedules execution of virtual OnTimer method with specified interval.
            </summary>
        </member>
        <member name="M:cAlgo.API.Timer.Start(System.TimeSpan)">
            <summary>
            Starts the Timer
            </summary>
            <param name="interval">Interval as a TimeSpan</param>
            <example>
            protected override void OnStart()
            {
                Timer.Start(TimeSpan.FromMilliseconds(1000));
            }
            
            protected override void OnTimer()
            {
                ChartObjects.DrawText("time", Time.ToString("HH:mm:ss"), StaticPosition.TopLeft);
            }
            </example>
        </member>
        <member name="M:cAlgo.API.Timer.Start(System.Int32)">
            <summary>
            Starts the Timer
            </summary>
            <param name="intervalInSeconds">Interval in seconds</param>
            <example>
            protected override void OnStart()
            {
                Timer.Start(1);
            }
            
            protected override void OnTimer()
            {
                ChartObjects.DrawText("time", Time.ToString("HH:mm:ss"), StaticPosition.TopLeft);
            }
            </example>
        </member>
        <member name="M:cAlgo.API.Timer.Stop">
            <summary>
            Stops the Timer
            </summary>
        </member>
        <member name="E:cAlgo.API.Timer.TimerTick">
            <summary>
            Occurs when the interval elapses
            </summary>
            <example>
            <code>        
            protected override void OnStart()
            {
                Timer.TimerTick += OnTimerTick
                Timer.Start(1);//start timer with 1 second interval
            }
            
            private void OnTimerTick()
            {
                ChartObjects.DrawText("time", Time.ToString("HH:mm:ss"), StaticPosition.TopLeft);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Timer.Interval">
            <summary>
            Gets the interval of timer. Returns -1 millisecond if the timer is stopped
            </summary>
        </member>
        <member name="T:cAlgo.API.StopTriggerMethod">
            <summary>
            Trigger side for Stop Orders
            </summary>
        </member>
        <member name="F:cAlgo.API.StopTriggerMethod.Trade">
            <summary>
            Trade method uses default trigger behavior for Stop orders.
            Buy order and Stop Loss for Sell position will be triggered when Ask >= order price.
            Sell order and Stop Loss for Buy position will be triggered when Bid &lt;= order price.
            </summary>
        </member>
        <member name="F:cAlgo.API.StopTriggerMethod.Opposite">
            <summary>
            Opposite method uses opposite price for order triggering.
            Buy order and Stop Loss for Sell position will be triggered when Bid >= order price.
            Sell order and Stop Loss for Buy position will be triggered when Ask &lt;= order price.
            </summary>
        </member>
        <member name="F:cAlgo.API.StopTriggerMethod.DoubleTrade">
            <summary>
            Uses default prices for order triggering, but waits for 
            additional  confirmation - two consecutive prices should meet criteria to trigger order.
            Buy order and Stop Loss for Sell position will be triggered when two consecutive Ask prices >= order price.
            Sell order and Stop Loss for Buy position will be triggered when two consecutive Bid prices &lt;= order price.
            </summary>
        </member>
        <member name="F:cAlgo.API.StopTriggerMethod.DoubleOpposite">
            <summary>
            Uses opposite prices for order triggering, and waits for 
            additional confirmation - two consecutive prices should meet criteria to trigger order.
            Buy order and Stop Loss for Sell position will be triggered when two consecutive Bid prices >= order price.
            Sell order and Stop Loss for Buy position will be triggered when two consecutive Ask prices &lt;= order price.
            </summary>
        </member>
        <member name="T:cAlgo.API.TradeOperation">
            <summary>
            Provides access to properties describing an asynchronous trade operation.
            </summary>
            <example>
            <code>
            TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "asynchronous");
            if (operation.IsExecuting)
            {
                Print("Trade is executing");
            }
            else
            {
                if (operation.TradeResult.IsSuccessful)
                    Print("Trade executed");
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                Positions.Opened += PositionsOnOpened;
            
                TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "asynchronous");
                ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "synchronous", 10, 10);
            
                if (operation.IsExecuting)
                {
                    Print("Trade is executing");
                }
                else
                {
                    if (operation.TradeResult.IsSuccessful)
                        Print("Trade executed");
                } 
            }
            
            private void PositionsOnOpened(PositionOpenedEventArgs args)
            {
                var pos = args.Position;
                Print("Position {0} opened at {1}", pos.Label, pos.EntryPrice);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.TradeOperation.IsExecuting">
            <summary>
            True if a trade operation is being executed, false if it completed
            </summary>
            <example>
            <code>
            TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 20000, "myLabel");
            // ...
            if (!operation.IsExecuting)
            {
                Print("Trade executed");
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.TradeOperation.TradeResult">
            <summary>
            The result of a trade operation
            </summary>
            <example>
            <code>
            TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 20000, "myLabel");
            // ...
            if (!operation.IsExecuting &amp;&amp; operation.TradeResult.IsSuccessful)
            {
                Print("Trade {0} executed", operation.TradeResult.Position.Label);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.TradeOperation.ToString">
            <summary>
            The description of a trade operation
            </summary>
            <returns>Operation description</returns>
            <example>
            <code>
            TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "asynchronous");
            Print(operation.ToString());
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.TradeResult">
            <summary>
            The result of a trade operation
            </summary>
            <example>
            <code>
            TradeResult result = ExecuteMarketOrder(TradeType.Sell, Symbol, 20000);
            if (result.IsSuccessful)
                Print("Sell at {0}", result.Position.EntryPrice);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.TradeResult.IsSuccessful">
            <summary>
            True if the trade is successful, false if there is an error
            </summary>
            <example>
            <code>
            TradeResult result = ExecuteMarketOrder(TradeType.Buy, Symbol, 20000);
            if (result.IsSuccessful)
                Print("Buy at {0}", result.Position.EntryPrice);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.TradeResult.Error">
            <summary>
            Error code of un unsuccessful trade
            </summary>
            <example>
            <code>
            var mySymbol = MarketData.GetSymbol("EURUSD");
            TradeResult result = ExecuteMarketOrder(TradeType.Sell, mySymbol, 1);
            if(!result.IsSuccessful)
                Print("Error: {0}", result.Error);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.TradeResult.Position">
            <summary>
            The resulting position of a trade request
            </summary>
            <example>
            <code>
            TradeResult result = ExecuteMarketOrder(TradeType.Sell, Symbol, 50000);
            if (result.IsSuccessful)
                Print("Sell at {0}", result.Position.EntryPrice);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.TradeResult.PendingOrder">
            <summary>
            The resulting pending order of a trade request
            </summary>
            <example>
            <code>
            TradeResult result = PlaceLimitOrder(TradeType.Sell, Symbol, 
                                50000, Symbol.Ask, "myLabel", 10, null);
            if(result.IsSuccessful)
                Print("Order placed. SL: {0}", result.PendingOrder.StopLoss);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.TradeResult.ToString">
            <summary>
            The description of a trade result
            </summary>
            <returns>Result description</returns>
            <example>
            <code>
            TradeResult result = PlaceLimitOrder(TradeType.Sell, Symbol, 50000, Symbol.Ask);
            if (result.IsSuccessful)
                Print(result.ToString());
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.DataSeries">
            <summary>
            Represents a read only list of values, typically used to represent market price series.
            The values are accessed with an array-like [] operator.
            </summary>
            <example>
            <code>
            [Parameter]
            public DataSeries Source { get; set; }
            //...
            [Output("Main")]        
            public IndicatorDataSeries Result{ get; set; }
            //...
            Result[index] = Source[index] * exp + previousValue * (1 - exp);
            //...
            Result[index] = (MarketSeries.Close[index] + MarketSeries.Open[index]) / 2;
            //...
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.DataSeries.Item(System.Int32)">
            <summary>
            Gets the value in the dataseries at the specified position.
            </summary>
            <example>
            <code>
            //...
            [Parameter("Data Source")]
            public DataSeries Source { get; set; }
            //...
            [Output("Main")]
            public IndicatorDataSeries Result{ get; set; }
            //...
            public override void Calculate(int index)
            {
                // This is the simple moving average calculation.
                double sum = 0.0;
                for (int i = 0; i &#60;= Periods-1; i++)
                {
                    // Source[i] is the item contained in Source at position i
                    sum += Source[i];
                }
                Result[index] = sum / Periods;
            }
            //...
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.DataSeries.LastValue">
            <summary>
            Gets the last value of this DataSeries.
            </summary>
            <remarks>
            The last value may represent one of the values of the last bar of the market series, e.g. Open, High, Low and Close. 
            Therefore, take into consideration that on each tick, except the Open price, the rest of the values will most probably change.
            </remarks>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            protected override void OnTick()
            {
                double lastValue = MarketSeries.Close.LastValue;
                Print("The last value of MarketSeries.Close Series is: {0}", MarketSeries.Close.LastValue);
            
                // Property LastValue has an accessor but no setter, i.e. LastValue can be retrieved but not set.
                // The following code will produce an error
                MarketSeries.Close.LastValue = 100;
            }
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.DataSeries.Last(System.Int32)">
            <summary>
            Access a value in the dataseries certain bars ago
            </summary>
            <param name="index">Number of bars ago</param>
            <example>
            <code>
            double value = MarketSeries.Close.Last(5);
            Print("The close price 5 bars ago was: {0}", value);
            </code>
            </example>
            <example>
            <code>
            double previousOpen = MarketSeries.Open.Last(1);
            double previousClose = MarketSeries.Close.Last(1);
            Print("Open: {0}, Close: {1}", previousOpen, previousClose);
            </code>
            </example>
            <example>
            <code>
            double currentClose = MarketSeries.Close.Last(0);
            Print("Current Close: {0}", currentClose);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.DataSeries.Count">
            <summary>
            Gets the total number of elements contained in the DataSeries.
            </summary>
            <example>
            <code>
            protected override void OnTick()
            {
                int total = MarketSeries.Close.Count;
                Print("The total elements contained in the MarketSeries.Close Series is: {0}", total);
            
                int lastIndex = total - 1;    
                double lastCloseValue = MarketSeries.Close[lastIndex];
            
                //Print the last value of the series
                Print("The last value of Close Series is: {0}", lastCloseValue);
            
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.IndicatorDataSeries">
            <summary>
            Represents a mutable array of values. An extension of DataSeries used to represent indicator values.
             </summary>
            <example>
            <code>
            //This will be the output result of your indicator
            [Output("Result", Color = Colors.Orange)]
            public IndicatorDataSeries Result { get; set; }
              </code>
            </example>
            <example>
            <code>
            //  The following example is the calculation of the simple moving average 
            //  of the median price
            [Output("Result")]
            public IndicatorDataSeries Result { get; set; }
            
            private IndicatorDataSeries _dataSeries;
            private SimpleMovingAverage _simpleMovingAverage;
            
            protected override void Initialize()
            {
                _dataSeries = CreateDataSeries();
                _simpleMovingAverage = Indicators.SimpleMovingAverage(_dataSeries, 14);
            }
            public override void Calculate(int index)
            {
                _dataSeries[index] = (MarketSeries.High[index] + MarketSeries.Low[index])/2;
                Result[index] = _simpleMovingAverage.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.IndicatorDataSeries.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <example>
            <code>
            //  The following example is the calculation of the median price
            [Output("Result")]
            public IndicatorDataSeries Result { get; set; }
            
            private IndicatorDataSeries _dataSeries;
            
            protected override void Initialize()
            {
                _dataSeries = CreateDataSeries();
            }
            public override void Calculate(int index)
            {
                
                _dataSeries[index] = (MarketSeries.High[index] + MarketSeries.Low[index])/2;
                
                // Get the value of _dataSeries at index 
                // and set the value of Result at index
                Result[index] = _dataSeries[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicator">
            <summary>
            Base class for Indicators.
            </summary>
            <remarks>
            Contains all necessary market information, provides access to built-in indicators and provides framework for 
            convenient indicators' creation.
            </remarks>
            <example>
            <code> 
            &#47;&#47;&#46;&#46;&#46;
            public override void Calculate(int index)
            {
                //This is where we place our indicator's calculation logic.
            }
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            protected override void Initialize()
            {
            //Place your Initialization logic here
            }
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
            <example>
            <code>
            private IndicatorDataSeries input;
            
            protected override void Initialize()
            {
                input = CreateDataSeries();
            }
            public override void Calculate(int index)
            {
                input[index] = (MarketSeries.Close[index] + MarketSeries.Open[index]) / 2;
            }
            </code>
            </example>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            public override void Calculate(int index)
            {
                if (IsRealTime)
                {
                    //Place the code-logic that you want to be calculated on incoming live data
                }
            }
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Indicator.#ctor">
            <summary>
            Indicator class constructor
            </summary>
        </member>
        <member name="P:cAlgo.API.Indicator.IsRealTime">
             <summary>
             Returns true, if the indicator is processing real time incoming data.
             </summary>
             <example>
             <code>
              public override void Calculate(int index)
             {
                 if (IsRealTime)
                 {
                     //Place the code-logic that you want to be calculated on incoming live data
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicator.IsLastBar">
             <summary>
             Returns true, if Calculate is invoked for the last bar
             </summary>
             <example>
             <code>
              public override void Calculate(int index)
             {
                 if (IsLastBar)
                 {
                     // this is the current (last) index
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicator.IndicatorArea">
            <summary>
            Defines the area where the indicator is placed.
            </summary>
        </member>
        <member name="P:cAlgo.API.Indicator.Account">
            <summary>
            Contains information of the current account.
            </summary>
            <example>
            <code>
            if (Account.Balance &lt; 10000)
                Print(Account.Balance);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Indicator.Calculate(System.Int32)">
            <summary>
            Calculate the value(s) of indicator for the given index. 
            </summary>
            <param name="index">The index of calculated value.</param>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            public override void Calculate(int index)
            {
                //This is where we place our indicator's calculation logic.
            }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Indicator.Initialize">
            <summary>
            Custom initialization for the Indicator. This method is invoked when an indicator is launched.
            </summary>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            protected override void Initialize()
            {
                //Place your Initialization logic here
            }
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Indicator.ToString">
            <summary>
            The name of the indicator derived class.
            </summary>
            <returns></returns>
            <example>
            <code>
                private SampleSMA sma;
                //...
                sma = Indicators.GetIndicator&lt;SampleSMA>(Source, Period);
                Print(sma.ToString());
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Requests.Request">
            <summary>
            A Request can be used as a parameter in the Trade.Send method.
            Used to send a trade order request to the server.
            </summary>
            <remarks>
            PendingOrderRequest abstract class and MarketOrderRequest class implement the Request interface
            </remarks>
            <example>
            <code>
            Request request = new MarketOrderRequest(TradeType.Buy, 10000)
                                 {  
                                    Label = "123", 
                                    SlippagePips = 0, 
                                    StopLossPips = 10, 
                                    TakeProfitPips = 10
                                };
            Trade.Send(request);
            
            var price = Symbol.Ask;
            var stopLoss = price - StopLossPips * Symbol.PipSize;
            var takeProfit = price + TakeProfitPips * Symbol.PipSize;
            Request request2 = new PendingOrderRequest(TradeType.Buy, 10000, price)
                                 {  
                                    Label = "Robot 1", 
                                    StopLoss = 10, 
                                    TakeProfit = 10
                                };
            Trade.Send(request2);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Requests.LimitOrderRequest">
            <summary>
            Creates a limit order request that can be used as a parameter 
            in the Trade.Send method in order to send a limit order request to the server.
            </summary>
            <example>
            <code>
            double price = Symbol.Ask + 10*Symbol.PipSize;
            TradeType sell = TradeType.Sell;
            int volume = 1000000;
            
            var request = new LimitOrderRequest(sell,volume,price);
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Requests.LimitOrderRequest.#ctor(cAlgo.API.TradeType,System.Int32,System.Double)">
            <summary>
            LimitOrderRequest constructor
            </summary>
            <param name="tradeType">Buy or Sell</param>
            <param name="volume">Amount of Trade</param>
            <param name="targetPrice">The price the order should be filled at</param>
            <example>
            <code>
            double price = Symbol.Ask + 10*Symbol.PipSize;
            TradeType sell = TradeType.Sell;
            int volume = 1000000;
            DateTime? expiration = DateTime.Now.AddMinutes(60);
            double? stopLoss = price + 10*Symbol.PipSize;
            double? takeProfit = price - 20*Symbol.PipSize;
            
            var request = new LimitOrderRequest(sell, volume, price)
                                {
                                    Expiration = expiration,
                                    Label = "123456",
                                    StopLoss = stopLoss,
                                    TakeProfit = takeProfit
                                 };
            
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Requests.PendingOrderRequest">
            <summary>
            PendingOrderRequest implements Request interface
            LimitOrderRequest and StopOrderRequest are derived classes 
            of the PendingOrderRequest abstract class.
            </summary>
            <remarks>
            See LimitOrderRequest and StopOrderRequest classes for more examples.
            </remarks>
            <example>
            <code>
            
            double price = Symbol.Ask + 10*Symbol.PipSize;
            TradeType sell = TradeType.Sell;
            int volume = 1000000
            
            PendingOrderRequest request = 
                    new LimitOrderRequest(sell, volume, price);
            
            Trade.Send(request);
            </code>
            </example>
            <example>
            <code>
            TradeType buy = TradeType.Buy;
            PendingOrderRequest request2 = 
                    new StopOrderRequest(buy, 10000, price);
            
            Trade.Send(request2);
            
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Requests.PendingOrderRequest.#ctor(cAlgo.API.PendingOrderType,cAlgo.API.TradeType,System.Int32,System.Double)">
            <summary>
            PendingOrderRequest constructor
            </summary>
            <remarks>
            Protected constructor. See constructors of 
            LimitOrderRequest and StopOrderRequest.
            </remarks>
            <param name="pendingOrderType">The type of order. Limit/Stop</param>
            <param name="tradeType">The type of trade. Buy/Sell</param>
            <param name="volume">The trade amount</param>
            <param name="targetPrice">The price at which the order should be created</param>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.PendingOrderType">
            <summary>
            The type of order. Limit or Stop.
            </summary>
            <example>
            <code>
            
            double price = Symbol.Ask + 10 * Symbol.PipSize;
            DateTime? expiration = DateTime.Now.AddMinutes(30);
            
            protected override void OnStart()
            {	 
                var request = new CreateRequest(PendingOrderType.Stop);          
                Trade.Send(request);
            }
            
            private PendingOrderRequest CreateRequest(PendingOrderType type)
            {
                PendingOrderRequest request = null;
                switch (type)
                {
                    case PendingOrderType.Stop:
                        request = new StopOrderRequest(TradeType.Buy, 10000, price)
                        {
                            Expiration = expiration,
                            Label = "Robot 1",
                            StopLoss = price - 30 * Symbol.PipSize,
                            TakeProfit = price + 50 * Symbol.PipSize
                        };
                        break;
                    case PendingOrderType.Limit:
                        request = new LimitOrderRequest(TradeType.Sell, 10000, price)
                        {
                            Expiration = expiration,
                            Label = "Robot 1",
                            StopLoss = price + 30 * Symbol.PipSize,
                            TakeProfit = price - 30 * Symbol.PipSize
                         };
                         break;
                }
            
                return request;
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.TradeType">
            <summary>
            The type of trade. Buy or Sell.
            </summary>
            <example>
            <code>
            // declare trade type variable and price
            TradeType sell = TradeType.Sell;
            double price = Symbol.Bid+Symbol.PipSize;
            // create a sell limit order request
            var request = new LimitOrderRequest(sell, 10000, price);
            // Send the limit order request to the server
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.Volume">
            <summary>
            The trade amount
            </summary>
            <example>
            <code>
            // variables to pass to constructor
            int volume = 10000;
            double price = Symbol.Ask+10*Symbol.PipSize;
            TradeType buy = TradeType.Buy;
            // create a buy stop order request
            var request = new StopOrderRequest(buy, volume, price);
            // Send the limit order request to the server
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.TargetPrice">
            <summary>
            The target price for the order. 
            </summary>
            <remarks>
            The definition of target price depends on the order type.
            For Limit Orders the target price is the maximum or minimum 
            amount you're willing to pay or receive and for
            For Stop Orders target price refers to the threshold at which the order should become a market order.
            Since market orders guarantee execution but not price, once a stop order passes the threshold and becomes
            a market order it will be executed at the current market price.
            </remarks>
            <example>
            <code>
            // Declare and set the target price
            double price = Symbol.Ask-10*Symbol.PipSize;
            // create a limit order request to buy 
             var request = new LimitOrderRequest(TradeType.Buy, 10000, price);
            // Send the limit order request to the server
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.Label">
            <summary>
            Property Label can be used to identify the order as well as the position created by this order. Optional.
            </summary>
            <example>
            <code>
            double price = Symbol.Bid+20*Symbol.PipSize;
            TradeType sell = TradeType.Sell;
            // create a limit order request
            var request = new LimitOrderRequest(sell, 10000, price)
                                {
                                    Label = "Limit Order"
                                };
            // Send the limit order request to the server
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.Expiration">
            <summary>
            Property Expiration if specified, represents the date and time sthe order should expire.
            </summary>
            <example>
            <code>
            double price = Symbol.Bid+20*Symbol.PipSize;
            TradeType sell = TradeType.Sell;
            DateTime? expiration = Server.Time.AddMinutes(60);
            
            var request = new StopOrderRequest(sell, 10000, price)
                               {
                                    Expiration = expiration
                               };
            // Send the stop order request to the server
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.StopLoss">
            <summary>
            Property StopLoss is the price that the position will close with loss. Optional.
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            double price = Symbol.Bid-20*Symbol.PipSize;
            // create a stop order request
            var request = new StopOrderRequest(sell, 10000, price)
                             {
                                StopLoss = price+20*Symbol.PipSize;
                             };
            // Send the stop order request to the server
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.TakeProfit">
            <summary>
            Property TakeProfit is the price that the position will close with profit. Optional.
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            double price = Symbol.Bid+20*Symbol.PipSize;
            // create a limit order request
            var request = new LimitOrderRequest(sell, 10000, price)
                              {
                                 TakeProfit = price-20*Symbol.PipSize;
                              };
            // Send the limit order request to the server
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.StopLossPips">
            <summary>
            StopLossPips may be used to set the Stop Loss in pips
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            double price = Symbol.Bid+20*Symbol.PipSize;
            
            var request = new LimitOrderRequest(sell, 10000, price)
                       {
                           StopLossPips = 10
                       };
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.TakeProfitPips">
            <summary>
            TakeProfitPips may be used to set the Take Profit in pips
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            double price = Symbol.Bid+20*Symbol.PipSize;
            
            var request = new LimitOrderRequest(sell, 10000, price)
                       {
                           TakeProfitPips = 10
                       };
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.Symbol">
            <summary>
            
            </summary>
            <example>
            <code>
            
            var Symbol usdcad = MarketData.GetSymbol("USDCAD");
            var request = new LimitOrderRequest(TradeType.Sell, 10000, Price)
                       {
                           Symbol = usdcad
                       };
            
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Requests.MarketOrderRequest">
            <summary>
            Creates a market order request that can be used as a parameter in the Trade.Send() method
            in order to send a market order request to the server.
            </summary>
            <remarks>
            MarketOrderRequest implements Request interface. 
            Similar to Trade.CreateBuyMarketOrder/CreateSellMarketOrder
            </remarks>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            var request = new MarketOrderRequest(sell, 10000)
                       {
                           Label = "Robot 1",
                           SlippagePips = 0,
                           StopLossPips = 10,
                           TakeProfitPips = 20
                       };
            Trade.Send(request); 
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Requests.MarketOrderRequest.#ctor(cAlgo.API.TradeType,System.Int32)">
            <summary>
            MarketOrderRequest constructor
            </summary>
            <param name="tradeType">Buy or Sell</param>
            <param name="volume">Amount of trade</param>
            <example>
            <code>
            TradeType tradeType = TradeType.Sell;
            int volume = 10000;
            
            var request = new MarketOrderRequest(tradeType, volume)
                       {
                           Label = "market order",
                           SlippagePips = 1,
                           StopLossPips = 10,
                           TakeProfitPips = 20
                       };
            Trade.Send(request); 
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.MarketOrderRequest.TradeType">
            <summary>
            The type of trade. Buy/Sell.
            </summary>
            <example>
            <code>
            TradeType tradeType = TradeType.Sell;
            var request = new MarketOrderRequest(tradeType, 10000);
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.MarketOrderRequest.Volume">
            <summary>
            The amount of the trade
            </summary>
            <example>
            <code>
            int volume = 10000;
            TradeType tradeType = TradeType.Sell;
            var request = new MarketOrderRequest(tradeType, volume);
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.MarketOrderRequest.Label">
            <summary>
            Optional propery Label can be used to identify the position created with this order.
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            var request = new MarketOrderRequest(sell, 10000)
                       {
                           Label = "Robot 1"
                       };
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.MarketOrderRequest.SlippagePips">
            <summary>
            Optional property SlippagePips may be used to set the market range pips
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            var request = new MarketOrderRequest(sell, 10000)
                       {
                           SlippagePips = 1
                       };
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.MarketOrderRequest.StopLossPips">
            <summary>
            Optional property StopLossPips may be used to set the stop loss in pips
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            var request = new MarketOrderRequest(sell, 10000)
                       {
                           StopLossPips = 10
                       };
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.MarketOrderRequest.TakeProfitPips">
            <summary>
            Optional property TakeProfitPips may be used to set the take profit in pips
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            var request = new MarketOrderRequest(sell, 10000)
                       {
                           TakeProfitPips = 10
                       };
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.MarketOrderRequest.Symbol">
             <summary>
             Optional property Symbol may be used to create an order for a different symbol
             </summary>
             <example>
             <code>
             var request = new MarketOrderRequest(TradeType.Buy, 10000)
                        {
                            Symbol = "USDCAD"
                        };
             Trade.Send(request);
             </code>
             </example>
             <example>
             <code>
             var Symbol usdcad = MarketData.GetSymbol("USDCAD");
             var request = new MarketOrderRequest(TradeType.Buy, 10000)
                     {
                         Symbol = usdcad 
                     };
            
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Requests.StopOrderRequest">
            <summary>
            Creates a stop order request that can be used as a parameter in the Trade.Send method
            in order to send a stop order request to the server.
            </summary>
            <example>
            <code>
            double price = Symbol.Ask + 10*Symbol.PipSize;
            TradeType buy = TradeType.Buy;
            
            // create a stop order request
            var request = new StopOrderRequest(buy, 10000, price);
            // Send the stop order request to the server
            Trade.Send(request); 
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Requests.StopOrderRequest.#ctor(cAlgo.API.TradeType,System.Int32,System.Double)">
            <summary>
            StopOrderRequest constructor
            </summary>
            <param name="tradeType">Trade type is either Buy or Sell.</param>
            <param name="volume">The trade amount</param>
            <param name="targetPrice">The target price for the order</param>
            <example>
            <code>
            TradeType buy = TradeType.Buy;
            double price = Symbol.Ask + 10 * Symbol.PipSize;
            DateTime? expiration = DateTime.Now.AddMinutes(30);
            double? stopLoss = targetPrice - 30 * Symbol.PipSize;
            double? takeProfit = targetPrice + 50 * Symbol.PipSize;
            
            // create a stop order request
            var request = new StopOrderRequest(buy, 10000, price)
                                            {
                                                Expiration = expiration,
                                                Label = "Robot 1",
                                                StopLoss = stopLoss,
                                                TakeProfit = takeProfit
                                            };
            
            // Send the stop order request to the server
            Trade.Send(request);
            
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.MarketDepthEntry">
             <summary>
             Provides access to market depth prices and volumes
             </summary>
             <example>
             <code>
            foreach (var marketDepthEntry in _marketDepth.AskEntries)
            {
                 //The volume of this market depth entry
                 volume = marketDepthEntry.Volume;
                 //The price of this market depth entry
                 price = marketDepthEntry.Price;    
            }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.MarketDepthEntry.Volume">
             <summary>
             The volume of this market depth entry
             </summary>
             <example>
             <code>
            foreach (var entry in _marketDepth.AskEntries)
            {
                 volume  = entry.Volume;
            }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.MarketDepthEntry.VolumeInUnits">
             <summary>
             The volume of this market depth entry
             </summary>
             <example>
             <code>
            foreach (var entry in _marketDepth.AskEntries)
            {
                 volume  = entry.VolumeInUnits;
            }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.MarketDepthEntry.Price">
            <summary>
            The price of this market depth entry
            </summary>
            <example>
            <code>
            for(int i = 0; i &lt; _marketDepth.AskEntries.Count; i++)
            {
                price = _marketDepth.AskEntries[i].Price;    
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.MarketDepth">
            <summary>
            Access to MarketDepth Ask Entries, Bid Entries and the event at which the market depth gets updated
            </summary>
            <example>
            <code>
            using System;
            using System.Text;
            using cAlgo.API;
            
            namespace cAlgo.Indicators
            {
                [Indicator]
                public class MarketDepthIndicator : Indicator
                {
            
                    private MarketDepth _marketDepth;
            
                    public override void Calculate(int index){}
            
                    protected override void Initialize()
                    {
                        //  Get Market Depth
                        _marketDepth = MarketData.GetMarketDepth(Symbol);
                        // subscribe to event Updated
                        _marketDepth.Updated += MarketDepthUpdated;
                    }
            
                    void MarketDepthUpdated()
                    {
                        // Draw Market Depth Entries in the indicator panel
                        var se = new StringBuilder();
                        se.Append("Bid");
                        se.Append("                              ");
                        se.Append("Ask");
                        ChartObjects.DrawText("DOM", se.ToString(), StaticPosition.TopLeft, Colors.White);
                        se.Clear();
                        se.AppendLine();
                        se.AppendLine();
            
                        foreach (var entry in _marketDepth.BidEntries)
                        {
                            double dVolume  = Math.Round(entry.Volume / 1000000.0, 2);
                            string volume = string.Format("{0}{1}", dVolume, "m");
                            double entryPrice = entry.Price;
                            string askText = string.Format("{0}    {1}", entryPrice.ToString("0.00000"), volume);
                            se.AppendLine(askText);
                        }
            
                        ChartObjects.DrawText("Bid", se.ToString(), StaticPosition.TopLeft, Colors.Red);
                        
                        se.Clear();
                        se.AppendLine();
                        se.AppendLine();
            
                        foreach (var entry in _marketDepth.AskEntries)
                        {
                            double dVolume = Math.Round(entry.Volume / 1000000.0, 2);
                            string volume = string.Format("{0}{1}", dVolume, "m");
                            double entryPrice = entry.Price;
                            se.Append("                                    ");
                            string bidText = string.Format("{0}     {1}", entryPrice.ToString("0.00000"), volume);
                            se.AppendLine(bidText);
                        }
            
                        ChartObjects.DrawText("Ask", se.ToString(), StaticPosition.TopLeft, Colors.Turquoise);
                        
                    }
                }
            }   
            </code>
            </example>
            <example>
            <code>
            using cAlgo.API;
            
            namespace cAlgo.Indicators
            {
                [Indicator]
                public class Level2 : Indicator
                {
                    [Output("BidEntries", Color = Colors.Red, PlotType = PlotType.Histogram, Thickness = 5)]
                    public IndicatorDataSeries BidResult { get; set; }
            
                    [Output("AskEntries", Color = Colors.Blue, PlotType = PlotType.Histogram, Thickness = 5)]
                    public IndicatorDataSeries AskResult { get; set; }
            
                    MarketDepth GBPUSD;
            
                    private int _askNo;
                    private int _bidNo;
            
                    protected override void Initialize()
                    {
                        GBPUSD = MarketData.GetMarketDepth(Symbol);
                        GBPUSD.Updated += OnGbpUsdUpdated;
                    }
            
                    void OnGbpUsdUpdated()
                    {
                        _askNo = 0;
                        _bidNo = 0;
            
                        var index = MarketSeries.Close.Count - 1;
            
                        for (var i = 0; i &lt; GBPUSD.AskEntries.Count; i++)
                            AskResult[index - i] = double.NaN;
            
                        foreach (var entry in GBPUSD.AskEntries)
                        {
                            AskResult[index - _askNo] = (-1) * entry.Volume;
                            _askNo++;
                        }
            
                        for (var i = 0; i &lt; GBPUSD.BidEntries.Count; i++)
                            BidResult[index - i] = double.NaN;
            
                        foreach (var entry in GBPUSD.BidEntries)
                        {
                            BidResult[index - _bidNo] = entry.Volume;
                            _bidNo++;
                        }
                    }
                    public override void Calculate(int index){}
                }
            }
            </code>
            </example>
        </member>
        <member name="E:cAlgo.API.MarketDepth.Updated">
            <summary>
            The event at which the market depth gets updated
            </summary>
            <example>
            <code>
            MarketDepth _marketDepth;
            
            protected override void Initialize()
            {
                _marketDepth = MarketData.GetMarketDepth(Symbol);
                // subscribe to event Updated
                _marketDepth.Updated += MarketDepthUpdated;
            }
            
            // user defined function MarketDepthUpdated
            void MarketDepthUpdated()
            {
                // Do something
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.MarketDepth.AskEntries">
             <summary>
             The total number of Ask entries
             </summary>
             <example>
             <code>
            foreach (var entry in _marketDepth.AskEntries)
            {
                 volume  = entry.Volume;
            	    entryPrice = entry.Price;
            }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.MarketDepth.BidEntries">
             <summary>
             The total number of Bid entries
             </summary>
             <example>
             <code>
            foreach (var entry in _marketDepth.BidEntries)
            {
                 volume  = entry.Volume;
            	    entryPrice = entry.Price;
            }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.RoundingMode">
            <summary>
            Rounding mode for normalizing trade volume
            </summary>
            <example>
            <code>
            volume = Symbol.NormalizeVolume(volume, RoundingMode.Down);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.RoundingMode.ToNearest">
            <summary>
            Round value to nearest tradable volume
            </summary>
            <example>
            <code>
            var volume = Symbol.NormalizeVolume(calculatedVolume, RoundingMode.ToNearest);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.RoundingMode.Down">
            <summary>
            Round value down to tradable volume
            </summary>
            <example>
            <code>
            var volume = Symbol.NormalizeVolume(calculatedVolume, RoundingMode.Down);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.RoundingMode.Up">
            <summary>
            Round value up to tradable volume
            </summary>
            <example>
            <code>
            var volume = Symbol.NormalizeVolume(calculatedVolume, RoundingMode.Up);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.StaticPosition">
            <summary>
            An Enumeration of the chart window positions
            </summary>
        </member>
        <member name="F:cAlgo.API.StaticPosition.TopLeft">
            <summary>
            Represents the top left position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.TopLeft, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.TopRight">
            <summary>
            Represents the top right position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.TopRight, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.TopCenter">
            <summary>
            Represents the top center position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.TopCenter, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.Left">
            <summary>
            Represents the left position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.Left, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.Right">
            <summary>
            Represents the right position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.Right, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.Center">
            <summary>
            Represents the top center position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.Center, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.BottomLeft">
            <summary>
            Represents the bottom left position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.BottomLeft, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.BottomRight">
            <summary>
            Represents the bottom right position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.BottomRight, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.BottomCenter">
            <summary>
            Represents the bottom center position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.BottomCenter, Colors.Green);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.TimeFrame">
            <summary>
            Contains supported timeframe values from Minute 1 to Monthly.
            </summary>
            <example>
            <code>
            if(TimeFrame  &lt; TimeFrame.Daily)
                Print("Intraday Trading");     
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Minute">
            <summary>
            1 Minute Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Minute2">
            <summary>
            2 Minute Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Minute3">
            <summary>
            3 Minute Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Minute4">
            <summary>
            4 Minute Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Minute5">
            <summary>
            5 Minute Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Minute6">
            <summary>
            6 Minute Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Minute7">
            <summary>
            7 Minute Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Minute8">
            <summary>
            8 Minute Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Minute9">
            <summary>
            9 Minute Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Minute10">
            <summary>
            10 Minute Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Minute15">
            <summary>
            15 Minute Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Minute20">
            <summary>
            20 Minute Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Minute30">
            <summary>
            30 Minute Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Minute45">
            <summary>
            45 Minute Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Hour">
            <summary>
            1 hour Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Hour2">
            <summary>
            2 hour Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Hour3">
            <summary>
            3 hour Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Hour4">
            <summary>
            4 hour Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Hour6">
            <summary>
            6 hour Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Hour8">
            <summary>
            8 hour Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Hour12">
            <summary>
            12 hour Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Daily">
            <summary>
            Daily Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Day2">
            <summary>
            2 day Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Day3">
            <summary>
            3 day Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Weekly">
            <summary>
            Weekly Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Monthly">
            <summary>
            Monthly Timeframe
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick">
            <summary>
            1 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick2">
            <summary>
            2 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick3">
            <summary>
            3 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick4">
            <summary>
            4 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick5">
            <summary>
            5 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick6">
            <summary>
            6 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick7">
            <summary>
            7 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick8">
            <summary>
            8 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick9">
            <summary>
            9 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick10">
            <summary>
            10 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick13">
            <summary>
            13 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick21">
            <summary>
            21 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick34">
            <summary>
            34 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick55">
            <summary>
            55 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick144">
            <summary>
            144 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick233">
            <summary>
            233 tick TimeFrame
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeFrame.Tick377">
            <summary>
            377 tick TimeFrame
            </summary>
        </member>
        <member name="M:cAlgo.API.TimeFrame.ToString">
            <summary>
            Convert the TimeFrame property to a string
            </summary>
            <returns>the string representation of the timeframe</returns>
            <example>
            <code>
            Print("TimeFrame is {0}", TimeFrame.Daily.ToString());
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.TimeSeries">
            <summary>
            A series of values that represent time like MarketSeries.OpenTime
            </summary>
        </member>
        <member name="P:cAlgo.API.TimeSeries.Item(System.Int32)">
            <summary>
            Returns the DateTime value at the specified index.
            </summary>
            <param name="index">The index of the returned value within the series.</param>
            <returns></returns>
        </member>
        <member name="P:cAlgo.API.TimeSeries.LastValue">
            <summary>
            Gets the last value of this time series.
            </summary>
            <example>
            <code>
            DateTime openTime = MarketSeries.OpenTime.LastValue;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.TimeSeries.Last(System.Int32)">
            <summary>
            Access a value in the data series certain number of bars ago.
            </summary>
            <param name="index">Number of bars ago</param>
            <example>
            <code>
            DateTime openTime = MarketSeries.OpenTime.Last[5];
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.TimeSeries.Count">
            <summary>
            Gets the number of elements contained in the series.
            </summary>
        </member>
        <member name="M:cAlgo.API.TimeSeries.GetIndexByExactTime(System.DateTime)">
            <summary>
            Find the index in the different time frame series.
            </summary>
            <param name="dateTime">The open time of the bar at this index</param>
            <returns></returns>
            <example>
            <code>
            var indexSeries2 = indexSeries2.OpenTime.GetIndexByExactTime(MarketSeries.OpenTime.LastValue);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.TimeSeries.GetIndexByTime(System.DateTime)">
            <summary>
            Find the index in the different time frame series.
            </summary>
            <param name="dateTime">The open time of the bar at this index</param>
            <returns></returns>
            <example>
            <code>
            var indexSeries2 = indexSeries2.OpenTime.GetIndexByTime(MarketSeries.OpenTime.LastValue);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.LineStyle">
            <summary>
            An enumeration of different stroke styles used to render lines.
            </summary>
            <example>
            <code>
            //Examples of all different LineStyles
            [Output("Dots", LineStyle = LineStyle.Dots)]
            public IndicatorDataSeries outputDots { get; set; }
            
            [Output("DotsRare", LineStyle = LineStyle.DotsRare)]
            public IndicatorDataSeries outputDotsRare { get; set; }
            
            [Output("DotsVeryRare", LineStyle = LineStyle.DotsVeryRare)]
            public IndicatorDataSeries outputDotsVeryRare { get; set; }
            
            [Output("Lines", LineStyle = LineStyle.Lines)]
            public IndicatorDataSeries outputLines { get; set; }
            
            [Output("LinesDots", LineStyle = LineStyle.LinesDots)]
            public IndicatorDataSeries outputLinesDots { get; set; }
            
            [Output("Solid", LineStyle = LineStyle.Solid)]
            public IndicatorDataSeries outputSolid { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.LineStyle.Solid">
            <summary>
            A solid line: -----
            </summary>
            <example>
            <code>
            [Output("Solid", LineStyle = LineStyle.Solid)]
            public IndicatorDataSeries outputSolid { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.LineStyle.Dots">
            <summary>
            A dotted line: .....
            </summary>
            <example>
            <code>
            [Output("Dots", LineStyle = LineStyle.Dots)]
            public IndicatorDataSeries outputDots { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.LineStyle.DotsRare">
            <summary>
            A dotted line, large gap between dots: . . . .
            </summary>
            <example>
            <code>
            [Output("DotsRare", LineStyle = LineStyle.DotsRare)]
            public IndicatorDataSeries outputDotsRare { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.LineStyle.DotsVeryRare">
            <summary>
            A dotted line, extra large gap between dots: .   .   .   .
            </summary>
            <example>
            <code>
            [Output("DotsVeryRare", LineStyle = LineStyle.DotsVeryRare)]
            public IndicatorDataSeries outputDotsVeryRare { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.LineStyle.LinesDots">
            <summary>
            A mixed line / dot style is used to render the line: - . - . - .
            </summary>
            <example>
            <code>
            [Output("LinesDots", LineStyle = LineStyle.LinesDots)]
            public IndicatorDataSeries outputLinesDots { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.LineStyle.Lines">
            <summary>
            Lines with gaps are used to render the line: - - - -
            </summary>
            <example>
            <code>
            [Output("Lines", LineStyle = LineStyle.Lines)]
            public IndicatorDataSeries outputLines { get; set; }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.TimeZones">
            <summary>
            Standard TimeZones Class
            </summary>
            <remarks>
            Sets the timezone for all the robot or indicator datetime references
            </remarks>
            <example>
            <code>
            [Robot(TimeZone = TimeZones.EasternStandardTime)]
            public class NewsRobot : Robot
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.TimeZones.DatelineStandardTime">
            <summary>
            (GMT-12:00) International Date Line West
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.SamoaStandardTime">
            <summary>
            (GMT-11:00) Midway Island, Samoa
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.HawaiianStandardTime">
            <summary>
            (GMT-10:00) Hawaii
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.AlaskanStandardTime">
            <summary>
            (GMT-09:00) Alaska
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.PacificStandardTime">
            <summary>
            (GMT-08:00) Pacific Time (US and Canada); Tijuana
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.MountainStandardTime">
            <summary>
            (GMT-07:00) Mountain Time (US and Canada)
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CentralStandardTime">
            <summary>
            (GMT-06:00) Central Time (US and Canada
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CanadaCentralStandardTime">
            <summary>
            (GMT-06:00) Saskatchewan
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CentralAmericaStandardTime">
            <summary>
            (GMT-06:00) Central America
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.EasternStandardTime">
            <summary>
            (GMT-05:00) Eastern Time (US and Canada)
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.AtlanticStandardTime">
            <summary>
            (GMT-04:00) Atlantic Time (Canada)
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.ESouthAmericaStandardTime">
            <summary>
            (GMT-03:00) Brasilia
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.GreenlandStandardTime">
            <summary>
            (GMT-03:00) Greenland
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.MidAtlanticStandardTime">
            <summary>
            (GMT-02:00) Mid-Atlantic
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.AzoresStandardTime">
            <summary>
            (GMT-01:00) Azores
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CapeVerdeStandardTime">
            <summary>
            (GMT-01:00) Cape Verde Islands
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.GMTStandardTime">
            <summary>
            (GMT) Greenwich Mean Time: Dublin, Edinburgh, Lisbon, London
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.GreenwichStandardTime">
            <summary>
            (GMT) Casablanca, Monrovia
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CentralEuropeStandardTime">
            <summary>
            (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CentralEuropeanStandardTime">
            <summary>
            (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.RomanceStandardTime">
            <summary>
            (GMT+01:00) Brussels, Copenhagen, Madrid, Paris
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.WEuropeStandardTime">
            <summary>
            (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.WCentralAfricaStandardTime">
            <summary>
            (GMT+01:00) West Central Africa
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.EEuropeStandardTime">
            <summary>
            (GMT+02:00) Bucharest
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.EgyptStandardTime">
            <summary>
            (GMT+02:00) Cairo
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.FLEStandardTime">
            <summary>
            (GMT+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.GTBStandardTime">
            <summary>
            (GMT+02:00) Athens, Istanbul, Minsk
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.IsraelStandardTime">
            <summary>
            (GMT+02:00) Jerusalem
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.SouthAfricaStandardTime">
            <summary>
            (GMT+02:00) Harare, Pretoria
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.RussianStandardTime">
            <summary>
            (GMT+03:00) Moscow, St. Petersburg, Volgograd
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.ArabStandardTime">
            <summary>
            (GMT+03:00) Kuwait, Riyadh
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.EAfricaStandardTime">
            <summary>
            (GMT+03:00) Nairobi
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.ArabicStandardTime">
            <summary>
            (GMT+03:00) Baghdad
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.IranStandardTime">
            <summary>
            (GMT+03:30) Tehran
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.ArabianStandardTime">
            <summary>
            (GMT+04:00) Abu Dhabi, Muscat
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CaucasusStandardTime">
            <summary>
            (GMT+04:00) Baku, Tbilisi, Yerevan
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.EkaterinburgStandardTime">
            <summary>
            (GMT+05:00) Ekaterinburg
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.WestAsiaStandardTime">
            <summary>
            (GMT+05:00) Islamabad, Karachi, Tashkent
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.IndiaStandardTime">
            <summary>
            (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.NepalStandardTime">
            <summary>
            (GMT+05:45) Kathmandu
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CentralAsiaStandardTime">
            <summary>
            (GMT+06:00) Astana, Dhaka
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.SriLankaStandardTime">
            <summary>
            (GMT+06:00) Sri Jayawardenepura
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.NCentralAsiaStandardTime">
            <summary>
            (GMT+06:00) Almaty, Novosibirsk
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.MyanmarStandardTime">
            <summary>
            (GMT+06:30) Yangon Rangoon
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.NorthAsiaStandardTime">
            <summary>
            (GMT+07:00) Krasnoyarsk
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.ChinaStandardTime">
            <summary>
            (GMT+08:00) Beijing, Chongqing, Hong Kong SAR, Urumqi
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.SingaporeStandardTime">
            <summary>
            (GMT+08:00) Kuala Lumpur, Singapore
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.TaipeiStandardTime">
            <summary>
            (GMT+08:00) Taipei
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.WAustraliaStandardTime">
            <summary>
            (GMT+08:00) Perth
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.NorthAsiaEastStandardTime">
            <summary>
            (GMT+08:00) Irkutsk, Ulaanbaatar
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.KoreaStandardTime">
            <summary>
            (GMT+09:00) Seoul
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.TokyoStandardTime">
            <summary>
            (GMT+09:00) Osaka, Sapporo, Tokyo
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.YakutskStandardTime">
            <summary>
            (GMT+09:00) Yakutsk
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CenAustraliaStandardTime">
            <summary>
            (GMT+09:30) Adelaide
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.EAustraliaStandardTime">
            <summary>
            (GMT+10:00) Brisbane
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.TasmaniaStandardTime">
            <summary>
            (GMT+10:00) Hobart
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.VladivostokStandardTime">
            <summary>
            (GMT+10:00) Vladivostok
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.WestPacificStandardTime">
            <summary>
            (GMT+10:00) Guam, Port Moresby
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CentralPacificStandardTime">
            <summary>
            (GMT+11:00) Magadan, Solomon Islands, New Caledonia
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.NewZealandStandardTime">
            <summary>
            (GMT+12:00) Auckland, Wellington
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.TongaStandardTime">
            <summary>
            (GMT+13:00) Nuku'alofa
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.UTC">
            <summary>
            Coordinated Universal Time
            </summary>
        </member>
        <member name="T:cAlgo.API.VerticalAlignment">
            <summary>
            Describes vertical position related to an anchor point or a parent element
            </summary>
        </member>
        <member name="F:cAlgo.API.VerticalAlignment.Center">
            <summary>
            Center vertical alignment.
            </summary>
        </member>
        <member name="F:cAlgo.API.VerticalAlignment.Top">
            <summary>
            Top vertical alignment.
            </summary>
        </member>
        <member name="F:cAlgo.API.VerticalAlignment.Bottom">
            <summary>
            Bottom vertical alignment.
            </summary>
        </member>
        <member name="F:cAlgo.API.VerticalAlignment.Stretch">
            <summary>
            </summary>
        </member>
        <member name="T:cAlgo.API.MovingAverageType">
            <summary>
            An enumeration of the different MovingAverage weighting (smoothing) methods.
            </summary>
        </member>
        <member name="F:cAlgo.API.MovingAverageType.Simple">
            <summary>
            Use uniform weighting. Represents indicator of <see cref="T:cAlgo.API.Indicators.SimpleMovingAverage"/> type.
            </summary>
            <example>
            <code>
            [Parameter("MAType", DefaultValue = MovingAverageType.Simple)]
            public MovingAverageType MaType { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.MovingAverageType.Exponential">
            <summary>
            Use exponential weighting. Represents indicator of <see cref="T:cAlgo.API.Indicators.ExponentialMovingAverage"/> type.
            </summary>
            <example>
            <code>
            [Parameter("MAType", DefaultValue = MovingAverageType.Exponential)]
            public MovingAverageType MaType { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.MovingAverageType.TimeSeries">
            <summary>
            Represents indicator of <see cref="T:cAlgo.API.Indicators.TimeSeriesMovingAverage"/> type.
            </summary>
            <example>
            <code>
            [Parameter("MAType", DefaultValue = MovingAverageType.TimeSeries)]
            public MovingAverageType MaType { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.MovingAverageType.Triangular">
            <summary>
            Represents indicator of <see cref="T:cAlgo.API.Indicators.TriangularMovingAverage"/> type.
            </summary>
            <example>
            <code>
            [Parameter("MAType", DefaultValue = MovingAverageType.Triangular)]
            public MovingAverageType MaType { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.MovingAverageType.VIDYA">
            <summary>
            VIDYA (Volatility Index Dynamic Average) variable length weighting. Represents indicator of <see cref="T:cAlgo.API.Indicators.Vidya"/> type.
            </summary>
            <example>
            <code>
            [Parameter("MAType", DefaultValue = MovingAverageType.VIDYA)]
            public MovingAverageType MaType { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.MovingAverageType.Weighted">
            <summary>
            Represents indicator of <see cref="T:cAlgo.API.Indicators.WeightedMovingAverage"/> type.
            </summary>
            <example>
            <code>
            [Parameter("MAType", DefaultValue = MovingAverageType.Weighted)]
            public MovingAverageType MaType { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.MovingAverageType.WilderSmoothing">
            <summary>
            Represents indicator of <see cref="T:cAlgo.API.Indicators.WellesWilderSmoothing"/> type.
            </summary>
            <example>
            <code>
            [Parameter("MAType", DefaultValue = MovingAverageType.WilderSmoothing)]
            public MovingAverageType MaType { get; set; }
            </code>
            </example>
            <example>
            <code>
            private MovingAverageType _wilderSmoothing = MovingAverageType.WilderSmoothing;
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.PendingOrder">
            <summary>
            Provides access to properties of pending orders
            </summary>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000,Symbol.Bid);
            var order = LastResult.PendingOrder;
            Print("The pending order's ID: {0}", order.Id); 
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.SymbolCode">
            <summary>
            Symbol code of the order
            </summary>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000,Symbol.Bid);
            Print("SymbolCode = {0}", LastResult.PendingOrder.SymbolCode);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.TradeType">
            <summary>
            Specifies whether this order is to buy or sell.
            </summary>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);
            Print(LastResult.PendingOrder.TradeType);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.Volume">
            <summary>
            Volume of this order.
            </summary>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);                     
            var order = result.PendingOrder;
            Print("The order's volume is: {0}", order.Volume);
             </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.VolumeInUnits">
            <summary>
            Volume of this order.
            </summary>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);                     
            var order = result.PendingOrder;
            Print("The order's volume is: {0}", order.VolumeInUnits);
             </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.Id">
            <summary>
            Unique order Id.
            </summary>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);                     
            var order = result.PendingOrder;
            Print("The pending order's ID: {0}", order.Id); 
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.OrderType">
            <summary>
            Specifies whether this order is Stop or Limit.
            </summary>
            <example>
            <code>        
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);                     
            var order = result.PendingOrder;
            Print("Order type = {0}", order.OrderType);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.TargetPrice">
            <summary>
            The order target price.
            </summary>
            <example>
            <code>
            var targetPrice = Symbol.Bid;
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);                     
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.ExpirationTime">
            <summary>
            The order Expiration time
            The Timezone used is set in the Robot attribute
            </summary>
            <example>
            <code> 
            DateTime expiration = Server.Time.AddMinutes(120);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
                Symbol.Bid, null, 10, 10, expiration);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.StopLoss">
            <summary>
            The order stop loss in price
            </summary>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
            Symbol.Bid, null, 10, 10);
            
            var order = result.PendingOrder;
            Print("Order SL price = {0}", order.StopLoss);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.StopLossPips">
            <summary>
            The order stop loss in pips
            </summary>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid, null, 10, 10);
            
            var order = result.PendingOrder;
            Print("Order SL pips = {0}", order.StopLossPips);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.TakeProfit">
            <summary>
            The order take profit in price
            </summary>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
            Symbol.Bid, null, 10, 10);
            
            var order = result.PendingOrder;
            Print("Order TP price = {0}", order.TakeProfit);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.TakeProfitPips">
            <summary>
            The order take profit in pips
            </summary>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
            Symbol.Bid, null, 10, 10);
            
            var order = result.PendingOrder;
            Print("TP Pips = {0}", order.TakeProfitPips);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.Label">
            <summary>
            User assigned identifier for the order.
            </summary>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
            Symbol.Bid, "myLabel", 10, 10);
            
            if(result.IsSuccessful)
            {
                var order = result.PendingOrder;
                Print("Label = {0}", order.Label);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.Comment">
            <summary>
            User assigned Order Comment
            </summary>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            Symbol.Bid, null, 10, 10, null, "this is a comment");
            var order = result.PendingOrder;
            Print("comment = {0}", order.Comment);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.Quantity">
            <summary>
            Quantity (lots) of this order
            </summary>
        </member>
        <member name="P:cAlgo.API.PendingOrder.HasTrailingStop">
            <summary>
            When HasTrailingStop set to true, 
            server updates Stop Loss every time position moves in your favor.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10, 2, "comment", true);
            Print("Position was opened, has Trailing Stop = {0}", result.Position.HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.StopLossTriggerMethod">
            <summary>
            Trigger method for position's StopLoss
            </summary>
        </member>
        <member name="P:cAlgo.API.PendingOrder.StopOrderTriggerMethod">
            <summary>
            Determines how pending order will be triggered in case it's a StopOrder
            </summary>
        </member>
        <member name="P:cAlgo.API.PendingOrder.StopLimitRangePips">
            <summary>
            Maximum limit from order target price, where order can be executed.
            </summary>
            <example>
            <code>
            var targetPrice = Symbol.Ask;
            var result = PlaceStopLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice, 2.0);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.PendingOrder.ModifyStopLossPips(System.Nullable{System.Double})">
            <summary>
            Shortcut for Robot.ModifyPendingOrder method to change Stop Loss
            </summary>
        </member>
        <member name="M:cAlgo.API.PendingOrder.ModifyTakeProfitPips(System.Nullable{System.Double})">
            <summary>
            Shortcut for Robot.ModifyPendingOrder method to change Take Profit
            </summary>
        </member>
        <member name="M:cAlgo.API.PendingOrder.ModifyStopLimitRange(System.Double)">
            <summary>
            Shortcut for Robot.ModifyPendingOrder method to change Stop Limit Range
            </summary>
        </member>
        <member name="M:cAlgo.API.PendingOrder.ModifyExpirationTime(System.Nullable{System.DateTime})">
            <summary>
            Shortcut for Robot.ModifyPendingOrder method to change Expiration Time
            </summary>
        </member>
        <member name="M:cAlgo.API.PendingOrder.ModifyVolume(System.Double)">
            <summary>
            Shortcut for Robot.ModifyPendingOrder method to change VolumeInUnits
            </summary>
        </member>
        <member name="M:cAlgo.API.PendingOrder.ModifyTargetPrice(System.Double)">
            <summary>
            Shortcut for Robot.ModifyPendingOrder method to change Target Price
            </summary>
        </member>
        <member name="M:cAlgo.API.PendingOrder.Cancel">
            <summary>
            Shortcut for Robot.CancelPendingOrder method
            </summary>
            <returns></returns>
        </member>
        <member name="T:cAlgo.API.PlotType">
            <summary>
            Plot type.
            </summary>
        </member>
        <member name="F:cAlgo.API.PlotType.Line">
            <summary>
            Plot Indicator result as a line.
            </summary>
            <example>
            <code>
            [Output("Main", PlotType = PlotType.Line)]
            public IndicatorDataSeries Result { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.PlotType.Histogram">
            <summary>
            Plot Indicator result as a histogram.
            </summary>
            <example>
            <code>
            [Output("Main", PlotType = PlotType.Histogram)]
            public IndicatorDataSeries Result { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.PlotType.Points">
            <summary>
            Plot Indicator result as a sequence of points.
            </summary>
            <example>
            <code>
            [Output("Main", PlotType = PlotType.Points)]
            public IndicatorDataSeries Result { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.PlotType.DiscontinuousLine">
            <summary>
            Plot Indicator result as a line with breaks where there are no values in the IndicatorDataSeries.
            </summary>
            <example>
            <code>
            [Output("Main", PlotType = PlotType.DiscontinuousLine)]
            public IndicatorDataSeries Result { get; set; }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Position">
            <summary>
            Taking or opening a position means buying or selling a trading pair.
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                foreach (var position in Positions)
                {
                    Print("Position Label {0}", position.Label);
                    Print("Position ID {0}", position.Id);
                    Print("Profit {0}", position.GrossProfit);
                    Print("Entry Price {0}", position.EntryPrice);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.SymbolCode">
            <summary>
            Symbol code of the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.SymbolCode);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.TradeType">
            <summary>
            Trade type (Buy/Sell) of the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.TradeType);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Volume">
            <summary>
            The amount traded by the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.Volume);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.VolumeInUnits">
            <summary>
            The amount traded by the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.VolumeInUnits);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Id">
            <summary>
            The position's unique identifier.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.Id);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Profit">
            <summary>
            Use GrossProfit instead.
            </summary>
        </member>
        <member name="P:cAlgo.API.Position.GrossProfit">
            <summary>
            Gross profit accrued by the order associated with the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.GrossProfit);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.EntryPrice">
            <summary>
            Entry price of the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.EntryPrice);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.StopLoss">
            <summary>
            The Stop Loss level of the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.StopLoss);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.TakeProfit">
            <summary>
            The take profit level of the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.TakeProfit);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.NetProfit">
            <summary>
            The Net profit of the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.NetProfit);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Swap">
            <summary>
            Swap is the overnight interest rate if any, accrued on the position.
            </summary>
            <example>
            <code>
            Print(LastResult.Position.Swap);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Commissions">
            <summary>
            Commission Amount of the request to trade one way (Buy/Sell) associated with this position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.Commissions);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.EntryTime">
            <summary>
            Entry time of trade associated with the position.
            The Timezone used is set in the cBot attribute.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.EntryTime);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Pips">
            <summary>
            Represents the winning or loosing pips of the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.Pips);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Label">
            <summary>
            Label can be used to represent the order. 
            </summary>
            <example>
            <code>
            var result = ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "myLabel");
            if(result.IsSuccessful)
                Print("Position {0} is open", result.Position.Label);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Comment">
            <summary>
            Comment can be used as a note for the order.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myLabel", 10, 10, 2, "this is a comment");
            if(result.IsSuccessful)
                Print("Position is open: {0}", result.Position.Comment);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Quantity">
            <summary>
            Quantity of lots traded by the position.
            </summary>
        </member>
        <member name="P:cAlgo.API.Position.HasTrailingStop">
            <summary>
            When HasTrailingStop set to true, the server updates the Stop Loss every time the position moves in your favor.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10, 2, "comment", true);
            Print("Position was opened, has Trailing Stop = {0}", result.Position.HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.StopLossTriggerMethod">
            <summary>
            Trigger method for the position's Stop Loss.
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.ModifyStopLossPrice(System.Nullable{System.Double})">
            <summary>
            Shortcut for Robot.ModifyPosition method to change the Stop Loss.
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.ModifyTakeProfitPrice(System.Nullable{System.Double})">
            <summary>
            Shortcut for Robot.ModifyPosition method to change the Take Profit.
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.ModifyStopLossPips(System.Nullable{System.Double})">
            <summary>
            Shortcut for the Robot.ModifyPosition method to change the Stop Loss pips
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.ModifyTakeProfitPips(System.Nullable{System.Double})">
            <summary>
            Shortcut for the Robot.ModifyPosition method to change the Take Profit pips
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.ModifyTrailingStop(System.Boolean)">
            <summary>
            Shortcut for the Robot.ModifyPosition method to change the Trailing Stop.
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.ModifyVolume(System.Double)">
            <summary>
            Shortcut for the Robot.ModifyPosition method to change the VolumeInUnits.
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.Reverse">
            <summary>
            Shortcut for the Robot.ReversePosition method to change the direction of the trade. 
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.Reverse(System.Double)">
            <summary>
            Shortcut for the Robot.ReversePosition method to change the direction of trade and the volume.
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.Close">
            <summary>
            Shortcut for the Robot.ClosePosition method.
            </summary>
        </member>
        <member name="T:cAlgo.API.PendingOrderType">
            <summary>
            Represents the type (Limit or Stop) of pending order. 
            </summary>
            <example>
            <code>
            if(PendingOrders.Count > 0)
            {
                PendingOrderType type = PendingOrders[0].OrderType;
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.PendingOrderType.Limit">
            <summary>
             A limit order is an order to buy or sell at a specific price or better.
            </summary>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if(order.OrderType == PendingOrderType.Limit)
                    Print(order.Id);
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.PendingOrderType.Stop">
            <summary>
            A stop order is an order to buy or sell once the price of the symbol reaches a specified price.
            </summary>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if(order.OrderType == PendingOrderType.Stop)
                    Print(order.Id);
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.PendingOrderType.StopLimit">
            <summary>
            A stop limit order is an order to buy or sell once the price of the symbol reaches specific price.
            Order has a parameter for maximum distance from that target price, where it can be executed.
            </summary>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if(order.OrderType == PendingOrderType.StopLimit)
                    Print(order.Id);
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Robot">
             <summary>
             Base class for all cBots. 
             </summary>
             <remarks>
             Provides a convenient framework for creating cBots including methods to create, modify, 
             cancel orders and close positions, methods trigered by each tick and each bar, access to built-in Indicators and more.
             </remarks>
             <example>
             <code>
             namespace cAlgo.Robots
             {
             [Robot]
             public class myCBot : Robot
             {
             
                 protected override void OnStart()
                 {
                     //This method is called when the cBot is being started, once.
                 }
                 
                 protected override void OnBar()
                 {
                     // Called on each incoming Bar.
                 }
             
                 protected override void OnTick()
                 {
                     // Called on each incoming tick.
             
                 }
                 
                 protected override void OnError(Error error)
                 {
                     Print("There has been an Error");
                 }
             
                 protected override void OnStop()
                 {
                     //This method is called when the cBot is being stoped.
                 }
            }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Robot.#ctor">
            <summary>
            Robot class constructor
            </summary>
        </member>
        <member name="M:cAlgo.API.Robot.OnStart">
            <summary>
            Called when cBot is being started. Override this method to initialize cBot, create nested indicators, etc.
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                //This method is invoked when the cBot is started.
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.OnStop">
            <summary>
            Called when cBot is stopped.
            </summary>
            <example>
            <code>
            protected override void OnStop()
            {
                //This method is called when the cBot is stopped
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.OnTick">
            <summary>
            Called on each incoming market tick.
            </summary>
            <example>
            <code>
            protected override void OnTick()
            {
                // Place cBot's Logic here.
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.OnBar">
            <summary>
            Called on each incoming Bar.
            </summary>
            <example>
            <code>
            protected override void OnBar()
            {
                //Place cBot's Logic here.
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.OnPositionOpened(cAlgo.API.Position)">
            <summary>
            Obsolete. Subscribe to Positions.Opened event instead
            </summary>
        </member>
        <member name="M:cAlgo.API.Robot.OnError(cAlgo.API.Error)">
            <summary>
            Called if there is an error executing a trade operation.
            </summary>
            <param name="error">Error description.</param>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                Print("There has been an Error");
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.OnPositionClosed(cAlgo.API.Position)">
            <summary>
            Obsolete. Subscribe to Positions.Closed event instead
            </summary>
        </member>
        <member name="M:cAlgo.API.Robot.OnPendingOrderCreated(cAlgo.API.PendingOrder)">
            <summary>
            Obsolete. Subscribe to PendingOrders.Created event instead
            </summary>
        </member>
        <member name="P:cAlgo.API.Robot.Trade">
            <summary>
            Accessor to the trading operations API. 
            </summary>
            <example>
            <code>
            Trade.Close(position)
            </code>
            </example>
            <example>
            <code>
            Trade.CreateBuyLimitOrder(Symbol,100000,Symbol.Bid,Symbol.Bid-20*Symbol.PipSize,
            Symbol.Ask+30*Symbol.PipSize,null);
            </code>
            </example>
            <example>
            <code>
            Trade.CreateBuyMarketOrder(Symbol,100000);
            </code>
            </example>
            <example>
            <code>
            Trade.CreateBuyStopOrder(Symbol,100000,Symbol.Ask+5*Symbol.PipSize,Symbol.Ask-20*Symbol.PipSize,
            Symbol.Ask+30*Symbol.PipSize,null);
            </code>
            </example>
            <example>
            <code>
            Trade.CreateMarketOrder(TradeType.Buy,Symbol,100000);
            </code>
            </example>
            <example>
            <code>
            Trade.CreateSellLimitOrder(Symbol,100000,Symbol.Ask,Symbol.Ask+20*Symbol.PipSize,
            Symbol.Ask-30*Symbol.PipSize,null);
            </code>
            </example>
            <example>
            <code>
            Trade.CreateSellMarketOrder(Symbol,100000);
            </code>
            </example>
            <example>
            <code>
            Trade.CreateSellStopOrder(Symbol,100000,Symbol.Bid-5*Symbol.PipSize,Symbol.Ask+20*Symbol.PipSize,
            Symbol.Ask-30*Symbol.PipSize,null);
            </code>
            </example>
            <example>
            <code>
            Trade.DeletePendingOrder(Account.PendingOrders[i]);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Robot.Account">
            <summary>
            Contains all Account information
            </summary>
            <example>
            <code>
            double balance = Account.Balance;
            string currency = Account.Currency;
            double equity = Account.Equity;
            double freemargin = Account.FreeMargin;
            double margin = Account.Margin;
            double? marginlevel = Account.MarginLevel;
            int leverage = Account.Leverage;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.Stop">
            <summary>
            Stops the cBot. cBot will be completely stopped and will not send/receive any signals.
            </summary>
            <example>
            <code>
            // Will stop the cBot if the balance of the account goes under 1000
            if(Account.Balance &#60; 1000)
            {
                Stop();
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64)">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double)">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String)">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String)">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">market range (slippage) pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">market range (slippage) pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">market range (slippage) pips</param>
            <param name="comment">order comment</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">market range (slippage) pips</param>
            <param name="comment">order comment</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean)">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">market range (slippage) pips</param>
            <param name="comment">order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">market range (slippage) pips</param>
            <param name="comment">order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, 
            "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double)">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double)">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String)">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String)">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 100000, 
                            Symbol.Bid - 2*Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 200000, 
                        Symbol.Bid - 2*Symbol.PipSize, "myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 100000, 
                            Symbol.Bid - 2*Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 200000, 
                        Symbol.Bid - 2*Symbol.PipSize, "myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 100000, 
                            Symbol.Bid - 2*Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 200000, 
                        Symbol.Bid - 2*Symbol.PipSize, "myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order");
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 100000, 
                            Symbol.Bid - 2*Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 200000, 
                        Symbol.Bid - 2*Symbol.PipSize, "myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order");
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask, 
                            "myStopOrder");
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20);
            </code>
            </example>
            <example>
            <code>
            DateTime expiration = Server.Time.AddHours(1);
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, expiration);
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask, 
                            "myStopOrder");
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20);
            </code>
            </example>
            <example>
            <code>
            DateTime expiration = Server.Time.AddHours(1);
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, expiration);
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask, 
                            "myStopOrder");
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20);
            </code>
            </example>
            <example>
            <code>
            DateTime expiration = Server.Time.AddHours(1);
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, expiration);
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment");
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask, 
                            "myStopOrder");
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20);
            </code>
            </example>
            <example>
            <code>
            DateTime expiration = Server.Time.AddHours(1);
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, expiration);
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment");
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask, 
                            "myStopOrder");
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20);
            </code>
            </example>
            <example>
            <code>
            DateTime expiration = Server.Time.AddHours(1);
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, expiration);
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment");
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.CancelPendingOrder(cAlgo.API.PendingOrder)">
            <summary>
            Cancel a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                CancelPendingOrder(order);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Int64,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="volume">New volume</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double)">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Int64)">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <param name="volume"></param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, 5);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double)">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <param name="volume"></param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, 5);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean)">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <param name="volume">New volume</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, hasTrailingStop);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <param name="volume">New volume</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                       order.ExpirationTime, 10000, hasTrailingStop, StopTriggerMethod.Trade);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <param name="volume">New volume</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                       order.ExpirationTime);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders)
            {
            if (order.StopLossPips == null)
                ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                   order.ExpirationTime, 5, hasTrailingStop);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                       order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade, StopTriggerMethod.Trade);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{System.Double})">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <param name="volume">New volume</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                       order.ExpirationTime);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders)
            {
            if (order.StopLossPips == null)
                ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                   order.ExpirationTime, 5, hasTrailingStop);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                       order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade, StopTriggerMethod.Trade, 2);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ReversePosition(cAlgo.API.Position)">
            <summary>
            Modify the direction of trade at position 
            </summary>
            <param name="position">Position which is affected</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                ReversePosition(position);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPosition(cAlgo.API.Position,System.Double)">
            <summary>
            Modify the volume of a position
            </summary>
            <param name="position">Position which is affected</param>
            <param name="volume">Volume (in units) of Trade</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                ModifyPosition(position, 20000);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ReversePosition(cAlgo.API.Position,System.Double)">
            <summary>
            Modify the direction of trade and volume of a position
            </summary>
            <param name="position">Position which is affected</param>
            <param name="volume">Volume (in units) of Trade</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                ReversePosition(position, 20000);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Modify the protection of a position 
            </summary>
            <param name="position">Position which is affected</param>
            <param name="stopLoss">New stop loss price</param>
            <param name="takeProfit">New take profit price</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                ModifyPosition(position, stopLoss,  takeProfit);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
            <summary>
            Modify the protection of a position 
            </summary>
            <param name="position">Position which is affected</param>
            <param name="stopLoss">New stop loss price</param>
            <param name="takeProfit">New take profit price</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                ModifyPosition(position, stopLoss,  takeProfit);
            }
            </code>
            </example>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                bool hasTrailingStop = true;
                ModifyPosition(position, stopLoss,  takeProfit, hasTrailingStop);
                Print("Position was modified, has Trailing Stop = {0}", result.Position.HasTrailingStop);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
            Modify the protection of a position 
            </summary>
            <param name="position">Position which is affected</param>
            <param name="stopLoss">New stop loss price</param>
            <param name="takeProfit">New take profit price</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                ModifyPosition(position, stopLoss,  takeProfit);
            }
            </code>
            </example>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                bool hasTrailingStop = true;
                ModifyPosition(position, stopLoss,  takeProfit, hasTrailingStop);
                Print("Position was modified, has Trailing Stop = {0}", result.Position.HasTrailingStop);
            }
            </code>
            </example>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                bool hasTrailingStop = true;
                ModifyPosition(position, stopLoss,  takeProfit, hasTrailingStop, StopTriggerMethod.Opposite);
                Print("Position was modified, stop loss trigger method = {0}", result.Position.StopLossTriggerMethod);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ClosePosition(cAlgo.API.Position)">
            <summary>
            Close a position
            </summary>
            <param name="position">Position to close</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ClosePosition(cAlgo.API.Position,System.Int64)">
            <summary>
            Close a position
            </summary>
            <param name="position">Position to close</param>
            <param name="volume">Volume which is closed</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            ClosePosition(position);
            </code>
            </example>
            <example>
            <code>
            if (position.Volume >= 20000)
                ClosePosition(position, 10000);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ClosePosition(cAlgo.API.Position,System.Double)">
            <summary>
            Close a position
            </summary>
            <param name="position">Position to close</param>
            <param name="volume">Volume which is closed</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            ClosePosition(position);
            </code>
            </example>
            <example>
            <code>
            if (position.Volume >= 20000)
                ClosePosition(position, 10000);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">Market range (slippage) pips</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">Market range (slippage) pips</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">Market range (slippage) pips</param>
            <param name="comment">Order comment</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", OnOpened);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">Market range (slippage) pips</param>
            <param name="comment">Order comment</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", OnOpened);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">Market range (slippage) pips</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", OnOpened);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", HasTrailingStop, OnOpened);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">Market range (slippage) pips</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", OnOpened);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", HasTrailingStop, OnOpened);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, 
                               "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ClosePositionAsync(cAlgo.API.Position,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Close a position in asynchronous execution mode
            </summary>
            <param name="position">The position to close</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ClosePositionAsync(cAlgo.API.Position,System.Int64,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Close a position in asynchronous execution mode
            </summary>
            <param name="position">The position to close</param>
            <param name="volume">The volume to close</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            ClosePositionAsync(position);
            </code>
            </example>
            <example>
            <code>
            if (position.Volume >= 20000)
                ClosePositionAsync(position, 10000);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ClosePositionAsync(cAlgo.API.Position,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Close a position in asynchronous execution mode
            </summary>
            <param name="position">The position to close</param>
            <param name="volume">The volume to close</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            ClosePositionAsync(position);
            </code>
            </example>
            <example>
            <code>
            if (position.Volume >= 20000)
                ClosePositionAsync(position, 10000);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips from target price</param>
            <param name="takeProfitPips">Take profit in pips from target price</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
            }
            private void LimitOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips from target price</param>
            <param name="takeProfitPips">Take profit in pips from target price</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
            }
            private void LimitOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips from target price</param>
            <param name="takeProfitPips">Take profit in pips from target price</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">The action when the position closes</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
            }
            private void LimitOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
            <example>
            <code> 
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips from target price</param>
            <param name="takeProfitPips">Take profit in pips from target price</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="callback">The action when the position closes</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
            }
            private void LimitOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
            <example>
            <code> 
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop);
            </code>
            </example>
            <example>
            <code> 
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                        Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                        Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">Action when order is placed</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                        Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="callback">Action when order is placed</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                        Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, 
                                    "order comment", hasTrailingStop, StopTriggerMethod.Trade);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with stop trigger method: {0}", tradeResult.PendingOrder.StopTriggerMethod);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
            <param name="callback">Action when order is placed</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                        Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, 
                                    "order comment", hasTrailingStop, StopTriggerMethod.Trade);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with stop loss trigger method: {0}", tradeResult.PendingOrder.StopLossTriggerMethod);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                StopTriggerMethod stopLossTriggerMethod = StopTriggerMethod.Trade;
                StopTriggerMethod stopOrderTriggerMethod = StopTriggerMethod.Trade;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, 
                                    "order comment", hasTrailingStop, stopLossTriggerMethod, stopOrderTriggerMethod);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with stop order trigger method: {0}", tradeResult.PendingOrder.StopOrderTriggerMethod);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double)">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod)">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopLimitOrder</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopLimitOrder</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.CancelPendingOrderAsync(cAlgo.API.PendingOrder,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Cancel a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to cancel</param>
            <param name="callback">Method that is called when pending order is cancelled</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            if (PendingOrders.Count > 0)           
            {
                var pendingOrder = PendingOrders[0];
                CancelPendingOrderAsync(pendingOrder);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Int64,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="volume">New volume</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Int64,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="volume">New volume</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, 5);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="volume">New volume</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, 5);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="volume">New volume</param>
            <param name="callback">Method that is called when order is modified</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade, StopTriggerMethod.Opposite);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="volume">New volume</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="volume">New volume</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, 5, hasTrailingStop);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="volume">New volume</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, hasTrailingStop);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, hasTrailingStop, StopTriggerMethod.Trade);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, hasTrailingStop, 5, StopTriggerMethod.Trade, StopTriggerMethod.Opposite);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ReversePositionAsync(cAlgo.API.Position,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify Position in asynchronous execution mode
            </summary>
            <param name="position">Position to modify</param>
            <param name="callback">Method that is called when position is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                ReversePositionAsync(position, TradeType.Sell);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPositionAsync(cAlgo.API.Position,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify Position in asynchronous execution mode
            </summary>
            <param name="position">Position to modify</param>
            <param name="volume">New volume</param>
            <param name="callback">Method that is called when position is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                ModifyPositionAsync(position, 20000);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ReversePositionAsync(cAlgo.API.Position,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify Position in asynchronous execution mode
            </summary>
            <param name="position">Position to modify</param>
            <param name="volume">New volume</param>
            <param name="callback">Method that is called when position is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                ReversePositionAsync(position, 20000);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPositionAsync(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify Position in asynchronous execution mode
            </summary>
            <param name="position">Position to modify</param>
            <param name="stopLoss">New stop loss</param>
            <param name="takeProfit">New take profit</param>
            <param name="callback">Method that is called when position is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                ModifyPositionAsync(position, stopLoss,  takeProfit);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPositionAsync(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify Position in asynchronous execution mode
            </summary>
            <param name="position">Position to modify</param>
            <param name="stopLoss">New stop loss</param>
            <param name="takeProfit">New take profit</param>
            <param name="callback">Method that is called when position is modified</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                ModifyPositionAsync(position, stopLoss,  takeProfit);
            }
            </code>
            </example>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                bool hasTrailingStop = true;
                ModifyPositionAsync(position, stopLoss,  takeProfit, hasTrailingStop);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPositionAsync(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify Position in asynchronous execution mode
            </summary>
            <param name="position">Position to modify</param>
            <param name="stopLoss">New stop loss</param>
            <param name="takeProfit">New take profit</param>
            <param name="callback">Method that is called when position is modified</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                ModifyPositionAsync(position, stopLoss,  takeProfit);
            }
            </code>
            </example>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                bool hasTrailingStop = true;
                ModifyPositionAsync(position, stopLoss,  takeProfit, hasTrailingStop);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Robot.LastResult">
            <summary>
            The latest trade result
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 20000, null, 10, null);
            if(LastResult.IsSuccessful)
                Print(LastResult.Position.StopLoss);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ToString">
            <summary>
            Returns the cBot class name
            </summary>
            <returns></returns>
            <example>
            <code>
            protected override void OnStart()
            {
                Print(ToString());
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.GetFitness(cAlgo.API.GetFitnessArgs)">
            <summary>
            Override this method to provide custom fitness value for Optimization
            </summary>
            <returns>Fitness value of your cBot</returns>
        </member>
        <member name="T:cAlgo.API.RobotAttribute">
            <summary>
            Sealed Class RobotAttribute.
            </summary>
            <remarks>
            Marks a class as a Robot. The Robot attribute cannot be ommited. 
            </remarks>
        </member>
        <member name="M:cAlgo.API.RobotAttribute.#ctor(System.String)">
            <summary>
            Initializes a new RobotAttribute instance and sets the name
            </summary>
            <remarks>
            Marks a class as a Robot. The Robot attribute cannot be ommited. 
            To make it effective apply enclosed in square brackets, 
            e.g. [Robot("Name")], before the Robot class declaration.
            </remarks>
            <param name="name">The name of the Robot</param>
            <example>
            <code>
            
            &#47;&#47;&#46;&#46;&#46;
            
            [Robot("myRobot")]    //  myRobot is the name of the Robot
            public class myRobot : Robot
            {
                &#47;&#47;&#46;&#46;&#46;
            }
            
            &#47;&#47;&#46;&#46;&#46;
            
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.RobotAttribute.#ctor">
            <summary>
            Initializes a new RobotAttribute instance.
            </summary>
            <remarks>
            To make it effective apply enclosed in square brackets, 
            e.g. [Robot], in front of the robot class declaration.
            </remarks>
            <example>
            <code>
            
            [Robot] // RobotAttribute
            public class NewRobot : Robot
            {
                &#47;&#47;&#46;&#46;&#46;
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.RobotAttribute.Name">
            <summary>
            The name of a robot. Sets from constructor.
            </summary>
            <example>
            <code>
             
            [Robot("newRobot")]    //  newRobot is the name of the Robot
            public class myRobot : Robot
            {
                &#47;&#47;&#46;&#46;&#46;
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.RobotAttribute.TimeZone">
            <summary>
            Sets the timezone for all the robot or indicator datetime references
            </summary>
            <remarks>
            All dates and times within the robot or indicator will be converted to this timezone
            </remarks>
            <example>
            <code>
            [Robot(TimeZone = TimeZones.EasternStandardTime)]
            public class NewsRobot : Robot
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.RobotAttribute.AccessRights">
            <summary>
            AccessRights required for cBot
            </summary>
        </member>
        <member name="T:cAlgo.API.TradeType">
            <summary>
            The direction of a trade order.
            </summary>
            <remarks>
            Indicates the trade direction, whether it is a Buy or a Sell trade.
            </remarks>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 20000);
            </code>
            </example>
            <example>
            <code>
            Position position =  Positions.Find("myLabel", Symbol, TradeType.Sell);
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, Symbol.Bid);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.TradeType.Buy">
            <summary>
            Represents a Buy order.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, Symbol.Bid);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.TradeType.Sell">
            <summary>
            Represents a Sell order.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Sell, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
        </member>
    </members>
</doc>
