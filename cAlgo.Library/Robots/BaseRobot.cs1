using System;
using cAlgo.API;
using cAlgo.API.Internals;

namespace cAlgo.Library.Robots
{
    public abstract class BaseRobot : Robot
    {
        private bool _takeLongsParameter;
        private bool _takeShortsParameter;
        private StopLossRule _initialStopLossRule;
        private StopLossRule _trailingStopLossRule;
        private LotSizingRule _lotSizingRule;
        private int _initialStopLossInPips;
        private int _takeProfitInPips;
        private bool _canOpenPosition;

        //public bool MoveToBreakEven { get; set; }

        protected abstract string Name { get; }

        protected abstract bool HasBullishSignal();
        protected abstract bool HasBearishSignal();

        protected void Init(
            bool takeLongsParameter, 
            bool takeShortsParameter, 
            string initialStopLossRule,
            string trailingStopLossRule,
            string lotSizingRule,
            int initialStopLossInPips = 0,
            int takeProfitInPips = 0)
        {
            _takeLongsParameter = takeLongsParameter;
            _takeShortsParameter = takeShortsParameter;
            _initialStopLossRule = (StopLossRule)Enum.Parse(typeof(StopLossRule), initialStopLossRule);
            _trailingStopLossRule = (StopLossRule)Enum.Parse(typeof(StopLossRule), trailingStopLossRule);
            _lotSizingRule = (LotSizingRule)Enum.Parse(typeof(LotSizingRule), lotSizingRule);
            _initialStopLossInPips = initialStopLossInPips;
            _takeProfitInPips = takeProfitInPips;

            _canOpenPosition = true;

            Positions.Opened += OnPositionOpened;
            Positions.Closed += OnPositionClosed;

            Print("Symbol.TickSize: {0}, Symbol.Digits: {1}, Symbol.PipSize: {2}", 
                Symbol.TickSize, Symbol.Digits, Symbol.PipSize);
        }

        protected override void OnBar()
        {
            if (!_canOpenPosition)
            {
                return;
            }

            if (PendingOrders.Count > 0)
            {
                return;
            }

            double? stopLossLevel;
            if (_takeLongsParameter && HasBullishSignal())
            {
                var Quantity = 1;

                var volumeInUnits = Symbol.QuantityToVolumeInUnits(Quantity);
                //stopLossLevel = CalculateStopLossLevelForBuyOrder();

                var previousLow = MarketSeries.Low.Last(1);
                Print("Last close = {0}", MarketSeries.Close.LastValue);
                Print("Low of previous bar = {0}", previousLow);

                stopLossLevel = (MarketSeries.Close.LastValue - previousLow) / Symbol.PipSize + _initialStopLossInPips;
                Print("SL = {0}", stopLossLevel);

                if (stopLossLevel.HasValue)
                {
                    var targetPrice = MarketSeries.High.Maximum(2);

                    // Take profit at 1:1 risk
                    var takeProfitPips = stopLossLevel.Value;

                    // TODO: Fix expiration
                    var expiration = DateTime.SpecifyKind(DateTime.UtcNow.AddHours(20), DateTimeKind.Utc);

                    PlaceStopOrder(TradeType.Buy, Symbol, volumeInUnits, targetPrice, Name, stopLossLevel, takeProfitPips, expiration, "Placing BUY Stop at " + targetPrice);
                }

                //ExecuteMarketOrder(TradeType.Buy, Symbol, volumeInUnits, Name, stopLossLevel, _takeProfitInPips);
            }
            else if (_takeShortsParameter && HasBearishSignal())
            {
                var Quantity = 1;

                var volumeInUnits = Symbol.QuantityToVolumeInUnits(Quantity);
                ExecuteMarketOrder(TradeType.Sell, Symbol, volumeInUnits, Name, _initialStopLossInPips, _takeProfitInPips);
            }
        }

        private void OnPositionOpened(PositionOpenedEventArgs args)
        {
            var position = args.Position;
            var sl = position.StopLoss.HasValue
                ? string.Format(" (SL={0})", position.StopLoss.Value)
                : string.Empty;

            var tp = position.TakeProfit.HasValue
                ? string.Format(" (TP={0})", position.TakeProfit.Value)
                : string.Empty;

            Print("{0} {1:N} at {2}{3}{4}", position.TradeType, position.VolumeInUnits, position.EntryPrice, sl, tp);
            _canOpenPosition = false;
        }

        private void OnPositionClosed(PositionClosedEventArgs args)
        {
            var position = args.Position;
            Print("Closed {0:N} {1} at {2} for {3} profit", position.VolumeInUnits, position.TradeType, position.EntryPrice, position.GrossProfit);
            _canOpenPosition = true;
        }

        private double? CalculateStopLossLevelForBuyOrder()
        {
            double? stopLossLevel = null;

            switch (_initialStopLossRule)
            {
                case StopLossRule.None:
                    break;

                case StopLossRule.StaticPipsValue:
                    stopLossLevel = _initialStopLossInPips;
                    break;

                case StopLossRule.CurrentBarNPips:
                    stopLossLevel = _initialStopLossInPips + (Symbol.Ask - MarketSeries.Low.Last(1)) / Symbol.PipSize;
                    break;

                case StopLossRule.PreviousBarNPips:
                    var low = MarketSeries.Low.Last(1);
                    if (MarketSeries.Low.Last(2) < low)
                    {
                        low = MarketSeries.Low.Last(2);
                    }

                    stopLossLevel = _initialStopLossInPips + (Symbol.Ask - low) / Symbol.PipSize;
                    break;
            }

            return stopLossLevel.HasValue
                ? (double?)Math.Round(stopLossLevel.Value, Symbol.Digits)
                : null;
        }
    }
}
